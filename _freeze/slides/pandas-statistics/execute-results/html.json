{
  "hash": "ce1d5cc6106aeec5ab1fa1e79c670e84",
  "result": {
    "markdown": "---\ntitle: Statistics and Plots\nlang: en\nsubtitle: Pandas Introduction\nauthor: Jan Kirenz\nexecute:\n  eval: true\n  echo: true\nhighlight-style: github\nformat:\n  revealjs: \n    toc: true\n    toc-depth: 1\n    embed-resources: false\n    theme: [dark, ../custom.scss]  \n    incremental: true\n    transition: slide\n    background-transition: fade\n    transition-speed: slow\n    code-copy: true\n    code-line-numbers: true\n    smaller: false\n    scrollable: true\n    slide-number: c\n    preview-links: auto\n    chalkboard: \n      buttons: false\n   #logo: images/logo.png\n    footer: Jan Kirenz\n---\n\n# Setup\n\n::: {#12920170 .cell execution_count=1}\n``` {.python .cell-code}\nimport pandas as pd\n```\n:::\n\n\n::: {#204bcb08 .cell execution_count=2}\n``` {.python .cell-code code-line-numbers=\"|1|2|3|4|5|\"}\ndf = pd.DataFrame({\n    'name': [\"Tom\", \"Lisa\", \"Peter\"],\n    'height': [1.68, 1.93, 1.72],\n    'weight': [48.4, 89.8, 84.2],\n    'id': [1, 2, 3],\n    'city': ['Stuttgart', 'Stuttgart', 'Berlin']\n})\n\ndf['bmi'] = round(df['weight'] / (df['height'] * df['height']), 2)\ndf[\"name\"] = df[\"name\"].astype(\"category\")\ndf['id'] = df['id'].astype(str)\n```\n:::\n\n\n# Numeric Data\n\n## Mean\n\n- We can calculate simple statistics like mean, median, standard deviation etc.\n\n. . .\n\n::: {#37043d70 .cell output-location='fragment' execution_count=3}\n``` {.python .cell-code}\ndf['height'].mean()\n```\n\n::: {.cell-output .cell-output-display execution_count=3}\n```\n1.7766666666666666\n```\n:::\n:::\n\n\n. . .\n\n::: {#db8b6cb1 .cell output-location='fragment' execution_count=4}\n``` {.python .cell-code}\ndf['height'].mean().round(2)\n```\n\n::: {.cell-output .cell-output-display execution_count=4}\n```\n1.78\n```\n:::\n:::\n\n\n## Mean\n\n- Print the value in nice format ([using formatted string literals](https://docs.python.org/3.6/reference/lexical_analysis.html#formatted-string-literals) f\"...\") \n\n. . .\n\n::: {#70e17ce6 .cell output-location='fragment' execution_count=5}\n``` {.python .cell-code}\nprint(f\"The mean of height is {df['height'].mean():.2f}\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nThe mean of height is 1.78\n```\n:::\n:::\n\n\n## Median and Standard Deviation\n\n::: {#1bfb5868 .cell output-location='fragment' execution_count=6}\n``` {.python .cell-code}\ndf['height'].median()\n```\n\n::: {.cell-output .cell-output-display execution_count=6}\n```\n1.72\n```\n:::\n:::\n\n\n. . .\n\n::: {#6d4b931a .cell output-location='fragment' execution_count=7}\n``` {.python .cell-code}\ndf['height'].std()\n```\n\n::: {.cell-output .cell-output-display execution_count=7}\n```\n0.13428824718989124\n```\n:::\n:::\n\n\n## Describe\n\n- [describe()](https://pandas.pydata.org/docs/reference/api/pandas.DataFrame.describe.html#pandas.DataFrame.describe) shows a quick statistic summary of your numerical data.\n\n\n. . .\n\n::: {#3aafc605 .cell output-location='fragment' execution_count=8}\n``` {.python .cell-code}\ndf.describe()\n```\n\n::: {.cell-output .cell-output-display execution_count=8}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>height</th>\n      <th>weight</th>\n      <th>bmi</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>count</th>\n      <td>3.000000</td>\n      <td>3.000000</td>\n      <td>3.000000</td>\n    </tr>\n    <tr>\n      <th>mean</th>\n      <td>1.776667</td>\n      <td>74.133333</td>\n      <td>23.240000</td>\n    </tr>\n    <tr>\n      <th>std</th>\n      <td>0.134288</td>\n      <td>22.460929</td>\n      <td>5.704972</td>\n    </tr>\n    <tr>\n      <th>min</th>\n      <td>1.680000</td>\n      <td>48.400000</td>\n      <td>17.150000</td>\n    </tr>\n    <tr>\n      <th>25%</th>\n      <td>1.700000</td>\n      <td>66.300000</td>\n      <td>20.630000</td>\n    </tr>\n    <tr>\n      <th>50%</th>\n      <td>1.720000</td>\n      <td>84.200000</td>\n      <td>24.110000</td>\n    </tr>\n    <tr>\n      <th>75%</th>\n      <td>1.825000</td>\n      <td>87.000000</td>\n      <td>26.285000</td>\n    </tr>\n    <tr>\n      <th>max</th>\n      <td>1.930000</td>\n      <td>89.800000</td>\n      <td>28.460000</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n```\n:::\n:::\n\n\n## Describe\n\n::: {#3ee42fc8 .cell output-location='fragment' execution_count=9}\n``` {.python .cell-code}\ndf.describe().T.round(2)\n```\n\n::: {.cell-output .cell-output-display execution_count=9}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>count</th>\n      <th>mean</th>\n      <th>std</th>\n      <th>min</th>\n      <th>25%</th>\n      <th>50%</th>\n      <th>75%</th>\n      <th>max</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>height</th>\n      <td>3.0</td>\n      <td>1.78</td>\n      <td>0.13</td>\n      <td>1.68</td>\n      <td>1.70</td>\n      <td>1.72</td>\n      <td>1.82</td>\n      <td>1.93</td>\n    </tr>\n    <tr>\n      <th>weight</th>\n      <td>3.0</td>\n      <td>74.13</td>\n      <td>22.46</td>\n      <td>48.40</td>\n      <td>66.30</td>\n      <td>84.20</td>\n      <td>87.00</td>\n      <td>89.80</td>\n    </tr>\n    <tr>\n      <th>bmi</th>\n      <td>3.0</td>\n      <td>23.24</td>\n      <td>5.70</td>\n      <td>17.15</td>\n      <td>20.63</td>\n      <td>24.11</td>\n      <td>26.28</td>\n      <td>28.46</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n```\n:::\n:::\n\n\n## Describe\n\n- Summary statistics for numeric variables `height` and `bmi` for different levels of the categorical variable `city`:\n\n. . .\n\n::: {#8f9444e8 .cell output-location='fragment' execution_count=10}\n``` {.python .cell-code}\ndf[['height', 'city']].groupby(['city']).describe().round(2).T\n```\n\n::: {.cell-output .cell-output-display execution_count=10}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>city</th>\n      <th>Berlin</th>\n      <th>Stuttgart</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th rowspan=\"8\" valign=\"top\">height</th>\n      <th>count</th>\n      <td>1.00</td>\n      <td>2.00</td>\n    </tr>\n    <tr>\n      <th>mean</th>\n      <td>1.72</td>\n      <td>1.80</td>\n    </tr>\n    <tr>\n      <th>std</th>\n      <td>NaN</td>\n      <td>0.18</td>\n    </tr>\n    <tr>\n      <th>min</th>\n      <td>1.72</td>\n      <td>1.68</td>\n    </tr>\n    <tr>\n      <th>25%</th>\n      <td>1.72</td>\n      <td>1.74</td>\n    </tr>\n    <tr>\n      <th>50%</th>\n      <td>1.72</td>\n      <td>1.80</td>\n    </tr>\n    <tr>\n      <th>75%</th>\n      <td>1.72</td>\n      <td>1.87</td>\n    </tr>\n    <tr>\n      <th>max</th>\n      <td>1.72</td>\n      <td>1.93</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n```\n:::\n:::\n\n\n# Categorical Data\n\n## Categorical Data\n\n- we can also use `describe()` for categorical data\n\n. . .\n\n::: {#2a05780a .cell output-location='fragment' execution_count=11}\n``` {.python .cell-code}\ndf.describe(include=\"category\").T\n```\n\n::: {.cell-output .cell-output-display execution_count=11}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>count</th>\n      <th>unique</th>\n      <th>top</th>\n      <th>freq</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>name</th>\n      <td>3</td>\n      <td>3</td>\n      <td>Lisa</td>\n      <td>1</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n```\n:::\n:::\n\n\n## Categorical data\n\n\n- Show unique levels of a categorical variable and count with `value_counts()`\n\n. . .\n\n::: {#0188c8d4 .cell output-location='fragment' execution_count=12}\n``` {.python .cell-code}\ndf['city'].value_counts()\n```\n\n::: {.cell-output .cell-output-display execution_count=12}\n```\nStuttgart    2\nBerlin       1\nName: city, dtype: int64\n```\n:::\n:::\n\n\n## Categorical data\n\n\n- We also can extract specific values\n\n::: {#98cbfee1 .cell output-location='fragment' execution_count=13}\n``` {.python .cell-code}\ndf['city'].value_counts().Stuttgart\n```\n\n::: {.cell-output .cell-output-display execution_count=13}\n```\n2\n```\n:::\n:::\n\n\n## Categorical data\n\n\n- Print the value in nice format ([using formatted string literals](https://docs.python.org/3.6/reference/lexical_analysis.html#formatted-string-literals) f\"...\") \n\n. . .\n\n::: {#23ae3f72 .cell output-location='fragment' execution_count=14}\n``` {.python .cell-code}\ncount_stuttgart = df['city'].value_counts().Stuttgart\n\nprint(f\"There are {count_stuttgart} people from Stuttgart in the data\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nThere are 2 people from Stuttgart in the data\n```\n:::\n:::\n\n\n# Loop over List\n\n## Loop over list\n\n\n- Example of for loop to obtain statistics for specific numerical columns\n\n. . .\n\n::: {#54805379 .cell execution_count=15}\n``` {.python .cell-code}\n# make a list of numerical columns\nlist_num = ['height', 'weight']\n```\n:::\n\n\n. . .\n\n::: {#8d4f82ea .cell output-location='fragment' execution_count=16}\n``` {.python .cell-code}\n# calculate median for our list and only show 4 digits, then make a new line (\\n)\nfor i in list_num:\n    print(f'Median of {i} equals {df[i].median():.4} \\n')\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nMedian of height equals 1.72 \n\nMedian of weight equals 84.2 \n\n```\n:::\n:::\n\n\n## Loop over list\n\n- Calculate summary statistics for our list.\n\n::: {#2abce5ab .cell output-location='fragment' execution_count=17}\n``` {.python .cell-code}\nfor i in list_num:\n    print(f'Column: {i}  \\n  {df[i].describe().round(2)}   \\n')   \n```\n\n::: {.cell-output .cell-output-stdout}\n```\nColumn: height  \n  count    3.00\nmean     1.78\nstd      0.13\nmin      1.68\n25%      1.70\n50%      1.72\n75%      1.82\nmax      1.93\nName: height, dtype: float64   \n\nColumn: weight  \n  count     3.00\nmean     74.13\nstd      22.46\nmin      48.40\n25%      66.30\n50%      84.20\n75%      87.00\nmax      89.80\nName: weight, dtype: float64   \n\n```\n:::\n:::\n\n\n# Create Plots\n\n## Setup\n\n::: {#31ccf480 .cell execution_count=18}\n``` {.python .cell-code}\n# Pandas needs the module matplotlib to create plots\nimport matplotlib.pyplot as plt\n\n# show plot output in Jupyter Notebook\n%matplotlib inline\n```\n:::\n\n\n## Boxplot\n\n::: {#fe46d820 .cell output-location='fragment' execution_count=19}\n``` {.python .cell-code}\ndf.boxplot(column=['weight']);\n```\n\n::: {.cell-output .cell-output-display}\n![](pandas-statistics_files/figure-revealjs/cell-20-output-1.png){width=790 height=411}\n:::\n:::\n\n\n## Boxplots with for loop\n\n::: {#49c084cc .cell output-location='fragment' execution_count=20}\n``` {.python .cell-code}\n# obtain plots for our list\nfor i in list_num:\n    df.boxplot(column=[i])\n    plt.title(\"Boxplot for \" + i)\n    plt.show()\n```\n\n::: {.cell-output .cell-output-display}\n![](pandas-statistics_files/figure-revealjs/cell-21-output-1.png){width=802 height=431}\n:::\n\n::: {.cell-output .cell-output-display}\n![](pandas-statistics_files/figure-revealjs/cell-21-output-2.png){width=790 height=431}\n:::\n:::\n\n\n",
    "supporting": [
      "pandas-statistics_files"
    ],
    "filters": [],
    "includes": {
      "include-in-header": [
        "<script src=\"https://cdnjs.cloudflare.com/ajax/libs/require.js/2.3.6/require.min.js\" integrity=\"sha512-c3Nl8+7g4LMSTdrm621y7kf9v3SDPnhxLNhcjFJbKECVnmZHTdo+IRO05sNLTH/D3vA6u1X32ehoLC7WFVdheg==\" crossorigin=\"anonymous\"></script>\n<script src=\"https://cdnjs.cloudflare.com/ajax/libs/jquery/3.5.1/jquery.min.js\" integrity=\"sha512-bLT0Qm9VnAYZDflyKcBaQ2gg0hSYNQrJ8RilYldYQ1FxQYoCLtUjuuRuZo+fjqhx/qtq/1itJ0C2ejDxltZVFg==\" crossorigin=\"anonymous\"></script>\n<script type=\"application/javascript\">define('jquery', [],function() {return window.jQuery;})</script>\n"
      ]
    }
  }
}