{
  "hash": "df5d3b4f87cc113fb2c8b0074e82f15a",
  "result": {
    "markdown": "---\ntitle: Filter, Group and Bin Data\nlang: en\nsubtitle: Pandas Introduction\nauthor: Jan Kirenz\nexecute:\n  eval: true\n  echo: true\nhighlight-style: github\nformat:\n  revealjs: \n    toc: true\n    toc-depth: 1\n    embed-resources: false\n    theme: [dark, ../custom.scss]  \n    incremental: true\n    transition: slide\n    background-transition: fade\n    transition-speed: slow\n    code-copy: true\n    code-line-numbers: true\n    smaller: false\n    scrollable: true\n    slide-number: c\n    preview-links: auto\n    chalkboard: \n      buttons: false\n   #logo: images/logo.png\n    footer: Jan Kirenz\n---\n\n# Setup\n\n::: {#d2ed5de7 .cell execution_count=1}\n``` {.python .cell-code}\nimport pandas as pd\n```\n:::\n\n\n::: {#c1a3edef .cell execution_count=2}\n``` {.python .cell-code code-line-numbers=\"|1|2|3|4|5|\"}\ndf = pd.DataFrame({\n    'name': [\"Tom\", \"Lisa\", \"Peter\"],\n    'height': [1.68, 1.93, 1.72],\n    'weight': [48.4, 89.8, 84.2],\n    'id': [1, 2, 3],\n    'city': ['Stuttgart', 'Stuttgart', 'Berlin']\n})\n\ndf['bmi'] = round(df['weight'] / (df['height'] * df['height']), 2)\ndf[\"name\"] = df[\"name\"].astype(\"category\")\ndf['id'] = df['id'].astype(str)\n```\n:::\n\n\n# Filter \n\n\n## Filter \n\n- Using a single column’s values to filter data (boolean indexing).\n\n. . .\n\n::: {#c9415b41 .cell output-location='fragment' execution_count=3}\n``` {.python .cell-code}\ndf[df[\"height\"] >= 1.67]\n```\n\n::: {.cell-output .cell-output-display execution_count=3}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>name</th>\n      <th>height</th>\n      <th>weight</th>\n      <th>id</th>\n      <th>city</th>\n      <th>bmi</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>Tom</td>\n      <td>1.68</td>\n      <td>48.4</td>\n      <td>1</td>\n      <td>Stuttgart</td>\n      <td>17.15</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>Lisa</td>\n      <td>1.93</td>\n      <td>89.8</td>\n      <td>2</td>\n      <td>Stuttgart</td>\n      <td>24.11</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>Peter</td>\n      <td>1.72</td>\n      <td>84.2</td>\n      <td>3</td>\n      <td>Berlin</td>\n      <td>28.46</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n```\n:::\n:::\n\n\n## Filter on multiple conditions\n\n\n- Combine filtering for two columns or more with `&` (and)\n\n. . .\n\n::: {#e272a268 .cell execution_count=4}\n``` {.python .cell-code}\ndf[(df[\"height\"] >= 1.67) & (df[\"weight\"] < 74)]\n```\n\n::: {.cell-output .cell-output-display execution_count=4}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>name</th>\n      <th>height</th>\n      <th>weight</th>\n      <th>id</th>\n      <th>city</th>\n      <th>bmi</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>Tom</td>\n      <td>1.68</td>\n      <td>48.4</td>\n      <td>1</td>\n      <td>Stuttgart</td>\n      <td>17.15</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n```\n:::\n:::\n\n\n## Filter on multiple conditions\n\n\n- You can also combine filtering for two columns or more with `|` (or)\n\n. . .\n\n::: {#d7cbd2d7 .cell output-location='fragment' execution_count=5}\n``` {.python .cell-code}\ndf[(df[\"height\"] >= 167) | (df[\"weight\"] < 74)]\n```\n\n::: {.cell-output .cell-output-display execution_count=5}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>name</th>\n      <th>height</th>\n      <th>weight</th>\n      <th>id</th>\n      <th>city</th>\n      <th>bmi</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>Tom</td>\n      <td>1.68</td>\n      <td>48.4</td>\n      <td>1</td>\n      <td>Stuttgart</td>\n      <td>17.15</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n```\n:::\n:::\n\n\n## isin()\n\n- Always use the [isin()](https://pandas.pydata.org/docs/reference/api/pandas.Series.isin.html#pandas.Series.isin) method if you have multiple conditions within one column:\n\n. . .\n\n::: {#a361016b .cell output-location='fragment' execution_count=6}\n``` {.python .cell-code}\ndf[df[\"name\"].isin([\"Tom\", \"Steven\"])]\n```\n\n::: {.cell-output .cell-output-display execution_count=6}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>name</th>\n      <th>height</th>\n      <th>weight</th>\n      <th>id</th>\n      <th>city</th>\n      <th>bmi</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>Tom</td>\n      <td>1.68</td>\n      <td>48.4</td>\n      <td>1</td>\n      <td>Stuttgart</td>\n      <td>17.15</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n```\n:::\n:::\n\n\n# Grouping\n\n## Grouping\n\n- By “group by” we are referring to a process involving one or more of the following steps:\n\n- **Splitting** the data into groups based on some criteria\n\n- **Applying** a function to each group independently\n\n- **Combining** the results into a data structure\n\n## Grouping\n\n- Grouping and then applying the `mean()` function to the resulting groups. Furthermore, we round the results and transpose the data.\n\n. . .\n\n::: {#adb9b99d .cell output-location='fragment' execution_count=7}\n``` {.python .cell-code}\ndf.groupby(\"city\").mean(numeric_only=True).round(2).T\n```\n\n::: {.cell-output .cell-output-display execution_count=7}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th>city</th>\n      <th>Berlin</th>\n      <th>Stuttgart</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>height</th>\n      <td>1.72</td>\n      <td>1.80</td>\n    </tr>\n    <tr>\n      <th>weight</th>\n      <td>84.20</td>\n      <td>69.10</td>\n    </tr>\n    <tr>\n      <th>bmi</th>\n      <td>28.46</td>\n      <td>20.63</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n```\n:::\n:::\n\n\n# Segment data into bins\n\n## Segment data into bins\n\n- Use the function [cut](https://pandas.pydata.org/docs/reference/api/pandas.cut.html) when you need to segment and sort data values into bins. \n\n- This function is also useful for going from a continuous variable to a categorical variable. \n\n## Segment data into bins {.smaller}\n\nThe standard weight status categories associated with BMI ranges for adults are shown in the following table:\n\nBMI\t| Weight Status\n---| ---\nBelow 18.5 |\tUnderweight\n18.5 - 24.9 |\tNormal or Healthy Weight\n25.0 - 29.9 |\tOverweight\n30.0 and Above |\tObese\n\nSource: [U.S. Department of Health & Human Services](https://www.cdc.gov/healthyweight/assessing/bmi/adult_bmi/index.html)\n\n\n## Segment data into bins {.smaller}\n\n\n- In our function, we discretize the variable `bmi` into four bins according to the table above:\n\n- The bins [0, 18.5, 25, 30, float('inf')] indicate (0,18.5], (18.5,25], (25,30], (30, float('inf))\n\n- `float('inf')` is used for setting  variable with an infinitely large value\n\n. . .\n\n::: {#cc23271a .cell execution_count=8}\n``` {.python .cell-code}\ndf['bmi_category'] = pd.cut(df['bmi'],\n                            bins=[0, 18.5, 25, 30, float('inf')],\n                            labels=['underweight', 'normal', 'overweight', \"obese\"])\n```\n:::\n\n\n## Segment data into bins\n\n::: {#9ba09e29 .cell execution_count=9}\n``` {.python .cell-code}\ndf\n```\n\n::: {.cell-output .cell-output-display execution_count=9}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>name</th>\n      <th>height</th>\n      <th>weight</th>\n      <th>id</th>\n      <th>city</th>\n      <th>bmi</th>\n      <th>bmi_category</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>Tom</td>\n      <td>1.68</td>\n      <td>48.4</td>\n      <td>1</td>\n      <td>Stuttgart</td>\n      <td>17.15</td>\n      <td>underweight</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>Lisa</td>\n      <td>1.93</td>\n      <td>89.8</td>\n      <td>2</td>\n      <td>Stuttgart</td>\n      <td>24.11</td>\n      <td>normal</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>Peter</td>\n      <td>1.72</td>\n      <td>84.2</td>\n      <td>3</td>\n      <td>Berlin</td>\n      <td>28.46</td>\n      <td>overweight</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n```\n:::\n:::\n\n\n## Segment data into bins\n\n::: {#494e4e9c .cell execution_count=10}\n``` {.python .cell-code}\ndf['bmi_category']\n```\n\n::: {.cell-output .cell-output-display execution_count=10}\n```\n0    underweight\n1         normal\n2     overweight\nName: bmi_category, dtype: category\nCategories (4, object): ['underweight' < 'normal' < 'overweight' < 'obese']\n```\n:::\n:::\n\n\n## Segment data into bins\n\n\n- Example of how to discretize into four equal-sized bins:\n\n. . .\n\n::: {#49bc5ac2 .cell execution_count=11}\n``` {.python .cell-code}\ndf['bmi_category_2'] = pd.cut(df['bmi'],\n                              bins=4,\n                              labels=['group1', 'group2', 'group3', \"group4\"])\n```\n:::\n\n\n. . .\n\n::: {#a5710cbe .cell execution_count=12}\n``` {.python .cell-code}\ndf['bmi_category_2']\n```\n\n::: {.cell-output .cell-output-display execution_count=12}\n```\n0    group1\n1    group3\n2    group4\nName: bmi_category_2, dtype: category\nCategories (4, object): ['group1' < 'group2' < 'group3' < 'group4']\n```\n:::\n:::\n\n\n## Segment data into bins \n\n\nExample of how to discretize into four equal-sized bins if you don't need labels\n\n::: {#da6a1c1a .cell execution_count=13}\n``` {.python .cell-code}\ndf['bmi_category_3'] = pd.cut(df['bmi'],\n                              bins=4,\n                              labels=False)\n```\n:::\n\n\n. . .\n\n::: {#36d2d988 .cell execution_count=14}\n``` {.python .cell-code}\ndf['bmi_category_3']\n```\n\n::: {.cell-output .cell-output-display execution_count=14}\n```\n0    0\n1    2\n2    3\nName: bmi_category_3, dtype: int64\n```\n:::\n:::\n\n\n",
    "supporting": [
      "pandas-filter-group-bin_files"
    ],
    "filters": [],
    "includes": {
      "include-in-header": [
        "<script src=\"https://cdnjs.cloudflare.com/ajax/libs/require.js/2.3.6/require.min.js\" integrity=\"sha512-c3Nl8+7g4LMSTdrm621y7kf9v3SDPnhxLNhcjFJbKECVnmZHTdo+IRO05sNLTH/D3vA6u1X32ehoLC7WFVdheg==\" crossorigin=\"anonymous\"></script>\n<script src=\"https://cdnjs.cloudflare.com/ajax/libs/jquery/3.5.1/jquery.min.js\" integrity=\"sha512-bLT0Qm9VnAYZDflyKcBaQ2gg0hSYNQrJ8RilYldYQ1FxQYoCLtUjuuRuZo+fjqhx/qtq/1itJ0C2ejDxltZVFg==\" crossorigin=\"anonymous\"></script>\n<script type=\"application/javascript\">define('jquery', [],function() {return window.jQuery;})</script>\n"
      ]
    }
  }
}