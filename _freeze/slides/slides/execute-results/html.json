{
  "hash": "763b0bc5e3c57a5c8c369732cad80e85",
  "result": {
    "markdown": "---\ntitle: Pandas\nlang: en\nsubtitle: Slides for Lab Pandas-Introduction\nauthor: Jan Kirenz\nexecute:\n  eval: true\n  echo: true\nhighlight-style: github\nformat:\n  revealjs: \n    toc: true\n    toc-depth: 1\n    embed-resources: false\n    theme: [dark, ../custom.scss]  \n    incremental: true\n    transition: slide\n    background-transition: fade\n    transition-speed: slow\n    code-copy: true\n    code-line-numbers: true\n    smaller: false\n    scrollable: true\n    slide-number: c\n    preview-links: auto\n    chalkboard: \n      buttons: false\n   #logo: images/logo.png\n    footer: Jan Kirenz\n---\n\n# Pandas introduction\n\n\n## Import pandas\n\n- To load the pandas package and start working with it, import the package. \n\n- The community agreed alias for pandas is `pd`\n\n. . .\n\n::: {#7bdce3f2 .cell execution_count=1}\n``` {.python .cell-code}\nfrom datetime import datetime\nimport pandas as pd\n```\n:::\n\n\n# Create and Import Data\n\n## Data creation\n\n- To manually store data in a table, create a DataFrame:\n\n::: {#4d37e130 .cell execution_count=2}\n``` {.python .cell-code code-line-numbers=\"|1|2|3|4|5|\"}\ndf = pd.DataFrame({\n    'name': [\"Tom\", \"Lisa\", \"Peter\"],\n    'height': [1.68, 1.93, 1.72],\n    'weight': [48.4, 89.8, 84.2],\n    'id': [1, 2, 3],\n    'city': ['Stuttgart', 'Stuttgart', 'Berlin']\n})\n```\n:::\n\n\n## Show data\n\n::: {#71775d26 .cell output-location='fragment' execution_count=3}\n``` {.python .cell-code}\ndf.head()\n```\n\n::: {.cell-output .cell-output-display execution_count=3}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>name</th>\n      <th>height</th>\n      <th>weight</th>\n      <th>id</th>\n      <th>city</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>Tom</td>\n      <td>1.68</td>\n      <td>48.4</td>\n      <td>1</td>\n      <td>Stuttgart</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>Lisa</td>\n      <td>1.93</td>\n      <td>89.8</td>\n      <td>2</td>\n      <td>Stuttgart</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>Peter</td>\n      <td>1.72</td>\n      <td>84.2</td>\n      <td>3</td>\n      <td>Berlin</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n```\n:::\n:::\n\n\n## Import data\n\n- Import data with the prefix `.read_*`\n\n![](https://pandas.pydata.org/docs/_images/02_io_readwrite.svg)\n\n\n## Import data\n\n- Import a CSV file in a GitHub repo \n\n. . .\n\n::: {#6d10a632 .cell output-location='fragment' execution_count=4}\n``` {.python .cell-code code-line-numbers=\"|1|3|5|\"}\nURL = \"https://raw.githubusercontent.com/kirenz/datasets/master/campaign.csv\"\n\ndf_github = pd.read_csv(URL, sep=\",\", decimal='.')\n\ndf_github.head()\n```\n\n::: {.cell-output .cell-output-display execution_count=4}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>age</th>\n      <th>city</th>\n      <th>income</th>\n      <th>membership_days</th>\n      <th>campaign_engagement</th>\n      <th>target</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>56</td>\n      <td>Berlin</td>\n      <td>136748</td>\n      <td>837</td>\n      <td>3</td>\n      <td>1</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>46</td>\n      <td>Stuttgart</td>\n      <td>25287</td>\n      <td>615</td>\n      <td>8</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>32</td>\n      <td>Berlin</td>\n      <td>146593</td>\n      <td>2100</td>\n      <td>3</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>60</td>\n      <td>Berlin</td>\n      <td>54387</td>\n      <td>2544</td>\n      <td>0</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>25</td>\n      <td>Berlin</td>\n      <td>28512</td>\n      <td>138</td>\n      <td>6</td>\n      <td>0</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n```\n:::\n:::\n\n\n## Store data\n\n- Store data with the prefix `.to_*`\n\n. . .\n\n::: {#e04c148d .cell execution_count=5}\n``` {.python .cell-code}\ndf_github.to_csv(\"data.csv\", index=False)\n```\n:::\n\n\n- By setting `index=False` the row index labels are not saved in the spreadsheet\n\n# Viewing data\n\n## Overview\n\n::: {#0ff6cf21 .cell output-location='fragment' execution_count=6}\n``` {.python .cell-code}\ndf\n```\n\n::: {.cell-output .cell-output-display execution_count=6}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>name</th>\n      <th>height</th>\n      <th>weight</th>\n      <th>id</th>\n      <th>city</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>Tom</td>\n      <td>1.68</td>\n      <td>48.4</td>\n      <td>1</td>\n      <td>Stuttgart</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>Lisa</td>\n      <td>1.93</td>\n      <td>89.8</td>\n      <td>2</td>\n      <td>Stuttgart</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>Peter</td>\n      <td>1.72</td>\n      <td>84.2</td>\n      <td>3</td>\n      <td>Berlin</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n```\n:::\n:::\n\n\n## Head and tail\n\n::: {#304fce01 .cell output-location='fragment' execution_count=7}\n``` {.python .cell-code}\n# show first 2 rows\ndf.head(2)\n```\n\n::: {.cell-output .cell-output-display execution_count=7}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>name</th>\n      <th>height</th>\n      <th>weight</th>\n      <th>id</th>\n      <th>city</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>Tom</td>\n      <td>1.68</td>\n      <td>48.4</td>\n      <td>1</td>\n      <td>Stuttgart</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>Lisa</td>\n      <td>1.93</td>\n      <td>89.8</td>\n      <td>2</td>\n      <td>Stuttgart</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n```\n:::\n:::\n\n\n. . .\n\n::: {#31436db4 .cell output-location='fragment' execution_count=8}\n``` {.python .cell-code}\n# show last 2 rows\ndf.tail(2)\n```\n\n::: {.cell-output .cell-output-display execution_count=8}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>name</th>\n      <th>height</th>\n      <th>weight</th>\n      <th>id</th>\n      <th>city</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>1</th>\n      <td>Lisa</td>\n      <td>1.93</td>\n      <td>89.8</td>\n      <td>2</td>\n      <td>Stuttgart</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>Peter</td>\n      <td>1.72</td>\n      <td>84.2</td>\n      <td>3</td>\n      <td>Berlin</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n```\n:::\n:::\n\n\n## Info\n\n- The `info()` method prints information about a DataFrame.\n\n. . .\n\n::: {#01628e9c .cell output-location='fragment' execution_count=9}\n``` {.python .cell-code}\ndf.info()\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n<class 'pandas.core.frame.DataFrame'>\nRangeIndex: 3 entries, 0 to 2\nData columns (total 5 columns):\n #   Column  Non-Null Count  Dtype  \n---  ------  --------------  -----  \n 0   name    3 non-null      object \n 1   height  3 non-null      float64\n 2   weight  3 non-null      float64\n 3   id      3 non-null      int64  \n 4   city    3 non-null      object \ndtypes: float64(2), int64(1), object(2)\nmemory usage: 252.0+ bytes\n```\n:::\n:::\n\n\n## Column names\n\n::: {#6d780489 .cell output-location='fragment' execution_count=10}\n``` {.python .cell-code}\ndf.columns\n```\n\n::: {.cell-output .cell-output-display execution_count=10}\n```\nIndex(['name', 'height', 'weight', 'id', 'city'], dtype='object')\n```\n:::\n:::\n\n\n## Data type\n\n- Show data types ([dtypes](https://pandas.pydata.org/docs/user_guide/basics.html#basics-dtypes)).\n\n::: {#1ca09b09 .cell output-location='fragment' execution_count=11}\n``` {.python .cell-code}\ndf.dtypes\n```\n\n::: {.cell-output .cell-output-display execution_count=11}\n```\nname       object\nheight    float64\nweight    float64\nid          int64\ncity       object\ndtype: object\n```\n:::\n:::\n\n\n- The data types in this DataFrame are integers (int64), floats (float64) and strings (object).\n\n## Index\n\n::: {#eab34888 .cell output-location='fragment' execution_count=12}\n``` {.python .cell-code}\ndf.index\n```\n\n::: {.cell-output .cell-output-display execution_count=12}\n```\nRangeIndex(start=0, stop=3, step=1)\n```\n:::\n:::\n\n\n# Change column names\n\n## Column names\n\nUsually, we prefer to work with columns that have the following proporties:\n\n\n- no leading or trailing whitespace (`\"name\"` instead of `\" name \"`, `\" name\"` or `\"name \"`)\n\n\n- all lowercase (`\"name\"` instead of `\"Name\"`)\n\n\n- no white spaces (`\"my_name\"` instead of `\"my name\"`)\n\n## Simple rename\n\n- First, we rename columns by simply using a mapping\n- We rename `\"name\"` to `\" MY NEW-NAME\"` (note that we include a leading whitespace)\n\n. . .\n\n::: {#e07dbeb1 .cell execution_count=13}\n``` {.python .cell-code}\ndf = df.rename(columns={\"name\": \" MY NEW-NAME\"}, errors=\"raise\")\n```\n:::\n\n\n## Simple rename\n\n::: {#6030ff67 .cell output-location='fragment' execution_count=14}\n``` {.python .cell-code}\ndf.head()\n```\n\n::: {.cell-output .cell-output-display execution_count=14}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>MY NEW-NAME</th>\n      <th>height</th>\n      <th>weight</th>\n      <th>id</th>\n      <th>city</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>Tom</td>\n      <td>1.68</td>\n      <td>48.4</td>\n      <td>1</td>\n      <td>Stuttgart</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>Lisa</td>\n      <td>1.93</td>\n      <td>89.8</td>\n      <td>2</td>\n      <td>Stuttgart</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>Peter</td>\n      <td>1.72</td>\n      <td>84.2</td>\n      <td>3</td>\n      <td>Berlin</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n```\n:::\n:::\n\n\n. . .\n\n::: {#53cdd806 .cell output-location='fragment' execution_count=15}\n``` {.python .cell-code}\ndf.columns\n```\n\n::: {.cell-output .cell-output-display execution_count=15}\n```\nIndex([' MY NEW-NAME', 'height', 'weight', 'id', 'city'], dtype='object')\n```\n:::\n:::\n\n\n## Trailing and leading spaces (with regex)\n\n- We use regular expressions to deal with whitespaces\n\n- To change multiple column names in `df` at once, we use the method `df.columns = df.columns.str.replace()` \n\n- To replace the spaces, we use `.replace()` with `regex=True`\n\n\n## Regular expressions\n\nExplanation for *regex* (see also [Stackoverflow](https://stackoverflow.com/a/67466222)):\n\n- we start with `r` (for raw) which tells Python to treat all following input as raw text (without interpreting it)\n- \"`^`\": is line start\n- \" \": is a white space\n- \"`+`\": some following characters\n- \"`|`\": is or\n- \"`$`\": is line end\n- \"\": is an empty string \n\n## Regular expressions\n\nTo learn more about regular expressions (\"regex\"), visit the following sites:\n\n- [regular expression basics](https://www.w3schools.com/python/python_regex.asp).\n- [interactive regular expressions tool](https://regex101.com/)\n\n## Trailing and leading spaces (with regex)\n\n- In the following function, we search for leading spaces and replace them with an empty string:\n\n. . .\n\n::: {#f0c85865 .cell output-location='fragment' execution_count=16}\n``` {.python .cell-code}\ndf.columns = df.columns.str.replace(r\"^ \", r\"\", regex=True)\n```\n:::\n\n\n. . .\n\n::: {#9bcf6d18 .cell output-location='fragment' execution_count=17}\n``` {.python .cell-code}\ndf.columns\n```\n\n::: {.cell-output .cell-output-display execution_count=17}\n```\nIndex(['MY NEW-NAME', 'height', 'weight', 'id', 'city'], dtype='object')\n```\n:::\n:::\n\n\n## Replace special characters\n\n- Again, we use regular expressions to deal with special characters (like `-`, `%`, `&`, `$` etc.)\n\n- Replace \"`-`\" with \"`_`\"\n\n. . .\n\n::: {#361b36d6 .cell output-location='fragment' execution_count=18}\n``` {.python .cell-code}\ndf.columns = df.columns.str.replace(r\"-\", r\"_\", regex=True)\n```\n:::\n\n\n. . .\n\n::: {#0bf136c3 .cell output-location='fragment' execution_count=19}\n``` {.python .cell-code}\ndf.columns\n```\n\n::: {.cell-output .cell-output-display execution_count=19}\n```\nIndex(['MY NEW_NAME', 'height', 'weight', 'id', 'city'], dtype='object')\n```\n:::\n:::\n\n\n## Lowercase and whitespace\n\n- We can use two simple methods to convert all columns to lowercase and replace white spaces with underscores (\"_\"):\n\n- `.str.lower()`\n\n\n- `.str.replace(' ', '_')`\n\n. . .\n\n::: {#cc587807 .cell output-location='fragment' execution_count=20}\n``` {.python .cell-code}\ndf.columns = df.columns.str.lower().str.replace(' ', '_')\n```\n:::\n\n\n. . .\n\n::: {#d0d048d4 .cell output-location='fragment' execution_count=21}\n``` {.python .cell-code}\ndf.columns\n```\n\n::: {.cell-output .cell-output-display execution_count=21}\n```\nIndex(['my_new_name', 'height', 'weight', 'id', 'city'], dtype='object')\n```\n:::\n:::\n\n\n# Data Types\n\n## Data\n\n::: {#d2301025 .cell execution_count=22}\n``` {.python .cell-code}\ndf = pd.DataFrame({\n    'name': [\"Tom\", \"Lisa\", \"Peter\"],\n    'height': [1.68, 1.93, 1.72],\n    'weight': [48.4, 89.8, 84.2],\n    'id': [1, 2, 3],\n    'city': ['Stuttgart', 'Stuttgart', 'Berlin']\n})\n```\n:::\n\n\n## Data Types\n\n::: {#c44567e1 .cell output-location='fragment' execution_count=23}\n``` {.python .cell-code}\ndf.dtypes\n```\n\n::: {.cell-output .cell-output-display execution_count=23}\n```\nname       object\nheight    float64\nweight    float64\nid          int64\ncity       object\ndtype: object\n```\n:::\n:::\n\n\n## Data Types\n\n::: {#49bf31fb .cell output-location='fragment' execution_count=24}\n``` {.python .cell-code}\ndf.info()\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n<class 'pandas.core.frame.DataFrame'>\nRangeIndex: 3 entries, 0 to 2\nData columns (total 5 columns):\n #   Column  Non-Null Count  Dtype  \n---  ------  --------------  -----  \n 0   name    3 non-null      object \n 1   height  3 non-null      float64\n 2   weight  3 non-null      float64\n 3   id      3 non-null      int64  \n 4   city    3 non-null      object \ndtypes: float64(2), int64(1), object(2)\nmemory usage: 252.0+ bytes\n```\n:::\n:::\n\n\n## Change data type\n\n- There are several methods to [change data types in pandas](https://pandas.pydata.org/docs/reference/api/pandas.DataFrame.astype.html):\n\n- The most common method to change the data type is:\n\n- `.astype()`: Convert to a specific type (like \"`int32`\", \"`float`\" or \"`catgeory`\")\n\n- `.astype(str)`: Convert to string  \n  \n\n## Change data type\n\nMore options:  \n  \n- `to_datetime`: Convert argument to datetime.\n- `to_timedelta`: Convert argument to timedelta.\n- `to_numeric`: Convert argument to a numeric type.\n\n\n## Categorical data\n\n- Categoricals are a pandas data type corresponding to categorical variables in statistics. \n\n\n- A categorical variable takes on a limited, and usually fixed, number of possible values (categories). \n\n- Examples are gender, social class, blood type, country affiliation, observation time or rating via Likert scales.\n\n## Categorical data\n\n\n- Convert variable \"name\" to a category dtype:\n\n. . .\n\n::: {#809c6b9b .cell execution_count=25}\n``` {.python .cell-code}\ndf[\"name\"] = df[\"name\"].astype(\"category\")\n```\n:::\n\n\n## Change data type\n\n::: {#4a44e039 .cell output-location='fragment' execution_count=26}\n``` {.python .cell-code}\ndf.info()\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n<class 'pandas.core.frame.DataFrame'>\nRangeIndex: 3 entries, 0 to 2\nData columns (total 5 columns):\n #   Column  Non-Null Count  Dtype   \n---  ------  --------------  -----   \n 0   name    3 non-null      category\n 1   height  3 non-null      float64 \n 2   weight  3 non-null      float64 \n 3   id      3 non-null      int64   \n 4   city    3 non-null      object  \ndtypes: category(1), float64(2), int64(1), object(1)\nmemory usage: 363.0+ bytes\n```\n:::\n:::\n\n\n## String data\n\n- In our example, `id` is not a number (we can't perform calculations with it)\n\n- It is just a unique identifier so we should transform it to a simple string (object)\n\n. . .\n\n::: {#34d83346 .cell execution_count=27}\n``` {.python .cell-code}\ndf['id'] = df['id'].astype(str)\n```\n:::\n\n\n## Change data type\n\n::: {#8003f03f .cell output-location='fragment' execution_count=28}\n``` {.python .cell-code}\ndf.info()\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n<class 'pandas.core.frame.DataFrame'>\nRangeIndex: 3 entries, 0 to 2\nData columns (total 5 columns):\n #   Column  Non-Null Count  Dtype   \n---  ------  --------------  -----   \n 0   name    3 non-null      category\n 1   height  3 non-null      float64 \n 2   weight  3 non-null      float64 \n 3   id      3 non-null      object  \n 4   city    3 non-null      object  \ndtypes: category(1), float64(2), object(2)\nmemory usage: 363.0+ bytes\n```\n:::\n:::\n\n\n# Add new columns\n\n## Constant\n\n- Add a new variable called \"number\" to df \n\n- The new variable should have the number 42 in all rows\n\n. . .\n\n::: {#469ec815 .cell execution_count=29}\n``` {.python .cell-code}\ndf[\"number\"] = 42\n```\n:::\n\n\n. . .\n\n::: {#34e1c7fd .cell output-location='fragment' execution_count=30}\n``` {.python .cell-code}\ndf.head()\n```\n\n::: {.cell-output .cell-output-display execution_count=30}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>name</th>\n      <th>height</th>\n      <th>weight</th>\n      <th>id</th>\n      <th>city</th>\n      <th>number</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>Tom</td>\n      <td>1.68</td>\n      <td>48.4</td>\n      <td>1</td>\n      <td>Stuttgart</td>\n      <td>42</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>Lisa</td>\n      <td>1.93</td>\n      <td>89.8</td>\n      <td>2</td>\n      <td>Stuttgart</td>\n      <td>42</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>Peter</td>\n      <td>1.72</td>\n      <td>84.2</td>\n      <td>3</td>\n      <td>Berlin</td>\n      <td>42</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n```\n:::\n:::\n\n\n## From existing columns\n\n - Create new columns from existing columns\n\n. . .\n\n::: {#6dcb8907 .cell execution_count=31}\n``` {.python .cell-code}\n# calculate body mass index\ndf['bmi'] = round(df['weight'] / (df['height'] * df['height']), 2)\n```\n:::\n\n\n. . .\n\n::: {#add19b43 .cell output-location='fragment' execution_count=32}\n``` {.python .cell-code}\ndf\n```\n\n::: {.cell-output .cell-output-display execution_count=32}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>name</th>\n      <th>height</th>\n      <th>weight</th>\n      <th>id</th>\n      <th>city</th>\n      <th>number</th>\n      <th>bmi</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>Tom</td>\n      <td>1.68</td>\n      <td>48.4</td>\n      <td>1</td>\n      <td>Stuttgart</td>\n      <td>42</td>\n      <td>17.15</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>Lisa</td>\n      <td>1.93</td>\n      <td>89.8</td>\n      <td>2</td>\n      <td>Stuttgart</td>\n      <td>42</td>\n      <td>24.11</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>Peter</td>\n      <td>1.72</td>\n      <td>84.2</td>\n      <td>3</td>\n      <td>Berlin</td>\n      <td>42</td>\n      <td>28.46</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n```\n:::\n:::\n\n\n# Dates\n\n- To add a date, we can use datetime and [strftime](https://strftime.org) (see code examples on the next slides):\n\n. . .\n\n::: {#8ac44c2e .cell execution_count=33}\n``` {.python .cell-code}\ndf[\"date\"] = datetime.today().strftime('%Y-%m-%d')\n```\n:::\n\n\n. . .\n\n::: {#e804b675 .cell output-location='fragment' execution_count=34}\n``` {.python .cell-code}\ndf.head(3)\n```\n\n::: {.cell-output .cell-output-display execution_count=34}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>name</th>\n      <th>height</th>\n      <th>weight</th>\n      <th>id</th>\n      <th>city</th>\n      <th>number</th>\n      <th>bmi</th>\n      <th>date</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>Tom</td>\n      <td>1.68</td>\n      <td>48.4</td>\n      <td>1</td>\n      <td>Stuttgart</td>\n      <td>42</td>\n      <td>17.15</td>\n      <td>2023-08-19</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>Lisa</td>\n      <td>1.93</td>\n      <td>89.8</td>\n      <td>2</td>\n      <td>Stuttgart</td>\n      <td>42</td>\n      <td>24.11</td>\n      <td>2023-08-19</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>Peter</td>\n      <td>1.72</td>\n      <td>84.2</td>\n      <td>3</td>\n      <td>Berlin</td>\n      <td>42</td>\n      <td>28.46</td>\n      <td>2023-08-19</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n```\n:::\n:::\n\n\n## Dates {.smaller}\n\n| Code | Example                 | Description                                                                                                                                                                      |\n| ---- | ----------------------- | -------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- |\n| %a   | Sun                     | Weekday as locale’s abbreviated name.                                                                                                                                            |\n| %A   | Sunday                  | Weekday as locale’s full name.                                                                                                                                                   |\n| %w   | 0                       | Weekday as a decimal number, where 0 is Sunday and 6 is Saturday.                                                                                                                |\n| %d   | 8                       | Day of the month as a zero-padded decimal number.                                                                                                                                |\n| %-d  | 8                       | Day of the month as a decimal number. (Platform specific)                                                                                                                        |\n\n\n\n\n## Dates {.smaller}\n\n| Code | Example                 | Description                                                                                                                                                                      |\n| ---- | ----------------------- | -------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- |\n\n| %b   | Sep                     | Month as locale’s abbreviated name.                                                                                                                                              |\n| %B   | September               | Month as locale’s full name.                                                                                                                                                     |\n| %m   | 9                       | Month as a zero-padded decimal number.                                                                                                                                           |\n| %-m  | 9                       | Month as a decimal number. (Platform specific)                                                                                                                                   |\n\n\n\n## Dates {.smaller}\n\n| Code | Example                 | Description                                                                                                                                                                      |\n| ---- | ----------------------- | -------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- |\n\n\n| %y   | 13                      | Year without century as a zero-padded decimal number.                                                                                                                            |\n| %Y   | 2013                    | Year with century as a decimal number.                                                                                                                                           |\n| %H   | 7                       | Hour (24-hour clock) as a zero-padded decimal number.                                                                                                                            |\n| %-H  | 7                       | Hour (24-hour clock) as a decimal number. (Platform specific)                                                                                                                    |\n| %I   | 7                       | Hour (12-hour clock) as a zero-padded decimal number.                                                                                                                            |\n| %-I  | 7                       | Hour (12-hour clock) as a decimal number. (Platform specific)                                                                                                                    |\n\n\n\n\n## Dates {.smaller}\n\n| Code | Example                 | Description                                                                                                                                                                      |\n| ---- | ----------------------- | -------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- |\n\n\n| %p   | AM                      | Locale’s equivalent of either AM or PM.                                                                                                                                          |\n| %M   | 6                       | Minute as a zero-padded decimal number.                                                                                                                                          |\n| %-M  | 6                       | Minute as a decimal number. (Platform specific)                                                                                                                                  |\n| %S   | 5                       | Second as a zero-padded decimal number.                                                                                                                                          |\n| %-S  | 5                       | Second as a decimal number. (Platform specific)                                                                                                                                  |\n| %f   | 0                       | Microsecond as a decimal number, zero-padded on the left.                                                                                                                        |\n| %z   | 0                       | UTC offset in the form ±HHMM\\[SS\\[.ffffff\\]\\] (empty string if the object is naive).                                                                                             |\n| %Z   | UTC                     | Time zone name (empty string if the object is naive).                                                                                                                            |\n| %j   | 251                     | Day of the year as a zero-padded decimal number.                                                                                                                                 |\n| %-j  | 251                     | Day of the year as a decimal number. (Platform specific)                                                                                                                         |\n| %U   | 36                      | Week number of the year (Sunday as the first day of the week) as a zero padded decimal number. All days in a new year preceding the first Sunday are considered to be in week 0. |\n| %W   | 35                      | Week number of the year (Monday as the first day of the week) as a decimal number. All days in a new year preceding the first Monday are considered to be in week 0.             |\n| %c   | Sun Sep 8 07:06:05 2013 | Locale’s appropriate date and time representation.                                                                                                                               |\n| %x   | 09.08.13                | Locale’s appropriate date representation.                                                                                                                                        |\n| %X   | 07:06:05                | Locale’s appropriate time representation.                                                                                                                                        |\n| %%   | %                       | A literal '%' character.                                                                                                                                                         |\n\n\n# Statistics\n\n## Numeric data\n\n- We can calculate simple statistics like mean, median, standard deviation etc.\n\n. . .\n\n::: {#facdeb99 .cell output-location='fragment' execution_count=35}\n``` {.python .cell-code}\ndf['height'].mean()\n```\n\n::: {.cell-output .cell-output-display execution_count=35}\n```\n1.7766666666666666\n```\n:::\n:::\n\n\n. . .\n\n::: {#3dca7894 .cell output-location='fragment' execution_count=36}\n``` {.python .cell-code}\ndf['height'].mean().round(2)\n```\n\n::: {.cell-output .cell-output-display execution_count=36}\n```\n1.78\n```\n:::\n:::\n\n\n## Numeric data\n\n- Print the value in nice format ([using formatted string literals](https://docs.python.org/3.6/reference/lexical_analysis.html#formatted-string-literals) f\"...\") \n\n. . .\n\n::: {#bd4c2893 .cell output-location='fragment' execution_count=37}\n``` {.python .cell-code}\nprint(f\"The mean of height is {df['height'].mean():.2f}\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nThe mean of height is 1.78\n```\n:::\n:::\n\n\n## Numeric data\n\n::: {#4dd12fdd .cell output-location='fragment' execution_count=38}\n``` {.python .cell-code}\ndf['height'].median()\n```\n\n::: {.cell-output .cell-output-display execution_count=38}\n```\n1.72\n```\n:::\n:::\n\n\n. . .\n\n::: {#fba51121 .cell output-location='fragment' execution_count=39}\n``` {.python .cell-code}\ndf['height'].std()\n```\n\n::: {.cell-output .cell-output-display execution_count=39}\n```\n0.13428824718989124\n```\n:::\n:::\n\n\n## Describe\n\n- [describe()](https://pandas.pydata.org/docs/reference/api/pandas.DataFrame.describe.html#pandas.DataFrame.describe) shows a quick statistic summary of your numerical data.\n\n\n. . .\n\n::: {#9e153ca6 .cell output-location='fragment' execution_count=40}\n``` {.python .cell-code}\ndf.describe()\n```\n\n::: {.cell-output .cell-output-display execution_count=40}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>height</th>\n      <th>weight</th>\n      <th>number</th>\n      <th>bmi</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>count</th>\n      <td>3.000000</td>\n      <td>3.000000</td>\n      <td>3.0</td>\n      <td>3.000000</td>\n    </tr>\n    <tr>\n      <th>mean</th>\n      <td>1.776667</td>\n      <td>74.133333</td>\n      <td>42.0</td>\n      <td>23.240000</td>\n    </tr>\n    <tr>\n      <th>std</th>\n      <td>0.134288</td>\n      <td>22.460929</td>\n      <td>0.0</td>\n      <td>5.704972</td>\n    </tr>\n    <tr>\n      <th>min</th>\n      <td>1.680000</td>\n      <td>48.400000</td>\n      <td>42.0</td>\n      <td>17.150000</td>\n    </tr>\n    <tr>\n      <th>25%</th>\n      <td>1.700000</td>\n      <td>66.300000</td>\n      <td>42.0</td>\n      <td>20.630000</td>\n    </tr>\n    <tr>\n      <th>50%</th>\n      <td>1.720000</td>\n      <td>84.200000</td>\n      <td>42.0</td>\n      <td>24.110000</td>\n    </tr>\n    <tr>\n      <th>75%</th>\n      <td>1.825000</td>\n      <td>87.000000</td>\n      <td>42.0</td>\n      <td>26.285000</td>\n    </tr>\n    <tr>\n      <th>max</th>\n      <td>1.930000</td>\n      <td>89.800000</td>\n      <td>42.0</td>\n      <td>28.460000</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n```\n:::\n:::\n\n\n## Describe\n\n::: {#36c6ade5 .cell output-location='fragment' execution_count=41}\n``` {.python .cell-code}\ndf.describe().T.round(2)\n```\n\n::: {.cell-output .cell-output-display execution_count=41}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>count</th>\n      <th>mean</th>\n      <th>std</th>\n      <th>min</th>\n      <th>25%</th>\n      <th>50%</th>\n      <th>75%</th>\n      <th>max</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>height</th>\n      <td>3.0</td>\n      <td>1.78</td>\n      <td>0.13</td>\n      <td>1.68</td>\n      <td>1.70</td>\n      <td>1.72</td>\n      <td>1.82</td>\n      <td>1.93</td>\n    </tr>\n    <tr>\n      <th>weight</th>\n      <td>3.0</td>\n      <td>74.13</td>\n      <td>22.46</td>\n      <td>48.40</td>\n      <td>66.30</td>\n      <td>84.20</td>\n      <td>87.00</td>\n      <td>89.80</td>\n    </tr>\n    <tr>\n      <th>number</th>\n      <td>3.0</td>\n      <td>42.00</td>\n      <td>0.00</td>\n      <td>42.00</td>\n      <td>42.00</td>\n      <td>42.00</td>\n      <td>42.00</td>\n      <td>42.00</td>\n    </tr>\n    <tr>\n      <th>bmi</th>\n      <td>3.0</td>\n      <td>23.24</td>\n      <td>5.70</td>\n      <td>17.15</td>\n      <td>20.63</td>\n      <td>24.11</td>\n      <td>26.28</td>\n      <td>28.46</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n```\n:::\n:::\n\n\n## Describe\n\n- Summary statistics for numeric variables `height` and `bmi` for different levels of the categorical variable `city`:\n\n. . .\n\n::: {#5f9fe195 .cell output-location='fragment' execution_count=42}\n``` {.python .cell-code}\ndf[['height', 'city']].groupby(['city']).describe().round(2).T\n```\n\n::: {.cell-output .cell-output-display execution_count=42}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>city</th>\n      <th>Berlin</th>\n      <th>Stuttgart</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th rowspan=\"8\" valign=\"top\">height</th>\n      <th>count</th>\n      <td>1.00</td>\n      <td>2.00</td>\n    </tr>\n    <tr>\n      <th>mean</th>\n      <td>1.72</td>\n      <td>1.80</td>\n    </tr>\n    <tr>\n      <th>std</th>\n      <td>NaN</td>\n      <td>0.18</td>\n    </tr>\n    <tr>\n      <th>min</th>\n      <td>1.72</td>\n      <td>1.68</td>\n    </tr>\n    <tr>\n      <th>25%</th>\n      <td>1.72</td>\n      <td>1.74</td>\n    </tr>\n    <tr>\n      <th>50%</th>\n      <td>1.72</td>\n      <td>1.80</td>\n    </tr>\n    <tr>\n      <th>75%</th>\n      <td>1.72</td>\n      <td>1.87</td>\n    </tr>\n    <tr>\n      <th>max</th>\n      <td>1.72</td>\n      <td>1.93</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n```\n:::\n:::\n\n\n## Categorical data\n\n- we can also use `describe()` for categorical data\n\n. . .\n\n::: {#a876159e .cell output-location='fragment' execution_count=43}\n``` {.python .cell-code}\ndf.describe(include=\"category\").T\n```\n\n::: {.cell-output .cell-output-display execution_count=43}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>count</th>\n      <th>unique</th>\n      <th>top</th>\n      <th>freq</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>name</th>\n      <td>3</td>\n      <td>3</td>\n      <td>Lisa</td>\n      <td>1</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n```\n:::\n:::\n\n\n## Categorical data\n\n\n- Show unique levels of a categorical variable and count with `value_counts()`\n\n. . .\n\n::: {#2a00ceeb .cell output-location='fragment' execution_count=44}\n``` {.python .cell-code}\ndf['city'].value_counts()\n```\n\n::: {.cell-output .cell-output-display execution_count=44}\n```\nStuttgart    2\nBerlin       1\nName: city, dtype: int64\n```\n:::\n:::\n\n\n## Categorical data\n\n\n- We also can extract specific values\n\n::: {#fe52e722 .cell output-location='fragment' execution_count=45}\n``` {.python .cell-code}\ndf['city'].value_counts().Stuttgart\n```\n\n::: {.cell-output .cell-output-display execution_count=45}\n```\n2\n```\n:::\n:::\n\n\n## Categorical data\n\n\n- Print the value in nice format ([using formatted string literals](https://docs.python.org/3.6/reference/lexical_analysis.html#formatted-string-literals) f\"...\") \n\n. . .\n\n::: {#f4ba65fa .cell output-location='fragment' execution_count=46}\n``` {.python .cell-code}\ncount_stuttgart = df['city'].value_counts().Stuttgart\n\nprint(f\"There are {count_stuttgart} people from Stuttgart in the data\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nThere are 2 people from Stuttgart in the data\n```\n:::\n:::\n\n\n## Loop over list\n\n- Example of for loop to obtain statistics for specific numerical columns\n\n. . .\n\n::: {#c36b59c9 .cell execution_count=47}\n``` {.python .cell-code}\n# make a list of numerical columns\nlist_num = ['height', 'weight']\n```\n:::\n\n\n. . .\n\n::: {#8d9d8c8b .cell output-location='fragment' execution_count=48}\n``` {.python .cell-code}\n# calculate median for our list and only show 4 digits, then make a new line (\\n)\nfor i in list_num:\n    print(f'Median of {i} equals {df[i].median():.4} \\n')\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nMedian of height equals 1.72 \n\nMedian of weight equals 84.2 \n\n```\n:::\n:::\n\n\n## Loop over list\n\n- Calculate summary statistics for our list.\n\n::: {#9e87bf9e .cell output-location='fragment' execution_count=49}\n``` {.python .cell-code}\nfor i in list_num:\n    print(f'Column: {i}  \\n  {df[i].describe().round(2)}   \\n')   \n```\n\n::: {.cell-output .cell-output-stdout}\n```\nColumn: height  \n  count    3.00\nmean     1.78\nstd      0.13\nmin      1.68\n25%      1.70\n50%      1.72\n75%      1.82\nmax      1.93\nName: height, dtype: float64   \n\nColumn: weight  \n  count     3.00\nmean     74.13\nstd      22.46\nmin      48.40\n25%      66.30\n50%      84.20\n75%      87.00\nmax      89.80\nName: weight, dtype: float64   \n\n```\n:::\n:::\n\n\n## Create plots\n\n::: {#ab6afc62 .cell execution_count=50}\n``` {.python .cell-code}\n# Pandas needs the module matplotlib to create plots\nimport matplotlib.pyplot as plt\n\n# show plot output in Jupyter Notebook\n%matplotlib inline\n```\n:::\n\n\n## Boxplot\n\n::: {#14111cdc .cell output-location='fragment' execution_count=51}\n``` {.python .cell-code}\ndf.boxplot(column=['weight']);\n```\n\n::: {.cell-output .cell-output-display}\n![](slides_files/figure-revealjs/cell-52-output-1.png){width=790 height=411}\n:::\n:::\n\n\n## Boxplots with for loop\n\n::: {#5131a7eb .cell output-location='fragment' execution_count=52}\n``` {.python .cell-code}\n# obtain plots for our list\nfor i in list_num:\n    df.boxplot(column=[i])\n    plt.title(\"Boxplot for \" + i)\n    plt.show()\n```\n\n::: {.cell-output .cell-output-display}\n![](slides_files/figure-revealjs/cell-53-output-1.png){width=802 height=431}\n:::\n\n::: {.cell-output .cell-output-display}\n![](slides_files/figure-revealjs/cell-53-output-2.png){width=790 height=431}\n:::\n:::\n\n\n# Selection with [], loc and iloc\n\n## Getting columns with [[]]\n\n- Selecting a single column with `[[]]`:\n\n- Select the column `city` and save it as a new Pandas dataframe `df_city`\n\n. . .\n\n::: {#7a0d3eb9 .cell execution_count=53}\n``` {.python .cell-code}\ndf_city = df[[\"city\"]]\n```\n:::\n\n\n. . .\n\n::: {#7c637933 .cell output-location='fragment' execution_count=54}\n``` {.python .cell-code}\ndf_city\n```\n\n::: {.cell-output .cell-output-display execution_count=54}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>city</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>Stuttgart</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>Stuttgart</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>Berlin</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n```\n:::\n:::\n\n\n## Selecting rows with []\n\n- Selecting via `[]` slices the rows (endpoint is not included) and includes all columns:\n\n::: {#8d7bf11c .cell output-location='fragment' execution_count=55}\n``` {.python .cell-code}\ndf[0:2]\n```\n\n::: {.cell-output .cell-output-display execution_count=55}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>name</th>\n      <th>height</th>\n      <th>weight</th>\n      <th>id</th>\n      <th>city</th>\n      <th>number</th>\n      <th>bmi</th>\n      <th>date</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>Tom</td>\n      <td>1.68</td>\n      <td>48.4</td>\n      <td>1</td>\n      <td>Stuttgart</td>\n      <td>42</td>\n      <td>17.15</td>\n      <td>2023-08-19</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>Lisa</td>\n      <td>1.93</td>\n      <td>89.8</td>\n      <td>2</td>\n      <td>Stuttgart</td>\n      <td>42</td>\n      <td>24.11</td>\n      <td>2023-08-19</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n```\n:::\n:::\n\n\n## Getting a cross section\n\n- The `.loc` (location) attribute is the primary access method. \n\n- For getting a cross section using a label (select row 0):\n\n. . .\n\n::: {#ff72d5a5 .cell output-location='fragment' execution_count=56}\n``` {.python .cell-code}\ndf.loc[[0]]\n```\n\n::: {.cell-output .cell-output-display execution_count=56}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>name</th>\n      <th>height</th>\n      <th>weight</th>\n      <th>id</th>\n      <th>city</th>\n      <th>number</th>\n      <th>bmi</th>\n      <th>date</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>Tom</td>\n      <td>1.68</td>\n      <td>48.4</td>\n      <td>1</td>\n      <td>Stuttgart</td>\n      <td>42</td>\n      <td>17.15</td>\n      <td>2023-08-19</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n```\n:::\n:::\n\n\n## Selecting on a multi-axis by label\n\n- Only select location at row 0 for column \"name\"\n\n. . .\n\n::: {#e1be5ddb .cell output-location='fragment' execution_count=57}\n``` {.python .cell-code}\ndf.loc[0 , 'name']\n```\n\n::: {.cell-output .cell-output-display execution_count=57}\n```\n'Tom'\n```\n:::\n:::\n\n\n## By label .loc\n\n- Select row 2 to 4 for column \"name\" (when using .loc endpoints are included)\n\n. . .\n\n::: {#f45c7ffc .cell output-location='fragment' execution_count=58}\n``` {.python .cell-code}\ndf.loc[2:4 , 'name']\n```\n\n::: {.cell-output .cell-output-display execution_count=58}\n```\n2    Peter\nName: name, dtype: category\nCategories (3, object): ['Lisa', 'Peter', 'Tom']\n```\n:::\n:::\n\n\n## By label .loc\n\n- Select row 2 to 4 for columns \"name\" and \"height\" (when using .loc endpoints are included)\n\n. . .\n\n::: {#f314c546 .cell output-location='fragment' execution_count=59}\n``` {.python .cell-code}\ndf.loc[2:4 , ['name', 'height']]\n```\n\n::: {.cell-output .cell-output-display execution_count=59}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>name</th>\n      <th>height</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>2</th>\n      <td>Peter</td>\n      <td>1.72</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n```\n:::\n:::\n\n\n## By label .loc\n\n- Select all rows for name and height\n\n. . .\n\n::: {#ccf4af6d .cell output-location='fragment' execution_count=60}\n``` {.python .cell-code}\ndf.loc[ : , [\"name\", \"height\"]]\n```\n\n::: {.cell-output .cell-output-display execution_count=60}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>name</th>\n      <th>height</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>Tom</td>\n      <td>1.68</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>Lisa</td>\n      <td>1.93</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>Peter</td>\n      <td>1.72</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n```\n:::\n:::\n\n\n## By label .loc\n\n- For getting a scalar value:\n\n::: {#b6f24df6 .cell execution_count=61}\n``` {.python .cell-code}\ndf.loc[[0], \"height\"]\n```\n\n::: {.cell-output .cell-output-display execution_count=61}\n```\n0    1.68\nName: height, dtype: float64\n```\n:::\n:::\n\n\n## By position .iloc {.smaller}\n\n- Pandas provides a suite of methods in order to get purely integer based indexing. \n\n- Here, the `.iloc` attribute is the primary access method. \n\n. . .\n\n::: {#b15ec447 .cell output-location='fragment' execution_count=62}\n``` {.python .cell-code}\ndf.iloc[0]\n```\n\n::: {.cell-output .cell-output-display execution_count=62}\n```\nname             Tom\nheight          1.68\nweight          48.4\nid                 1\ncity       Stuttgart\nnumber            42\nbmi            17.15\ndate      2023-08-19\nName: 0, dtype: object\n```\n:::\n:::\n\n\n## By integer slices\n\n- *When using `.iloc`, endpoints are not included.*\n\n. . .\n\n::: {#9c75b85f .cell output-location='fragment' execution_count=63}\n``` {.python .cell-code}\ndf.iloc[0:2, 0:2]\n```\n\n::: {.cell-output .cell-output-display execution_count=63}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>name</th>\n      <th>height</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>Tom</td>\n      <td>1.68</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>Lisa</td>\n      <td>1.93</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n```\n:::\n:::\n\n\n## By lists of integer position locations\n\n::: {#9f2d8076 .cell output-location='fragment' execution_count=64}\n``` {.python .cell-code}\ndf.iloc[[0, 2], [0, 1]]\n```\n\n::: {.cell-output .cell-output-display execution_count=64}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>name</th>\n      <th>height</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>Tom</td>\n      <td>1.68</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>Peter</td>\n      <td>1.72</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n```\n:::\n:::\n\n\n## For slicing rows explicitly\n\n::: {#51ea191f .cell output-location='fragment' execution_count=65}\n``` {.python .cell-code}\ndf.iloc[1:3, :]\n```\n\n::: {.cell-output .cell-output-display execution_count=65}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>name</th>\n      <th>height</th>\n      <th>weight</th>\n      <th>id</th>\n      <th>city</th>\n      <th>number</th>\n      <th>bmi</th>\n      <th>date</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>1</th>\n      <td>Lisa</td>\n      <td>1.93</td>\n      <td>89.8</td>\n      <td>2</td>\n      <td>Stuttgart</td>\n      <td>42</td>\n      <td>24.11</td>\n      <td>2023-08-19</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>Peter</td>\n      <td>1.72</td>\n      <td>84.2</td>\n      <td>3</td>\n      <td>Berlin</td>\n      <td>42</td>\n      <td>28.46</td>\n      <td>2023-08-19</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n```\n:::\n:::\n\n\n## For slicing columns explicitly\n\n::: {#e9dd47fd .cell output-location='fragment' execution_count=66}\n``` {.python .cell-code}\ndf.iloc[:, 1:3]\n```\n\n::: {.cell-output .cell-output-display execution_count=66}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>height</th>\n      <th>weight</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>1.68</td>\n      <td>48.4</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>1.93</td>\n      <td>89.8</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>1.72</td>\n      <td>84.2</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n```\n:::\n:::\n\n\n## For getting a value explicitly\n\n::: {#a643bff8 .cell execution_count=67}\n``` {.python .cell-code}\ndf.iloc[0, 0]\n```\n\n::: {.cell-output .cell-output-display execution_count=67}\n```\n'Tom'\n```\n:::\n:::\n\n\n# Filter \n\n\n## Filter \n\n- Using a single column’s values to filter data (boolean indexing).\n\n. . .\n\n::: {#5b8ebb66 .cell output-location='fragment' execution_count=68}\n``` {.python .cell-code}\ndf[df[\"height\"] >= 1.67]\n```\n\n::: {.cell-output .cell-output-display execution_count=68}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>name</th>\n      <th>height</th>\n      <th>weight</th>\n      <th>id</th>\n      <th>city</th>\n      <th>number</th>\n      <th>bmi</th>\n      <th>date</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>Tom</td>\n      <td>1.68</td>\n      <td>48.4</td>\n      <td>1</td>\n      <td>Stuttgart</td>\n      <td>42</td>\n      <td>17.15</td>\n      <td>2023-08-19</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>Lisa</td>\n      <td>1.93</td>\n      <td>89.8</td>\n      <td>2</td>\n      <td>Stuttgart</td>\n      <td>42</td>\n      <td>24.11</td>\n      <td>2023-08-19</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>Peter</td>\n      <td>1.72</td>\n      <td>84.2</td>\n      <td>3</td>\n      <td>Berlin</td>\n      <td>42</td>\n      <td>28.46</td>\n      <td>2023-08-19</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n```\n:::\n:::\n\n\n## Filter on multiple conditions\n\n\n- Combine filtering for two columns or more with `&` (and)\n\n. . .\n\n::: {#9c57effb .cell execution_count=69}\n``` {.python .cell-code}\ndf[(df[\"height\"] >= 1.67) & (df[\"weight\"] < 74)]\n```\n\n::: {.cell-output .cell-output-display execution_count=69}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>name</th>\n      <th>height</th>\n      <th>weight</th>\n      <th>id</th>\n      <th>city</th>\n      <th>number</th>\n      <th>bmi</th>\n      <th>date</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>Tom</td>\n      <td>1.68</td>\n      <td>48.4</td>\n      <td>1</td>\n      <td>Stuttgart</td>\n      <td>42</td>\n      <td>17.15</td>\n      <td>2023-08-19</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n```\n:::\n:::\n\n\n## Filter on multiple conditions\n\n\n- You can also combine filtering for two columns or more with `|` (or)\n\n. . .\n\n::: {#bef49c53 .cell output-location='fragment' execution_count=70}\n``` {.python .cell-code}\ndf[(df[\"height\"] >= 167) | (df[\"weight\"] < 74)]\n```\n\n::: {.cell-output .cell-output-display execution_count=70}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>name</th>\n      <th>height</th>\n      <th>weight</th>\n      <th>id</th>\n      <th>city</th>\n      <th>number</th>\n      <th>bmi</th>\n      <th>date</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>Tom</td>\n      <td>1.68</td>\n      <td>48.4</td>\n      <td>1</td>\n      <td>Stuttgart</td>\n      <td>42</td>\n      <td>17.15</td>\n      <td>2023-08-19</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n```\n:::\n:::\n\n\n## isin()\n\n- Always use the [isin()](https://pandas.pydata.org/docs/reference/api/pandas.Series.isin.html#pandas.Series.isin) method if you have multiple conditions within one column:\n\n. . .\n\n::: {#b66a8584 .cell output-location='fragment' execution_count=71}\n``` {.python .cell-code}\ndf[df[\"name\"].isin([\"Tom\", \"Steven\"])]\n```\n\n::: {.cell-output .cell-output-display execution_count=71}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>name</th>\n      <th>height</th>\n      <th>weight</th>\n      <th>id</th>\n      <th>city</th>\n      <th>number</th>\n      <th>bmi</th>\n      <th>date</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>Tom</td>\n      <td>1.68</td>\n      <td>48.4</td>\n      <td>1</td>\n      <td>Stuttgart</td>\n      <td>42</td>\n      <td>17.15</td>\n      <td>2023-08-19</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n```\n:::\n:::\n\n\n# Grouping\n\n## Grouping\n\n- By “group by” we are referring to a process involving one or more of the following steps:\n\n- **Splitting** the data into groups based on some criteria\n\n- **Applying** a function to each group independently\n\n- **Combining** the results into a data structure\n\n## Grouping\n\n- Grouping and then applying the `mean()` function to the resulting groups. Furthermore, we round the results and transpose the data.\n\n. . .\n\n::: {#21032742 .cell output-location='fragment' execution_count=72}\n``` {.python .cell-code}\ndf.groupby(\"city\").mean(numeric_only=True).round(2).T\n```\n\n::: {.cell-output .cell-output-display execution_count=72}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th>city</th>\n      <th>Berlin</th>\n      <th>Stuttgart</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>height</th>\n      <td>1.72</td>\n      <td>1.80</td>\n    </tr>\n    <tr>\n      <th>weight</th>\n      <td>84.20</td>\n      <td>69.10</td>\n    </tr>\n    <tr>\n      <th>number</th>\n      <td>42.00</td>\n      <td>42.00</td>\n    </tr>\n    <tr>\n      <th>bmi</th>\n      <td>28.46</td>\n      <td>20.63</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n```\n:::\n:::\n\n\n# Segment data into bins\n\n## Segment data into bins\n\n- Use the function [cut](https://pandas.pydata.org/docs/reference/api/pandas.cut.html) when you need to segment and sort data values into bins. \n\n- This function is also useful for going from a continuous variable to a categorical variable. \n\n## Segment data into bins {.smaller}\n\nThe standard weight status categories associated with BMI ranges for adults are shown in the following table:\n\nBMI\t| Weight Status\n---| ---\nBelow 18.5 |\tUnderweight\n18.5 - 24.9 |\tNormal or Healthy Weight\n25.0 - 29.9 |\tOverweight\n30.0 and Above |\tObese\n\nSource: [U.S. Department of Health & Human Services](https://www.cdc.gov/healthyweight/assessing/bmi/adult_bmi/index.html)\n\n\n## Segment data into bins {.smaller}\n\n\n- In our function, we discretize the variable `bmi` into four bins according to the table above:\n\n- The bins [0, 18.5, 25, 30, float('inf')] indicate (0,18.5], (18.5,25], (25,30], (30, float('inf))\n\n- `float('inf')` is used for setting  variable with an infinitely large value\n\n. . .\n\n::: {#fdcf54f3 .cell execution_count=73}\n``` {.python .cell-code}\ndf['bmi_category'] = pd.cut(df['bmi'],\n                            bins=[0, 18.5, 25, 30, float('inf')],\n                            labels=['underweight', 'normal', 'overweight', \"obese\"])\n```\n:::\n\n\n## Segment data into bins\n\n::: {#a80c394e .cell execution_count=74}\n``` {.python .cell-code}\ndf\n```\n\n::: {.cell-output .cell-output-display execution_count=74}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>name</th>\n      <th>height</th>\n      <th>weight</th>\n      <th>id</th>\n      <th>city</th>\n      <th>number</th>\n      <th>bmi</th>\n      <th>date</th>\n      <th>bmi_category</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>Tom</td>\n      <td>1.68</td>\n      <td>48.4</td>\n      <td>1</td>\n      <td>Stuttgart</td>\n      <td>42</td>\n      <td>17.15</td>\n      <td>2023-08-19</td>\n      <td>underweight</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>Lisa</td>\n      <td>1.93</td>\n      <td>89.8</td>\n      <td>2</td>\n      <td>Stuttgart</td>\n      <td>42</td>\n      <td>24.11</td>\n      <td>2023-08-19</td>\n      <td>normal</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>Peter</td>\n      <td>1.72</td>\n      <td>84.2</td>\n      <td>3</td>\n      <td>Berlin</td>\n      <td>42</td>\n      <td>28.46</td>\n      <td>2023-08-19</td>\n      <td>overweight</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n```\n:::\n:::\n\n\n## Segment data into bins\n\n::: {#9ce10d3a .cell execution_count=75}\n``` {.python .cell-code}\ndf['bmi_category']\n```\n\n::: {.cell-output .cell-output-display execution_count=75}\n```\n0    underweight\n1         normal\n2     overweight\nName: bmi_category, dtype: category\nCategories (4, object): ['underweight' < 'normal' < 'overweight' < 'obese']\n```\n:::\n:::\n\n\n## Segment data into bins\n\n\n- Example of how to discretize into four equal-sized bins:\n\n. . .\n\n::: {#4ae1a213 .cell execution_count=76}\n``` {.python .cell-code}\ndf['bmi_category_2'] = pd.cut(df['bmi'],\n                              bins=4,\n                              labels=['group1', 'group2', 'group3', \"group4\"])\n```\n:::\n\n\n. . .\n\n::: {#b521ec42 .cell execution_count=77}\n``` {.python .cell-code}\ndf['bmi_category_2']\n```\n\n::: {.cell-output .cell-output-display execution_count=77}\n```\n0    group1\n1    group3\n2    group4\nName: bmi_category_2, dtype: category\nCategories (4, object): ['group1' < 'group2' < 'group3' < 'group4']\n```\n:::\n:::\n\n\n## Segment data into bins \n\n\nExample of how to discretize into four equal-sized bins if you don't need labels\n\n::: {#2699b9a1 .cell execution_count=78}\n``` {.python .cell-code}\ndf['bmi_category_3'] = pd.cut(df['bmi'],\n                              bins=4,\n                              labels=False)\n```\n:::\n\n\n. . .\n\n::: {#53874b0d .cell execution_count=79}\n``` {.python .cell-code}\ndf['bmi_category_3']\n```\n\n::: {.cell-output .cell-output-display execution_count=79}\n```\n0    0\n1    2\n2    3\nName: bmi_category_3, dtype: int64\n```\n:::\n:::\n\n\n",
    "supporting": [
      "slides_files/figure-revealjs"
    ],
    "filters": [],
    "includes": {
      "include-in-header": [
        "<script src=\"https://cdnjs.cloudflare.com/ajax/libs/require.js/2.3.6/require.min.js\" integrity=\"sha512-c3Nl8+7g4LMSTdrm621y7kf9v3SDPnhxLNhcjFJbKECVnmZHTdo+IRO05sNLTH/D3vA6u1X32ehoLC7WFVdheg==\" crossorigin=\"anonymous\"></script>\n<script src=\"https://cdnjs.cloudflare.com/ajax/libs/jquery/3.5.1/jquery.min.js\" integrity=\"sha512-bLT0Qm9VnAYZDflyKcBaQ2gg0hSYNQrJ8RilYldYQ1FxQYoCLtUjuuRuZo+fjqhx/qtq/1itJ0C2ejDxltZVFg==\" crossorigin=\"anonymous\"></script>\n<script type=\"application/javascript\">define('jquery', [],function() {return window.jQuery;})</script>\n"
      ]
    }
  }
}