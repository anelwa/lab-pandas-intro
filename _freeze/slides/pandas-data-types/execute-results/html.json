{
  "hash": "22f6200c1c536bde5bba9087a6faf98f",
  "result": {
    "markdown": "---\ntitle: Data Types and Adding Columns\nlang: en\nsubtitle: Pandas Introduction\nauthor: Jan Kirenz\nexecute:\n  eval: true\n  echo: true\nhighlight-style: github\nformat:\n  revealjs: \n    toc: true\n    toc-depth: 1\n    embed-resources: false\n    theme: [dark, ../custom.scss]  \n    incremental: true\n    transition: slide\n    background-transition: fade\n    transition-speed: slow\n    code-copy: true\n    code-line-numbers: true\n    smaller: false\n    scrollable: true\n    slide-number: c\n    preview-links: auto\n    chalkboard: \n      buttons: false\n   #logo: images/logo.png\n    footer: Jan Kirenz\n---\n\n# Setup\n\n::: {#830ddc50 .cell execution_count=1}\n``` {.python .cell-code}\nfrom datetime import datetime\nimport pandas as pd\n\ndf = pd.DataFrame({\n    'name': [\"Tom\", \"Lisa\", \"Peter\"],\n    'height': [1.68, 1.93, 1.72],\n    'weight': [48.4, 89.8, 84.2],\n    'id': [1, 2, 3],\n    'city': ['Stuttgart', 'Stuttgart', 'Berlin']\n})\n```\n:::\n\n\n# Basics\n\n## Data Types\n\n::: {#c835c96d .cell output-location='fragment' execution_count=2}\n``` {.python .cell-code}\ndf.dtypes\n```\n\n::: {.cell-output .cell-output-display execution_count=2}\n```\nname       object\nheight    float64\nweight    float64\nid          int64\ncity       object\ndtype: object\n```\n:::\n:::\n\n\n## Data Types\n\n::: {#910b0c5f .cell output-location='fragment' execution_count=3}\n``` {.python .cell-code}\ndf.info()\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n<class 'pandas.core.frame.DataFrame'>\nRangeIndex: 3 entries, 0 to 2\nData columns (total 5 columns):\n #   Column  Non-Null Count  Dtype  \n---  ------  --------------  -----  \n 0   name    3 non-null      object \n 1   height  3 non-null      float64\n 2   weight  3 non-null      float64\n 3   id      3 non-null      int64  \n 4   city    3 non-null      object \ndtypes: float64(2), int64(1), object(2)\nmemory usage: 252.0+ bytes\n```\n:::\n:::\n\n\n# Change Data Types\n\n## Change Data Types\n\n\n- There are several methods to [change data types in pandas](https://pandas.pydata.org/docs/reference/api/pandas.DataFrame.astype.html):\n\n- The most common method to change the data type is:\n\n- `.astype()`: Convert to a specific type (like \"`int32`\", \"`float`\" or \"`catgeory`\")\n\n- `.astype(str)`: Convert to string  \n  \n\n## Change data type\n\nMore options:  \n  \n- `to_datetime`: Convert argument to datetime.\n- `to_timedelta`: Convert argument to timedelta.\n- `to_numeric`: Convert argument to a numeric type.\n\n\n# Categorical data and Strings\n\n## Categorical data\n\n\n- Categoricals are a pandas data type corresponding to categorical variables in statistics. \n\n\n- A categorical variable takes on a limited, and usually fixed, number of possible values (categories). \n\n- Examples are gender, social class, blood type, country affiliation, observation time or rating via Likert scales.\n\n## Categorical data\n\n\n- Convert variable \"name\" to a category dtype:\n\n. . .\n\n::: {#c60ef456 .cell execution_count=4}\n``` {.python .cell-code}\ndf[\"name\"] = df[\"name\"].astype(\"category\")\n```\n:::\n\n\n## Change data type\n\n::: {#13b89a46 .cell output-location='fragment' execution_count=5}\n``` {.python .cell-code}\ndf.info()\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n<class 'pandas.core.frame.DataFrame'>\nRangeIndex: 3 entries, 0 to 2\nData columns (total 5 columns):\n #   Column  Non-Null Count  Dtype   \n---  ------  --------------  -----   \n 0   name    3 non-null      category\n 1   height  3 non-null      float64 \n 2   weight  3 non-null      float64 \n 3   id      3 non-null      int64   \n 4   city    3 non-null      object  \ndtypes: category(1), float64(2), int64(1), object(1)\nmemory usage: 363.0+ bytes\n```\n:::\n:::\n\n\n## String data\n\n- In our example, `id` is not a number (we can't perform calculations with it)\n\n- It is just a unique identifier so we should transform it to a simple string (object)\n\n. . .\n\n::: {#cdc62c8f .cell execution_count=6}\n``` {.python .cell-code}\ndf['id'] = df['id'].astype(str)\n```\n:::\n\n\n## Change data type\n\n::: {#5c7b9c30 .cell output-location='fragment' execution_count=7}\n``` {.python .cell-code}\ndf.info()\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n<class 'pandas.core.frame.DataFrame'>\nRangeIndex: 3 entries, 0 to 2\nData columns (total 5 columns):\n #   Column  Non-Null Count  Dtype   \n---  ------  --------------  -----   \n 0   name    3 non-null      category\n 1   height  3 non-null      float64 \n 2   weight  3 non-null      float64 \n 3   id      3 non-null      object  \n 4   city    3 non-null      object  \ndtypes: category(1), float64(2), object(2)\nmemory usage: 363.0+ bytes\n```\n:::\n:::\n\n\n# Add new columns\n\n## Constant\n\n- Add a new variable called \"number\" to df \n\n- The new variable should have the number 42 in all rows\n\n. . .\n\n::: {#38937369 .cell execution_count=8}\n``` {.python .cell-code}\ndf[\"number\"] = 42\n```\n:::\n\n\n. . .\n\n::: {#2396a9eb .cell output-location='fragment' execution_count=9}\n``` {.python .cell-code}\ndf.head()\n```\n\n::: {.cell-output .cell-output-display execution_count=9}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>name</th>\n      <th>height</th>\n      <th>weight</th>\n      <th>id</th>\n      <th>city</th>\n      <th>number</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>Tom</td>\n      <td>1.68</td>\n      <td>48.4</td>\n      <td>1</td>\n      <td>Stuttgart</td>\n      <td>42</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>Lisa</td>\n      <td>1.93</td>\n      <td>89.8</td>\n      <td>2</td>\n      <td>Stuttgart</td>\n      <td>42</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>Peter</td>\n      <td>1.72</td>\n      <td>84.2</td>\n      <td>3</td>\n      <td>Berlin</td>\n      <td>42</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n```\n:::\n:::\n\n\n## From existing columns\n\n - Create new columns from existing columns\n\n. . .\n\n::: {#6359fd00 .cell execution_count=10}\n``` {.python .cell-code}\n# calculate body mass index\ndf['bmi'] = round(df['weight'] / (df['height'] * df['height']), 2)\n```\n:::\n\n\n. . .\n\n::: {#ec01719c .cell output-location='fragment' execution_count=11}\n``` {.python .cell-code}\ndf\n```\n\n::: {.cell-output .cell-output-display execution_count=11}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>name</th>\n      <th>height</th>\n      <th>weight</th>\n      <th>id</th>\n      <th>city</th>\n      <th>number</th>\n      <th>bmi</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>Tom</td>\n      <td>1.68</td>\n      <td>48.4</td>\n      <td>1</td>\n      <td>Stuttgart</td>\n      <td>42</td>\n      <td>17.15</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>Lisa</td>\n      <td>1.93</td>\n      <td>89.8</td>\n      <td>2</td>\n      <td>Stuttgart</td>\n      <td>42</td>\n      <td>24.11</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>Peter</td>\n      <td>1.72</td>\n      <td>84.2</td>\n      <td>3</td>\n      <td>Berlin</td>\n      <td>42</td>\n      <td>28.46</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n```\n:::\n:::\n\n\n# Dates\n\n- To add a date, we can use datetime and [strftime](https://strftime.org) (see code examples on the next slides):\n\n. . .\n\n::: {#13275d90 .cell execution_count=12}\n``` {.python .cell-code}\ndf[\"date\"] = datetime.today().strftime('%Y-%m-%d')\n```\n:::\n\n\n. . .\n\n::: {#3f2aeb49 .cell output-location='fragment' execution_count=13}\n``` {.python .cell-code}\ndf.head(3)\n```\n\n::: {.cell-output .cell-output-display execution_count=13}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>name</th>\n      <th>height</th>\n      <th>weight</th>\n      <th>id</th>\n      <th>city</th>\n      <th>number</th>\n      <th>bmi</th>\n      <th>date</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>Tom</td>\n      <td>1.68</td>\n      <td>48.4</td>\n      <td>1</td>\n      <td>Stuttgart</td>\n      <td>42</td>\n      <td>17.15</td>\n      <td>2023-08-19</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>Lisa</td>\n      <td>1.93</td>\n      <td>89.8</td>\n      <td>2</td>\n      <td>Stuttgart</td>\n      <td>42</td>\n      <td>24.11</td>\n      <td>2023-08-19</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>Peter</td>\n      <td>1.72</td>\n      <td>84.2</td>\n      <td>3</td>\n      <td>Berlin</td>\n      <td>42</td>\n      <td>28.46</td>\n      <td>2023-08-19</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n```\n:::\n:::\n\n\n## Dates {.smaller}\n\n| Code | Example                 | Description                                                                                                                                                                      |\n| ---- | ----------------------- | -------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- |\n| %a   | Sun                     | Weekday as locale’s abbreviated name.                                                                                                                                            |\n| %A   | Sunday                  | Weekday as locale’s full name.                                                                                                                                                   |\n| %w   | 0                       | Weekday as a decimal number, where 0 is Sunday and 6 is Saturday.                                                                                                                |\n| %d   | 8                       | Day of the month as a zero-padded decimal number.                                                                                                                                |\n| %-d  | 8                       | Day of the month as a decimal number. (Platform specific)                                                                                                                        |\n\n\n\n\n## Dates {.smaller}\n\n| Code | Example                 | Description                                                                                                                                                                      |\n| ---- | ----------------------- | -------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- |\n\n| %b   | Sep                     | Month as locale’s abbreviated name.                                                                                                                                              |\n| %B   | September               | Month as locale’s full name.                                                                                                                                                     |\n| %m   | 9                       | Month as a zero-padded decimal number.                                                                                                                                           |\n| %-m  | 9                       | Month as a decimal number. (Platform specific)                                                                                                                                   |\n\n\n\n## Dates {.smaller}\n\n| Code | Example                 | Description                                                                                                                                                                      |\n| ---- | ----------------------- | -------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- |\n\n\n| %y   | 13                      | Year without century as a zero-padded decimal number.                                                                                                                            |\n| %Y   | 2013                    | Year with century as a decimal number.                                                                                                                                           |\n| %H   | 7                       | Hour (24-hour clock) as a zero-padded decimal number.                                                                                                                            |\n| %-H  | 7                       | Hour (24-hour clock) as a decimal number. (Platform specific)                                                                                                                    |\n| %I   | 7                       | Hour (12-hour clock) as a zero-padded decimal number.                                                                                                                            |\n| %-I  | 7                       | Hour (12-hour clock) as a decimal number. (Platform specific)                                                                                                                    |\n\n\n\n\n## Dates {.smaller}\n\n| Code | Example                 | Description                                                                                                                                                                      |\n| ---- | ----------------------- | -------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- |\n\n\n| %p   | AM                      | Locale’s equivalent of either AM or PM.                                                                                                                                          |\n| %M   | 6                       | Minute as a zero-padded decimal number.                                                                                                                                          |\n| %-M  | 6                       | Minute as a decimal number. (Platform specific)                                                                                                                                  |\n| %S   | 5                       | Second as a zero-padded decimal number.                                                                                                                                          |\n| %-S  | 5                       | Second as a decimal number. (Platform specific)                                                                                                                                  |\n| %f   | 0                       | Microsecond as a decimal number, zero-padded on the left.                                                                                                                        |\n| %z   | 0                       | UTC offset in the form ±HHMM\\[SS\\[.ffffff\\]\\] (empty string if the object is naive).                                                                                             |\n| %Z   | UTC                     | Time zone name (empty string if the object is naive).                                                                                                                            |\n| %j   | 251                     | Day of the year as a zero-padded decimal number.                                                                                                                                 |\n| %-j  | 251                     | Day of the year as a decimal number. (Platform specific)                                                                                                                         |\n| %U   | 36                      | Week number of the year (Sunday as the first day of the week) as a zero padded decimal number. All days in a new year preceding the first Sunday are considered to be in week 0. |\n| %W   | 35                      | Week number of the year (Monday as the first day of the week) as a decimal number. All days in a new year preceding the first Monday are considered to be in week 0.             |\n| %c   | Sun Sep 8 07:06:05 2013 | Locale’s appropriate date and time representation.                                                                                                                               |\n| %x   | 09.08.13                | Locale’s appropriate date representation.                                                                                                                                        |\n| %X   | 07:06:05                | Locale’s appropriate time representation.                                                                                                                                        |\n| %%   | %                       | A literal '%' character.                                                                                                                                                         |\n\n",
    "supporting": [
      "pandas-data-types_files/figure-revealjs"
    ],
    "filters": [],
    "includes": {
      "include-in-header": [
        "<script src=\"https://cdnjs.cloudflare.com/ajax/libs/require.js/2.3.6/require.min.js\" integrity=\"sha512-c3Nl8+7g4LMSTdrm621y7kf9v3SDPnhxLNhcjFJbKECVnmZHTdo+IRO05sNLTH/D3vA6u1X32ehoLC7WFVdheg==\" crossorigin=\"anonymous\"></script>\n<script src=\"https://cdnjs.cloudflare.com/ajax/libs/jquery/3.5.1/jquery.min.js\" integrity=\"sha512-bLT0Qm9VnAYZDflyKcBaQ2gg0hSYNQrJ8RilYldYQ1FxQYoCLtUjuuRuZo+fjqhx/qtq/1itJ0C2ejDxltZVFg==\" crossorigin=\"anonymous\"></script>\n<script type=\"application/javascript\">define('jquery', [],function() {return window.jQuery;})</script>\n"
      ]
    }
  }
}