{
  "hash": "5e784b15b05bcf9716a0084bbbd2b8f4",
  "result": {
    "markdown": "---\ntitle: Change Column Names\nlang: en\nsubtitle: Pandas Introduction\nauthor: Jan Kirenz\nexecute:\n  eval: true\n  echo: true\nhighlight-style: github\nformat:\n  revealjs: \n    toc: true\n    toc-depth: 1\n    embed-resources: false\n    theme: [dark, ../custom.scss]  \n    incremental: true\n    transition: slide\n    background-transition: fade\n    transition-speed: slow\n    code-copy: true\n    code-line-numbers: true\n    smaller: false\n    scrollable: true\n    slide-number: c\n    preview-links: auto\n    chalkboard: \n      buttons: false\n   #logo: images/logo.png\n    footer: Jan Kirenz\n---\n\n# Setup\n\n::: {#5322ef5d .cell execution_count=1}\n``` {.python .cell-code}\nimport pandas as pd\n\ndf = pd.DataFrame({\n    'name': [\"Tom\", \"Lisa\", \"Peter\"],\n    'height': [1.68, 1.93, 1.72],\n    'weight': [48.4, 89.8, 84.2],\n    'id': [1, 2, 3],\n    'city': ['Stuttgart', 'Stuttgart', 'Berlin']\n})\n```\n:::\n\n\n# Basics\n\n## Column names properties\n\nUsually, we prefer to work with columns that have the following proporties:\n\n\n- no leading or trailing whitespace (`\"name\"` instead of `\" name \"`, `\" name\"` or `\"name \"`)\n\n\n- all lowercase (`\"name\"` instead of `\"Name\"`)\n\n\n- no white spaces (`\"my_name\"` instead of `\"my name\"`)\n\n# Simple rename\n\n- First, we rename columns by simply using a mapping\n- We rename `\"name\"` to `\" MY NEW-NAME\"` (note that we include a leading whitespace)\n\n. . .\n\n::: {#e46ce3bc .cell execution_count=2}\n``` {.python .cell-code}\ndf = df.rename(columns={\"name\": \" MY NEW-NAME\"}, errors=\"raise\")\n```\n:::\n\n\n## Simple rename\n\n::: {#796ed0d1 .cell output-location='fragment' execution_count=3}\n``` {.python .cell-code}\ndf.head()\n```\n\n::: {.cell-output .cell-output-display execution_count=3}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>MY NEW-NAME</th>\n      <th>height</th>\n      <th>weight</th>\n      <th>id</th>\n      <th>city</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>Tom</td>\n      <td>1.68</td>\n      <td>48.4</td>\n      <td>1</td>\n      <td>Stuttgart</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>Lisa</td>\n      <td>1.93</td>\n      <td>89.8</td>\n      <td>2</td>\n      <td>Stuttgart</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>Peter</td>\n      <td>1.72</td>\n      <td>84.2</td>\n      <td>3</td>\n      <td>Berlin</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n```\n:::\n:::\n\n\n. . .\n\n::: {#6a372975 .cell output-location='fragment' execution_count=4}\n``` {.python .cell-code}\ndf.columns\n```\n\n::: {.cell-output .cell-output-display execution_count=4}\n```\nIndex([' MY NEW-NAME', 'height', 'weight', 'id', 'city'], dtype='object')\n```\n:::\n:::\n\n\n# Regular expressions\n\n## Trailing and leading spaces (with regex)\n\n- We use regular expressions to deal with whitespaces\n\n- To change multiple column names in `df` at once, we use the method `df.columns = df.columns.str.replace()` \n\n- To replace the spaces, we use `.replace()` with `regex=True`\n\n\n## Regular expressions table\n\nExplanation for *regex* (see also [Stackoverflow](https://stackoverflow.com/a/67466222)):\n\n- we start with `r` (for raw) which tells Python to treat all following input as raw text (without interpreting it)\n- \"`^`\": is line start\n- \" \": is a white space\n- \"`+`\": some following characters\n- \"`|`\": is or\n- \"`$`\": is line end\n- \"\": is an empty string \n\n## Learn more about regular expressions\n\nTo learn more about regular expressions (\"regex\"), visit the following sites:\n\n- [regular expression basics](https://www.w3schools.com/python/python_regex.asp).\n- [interactive regular expressions tool](https://regex101.com/)\n\n## Trailing and leading spaces (with regex)\n\n- In the following function, we search for leading spaces and replace them with an empty string:\n\n. . .\n\n::: {#e586944c .cell output-location='fragment' execution_count=5}\n``` {.python .cell-code}\ndf.columns = df.columns.str.replace(r\"^ \", r\"\", regex=True)\n```\n:::\n\n\n. . .\n\n::: {#ad5cb01a .cell output-location='fragment' execution_count=6}\n``` {.python .cell-code}\ndf.columns\n```\n\n::: {.cell-output .cell-output-display execution_count=6}\n```\nIndex(['MY NEW-NAME', 'height', 'weight', 'id', 'city'], dtype='object')\n```\n:::\n:::\n\n\n# Replace special characters with REGEX\n\n## Replace special characters\n\n\n- Again, we use regular expressions to deal with special characters (like `-`, `%`, `&`, `$` etc.)\n\n- Replace \"`-`\" with \"`_`\"\n\n. . .\n\n::: {#d72eb806 .cell output-location='fragment' execution_count=7}\n``` {.python .cell-code}\ndf.columns = df.columns.str.replace(r\"-\", r\"_\", regex=True)\n```\n:::\n\n\n. . .\n\n::: {#63e18304 .cell output-location='fragment' execution_count=8}\n``` {.python .cell-code}\ndf.columns\n```\n\n::: {.cell-output .cell-output-display execution_count=8}\n```\nIndex(['MY NEW_NAME', 'height', 'weight', 'id', 'city'], dtype='object')\n```\n:::\n:::\n\n\n# Lowercase and whitespace\n\n## Lowercase and whitespace\n\n\n- We can use two simple methods to convert all columns to lowercase and replace white spaces with underscores (\"_\"):\n\n- `.str.lower()`\n\n\n- `.str.replace(' ', '_')`\n\n. . .\n\n::: {#58cb590b .cell output-location='fragment' execution_count=9}\n``` {.python .cell-code}\ndf.columns = df.columns.str.lower().str.replace(' ', '_')\n```\n:::\n\n\n. . .\n\n::: {#66446d59 .cell output-location='fragment' execution_count=10}\n``` {.python .cell-code}\ndf.columns\n```\n\n::: {.cell-output .cell-output-display execution_count=10}\n```\nIndex(['my_new_name', 'height', 'weight', 'id', 'city'], dtype='object')\n```\n:::\n:::\n\n\n",
    "supporting": [
      "pandas-column-names_files/figure-revealjs"
    ],
    "filters": [],
    "includes": {
      "include-in-header": [
        "<script src=\"https://cdnjs.cloudflare.com/ajax/libs/require.js/2.3.6/require.min.js\" integrity=\"sha512-c3Nl8+7g4LMSTdrm621y7kf9v3SDPnhxLNhcjFJbKECVnmZHTdo+IRO05sNLTH/D3vA6u1X32ehoLC7WFVdheg==\" crossorigin=\"anonymous\"></script>\n<script src=\"https://cdnjs.cloudflare.com/ajax/libs/jquery/3.5.1/jquery.min.js\" integrity=\"sha512-bLT0Qm9VnAYZDflyKcBaQ2gg0hSYNQrJ8RilYldYQ1FxQYoCLtUjuuRuZo+fjqhx/qtq/1itJ0C2ejDxltZVFg==\" crossorigin=\"anonymous\"></script>\n<script type=\"application/javascript\">define('jquery', [],function() {return window.jQuery;})</script>\n"
      ]
    }
  }
}