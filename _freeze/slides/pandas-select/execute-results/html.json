{
  "hash": "c8aed542a3e773c551e2fb8463a08426",
  "result": {
    "markdown": "---\ntitle: Selection\nlang: en\nsubtitle: Pandas Introduction\nauthor: Jan Kirenz\nexecute:\n  eval: true\n  echo: true\nhighlight-style: github\nformat:\n  revealjs: \n    toc: true\n    toc-depth: 1\n    embed-resources: false\n    theme: [dark, ../custom.scss]  \n    incremental: true\n    transition: slide\n    background-transition: fade\n    transition-speed: slow\n    code-copy: true\n    code-line-numbers: true\n    smaller: false\n    scrollable: true\n    slide-number: c\n    preview-links: auto\n    chalkboard: \n      buttons: false\n   #logo: images/logo.png\n    footer: Jan Kirenz\n---\n\n# Setup\n\n::: {#dee46899 .cell execution_count=1}\n``` {.python .cell-code}\nimport pandas as pd\n\ndf = pd.DataFrame({\n    'name': [\"Tom\", \"Lisa\", \"Peter\"],\n    'height': [1.68, 1.93, 1.72],\n    'weight': [48.4, 89.8, 84.2],\n    'id': [1, 2, 3],\n    'city': ['Stuttgart', 'Stuttgart', 'Berlin']\n})\n\ndf['bmi'] = round(df['weight'] / (df['height'] * df['height']), 2)\ndf[\"name\"] = df[\"name\"].astype(\"category\")\ndf['id'] = df['id'].astype(str)\n```\n:::\n\n\n# Select with []\n\n## Getting columns with [[]]\n\n- Selecting a single column with `[[]]`:\n\n- Select the column `city` and save it as a new Pandas dataframe `df_city`\n\n. . .\n\n::: {#c567a8cc .cell execution_count=2}\n``` {.python .cell-code}\ndf_city = df[[\"city\"]]\n```\n:::\n\n\n. . .\n\n::: {#4fd24020 .cell output-location='fragment' execution_count=3}\n``` {.python .cell-code}\ndf_city\n```\n\n::: {.cell-output .cell-output-display execution_count=3}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>city</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>Stuttgart</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>Stuttgart</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>Berlin</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n```\n:::\n:::\n\n\n## Selecting rows with []\n\n\n- Selecting via `[]` slices the rows (endpoint is not included) and includes all columns:\n\n::: {#8134bfb1 .cell output-location='fragment' execution_count=4}\n``` {.python .cell-code}\ndf[0:2]\n```\n\n::: {.cell-output .cell-output-display execution_count=4}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>name</th>\n      <th>height</th>\n      <th>weight</th>\n      <th>id</th>\n      <th>city</th>\n      <th>bmi</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>Tom</td>\n      <td>1.68</td>\n      <td>48.4</td>\n      <td>1</td>\n      <td>Stuttgart</td>\n      <td>17.15</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>Lisa</td>\n      <td>1.93</td>\n      <td>89.8</td>\n      <td>2</td>\n      <td>Stuttgart</td>\n      <td>24.11</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n```\n:::\n:::\n\n\n# Getting data with loc\n\n\nThe `.loc` (location) attribute is the primary access method. \n\n\n## Only the first row\n\n::: {#e66020e0 .cell output-location='fragment' execution_count=5}\n``` {.python .cell-code}\ndf.loc[[0]]\n```\n\n::: {.cell-output .cell-output-display execution_count=5}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>name</th>\n      <th>height</th>\n      <th>weight</th>\n      <th>id</th>\n      <th>city</th>\n      <th>bmi</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>Tom</td>\n      <td>1.68</td>\n      <td>48.4</td>\n      <td>1</td>\n      <td>Stuttgart</td>\n      <td>17.15</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n```\n:::\n:::\n\n\n## One row and one column \n\n- Only select location at row 0 for column \"name\"\n\n. . .\n\n::: {#626f8dc6 .cell output-location='fragment' execution_count=6}\n``` {.python .cell-code}\ndf.loc[0, 'name']\n```\n\n::: {.cell-output .cell-output-display execution_count=6}\n```\n'Tom'\n```\n:::\n:::\n\n\n## Multiple rows and one column\n\n- Select row 2 to 4 for column \"name\" (when using .loc endpoints are included)\n\n. . .\n\n::: {#b741be30 .cell output-location='fragment' execution_count=7}\n``` {.python .cell-code}\ndf.loc[2:4, 'name']\n```\n\n::: {.cell-output .cell-output-display execution_count=7}\n```\n2    Peter\nName: name, dtype: category\nCategories (3, object): ['Lisa', 'Peter', 'Tom']\n```\n:::\n:::\n\n\n## Multiple rows and multiple columns\n\n- Select row 2 to 4 for columns \"name\" and \"height\" (when using .loc endpoints are included)\n\n. . .\n\n::: {#f954cb5b .cell output-location='fragment' execution_count=8}\n``` {.python .cell-code}\ndf.loc[2:4, ['name', 'height']]\n```\n\n::: {.cell-output .cell-output-display execution_count=8}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>name</th>\n      <th>height</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>2</th>\n      <td>Peter</td>\n      <td>1.72</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n```\n:::\n:::\n\n\n## All rows and multiple columns\n\n- Select all rows for name and height\n\n. . .\n\n::: {#f042bcfe .cell output-location='fragment' execution_count=9}\n``` {.python .cell-code}\ndf.loc[:, [\"name\", \"height\"]]\n```\n\n::: {.cell-output .cell-output-display execution_count=9}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>name</th>\n      <th>height</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>Tom</td>\n      <td>1.68</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>Lisa</td>\n      <td>1.93</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>Peter</td>\n      <td>1.72</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n```\n:::\n:::\n\n\n## Scalar value\n\n::: {#0f584832 .cell execution_count=10}\n``` {.python .cell-code}\ndf.loc[[0], \"height\"]\n```\n\n::: {.cell-output .cell-output-display execution_count=10}\n```\n0    1.68\nName: height, dtype: float64\n```\n:::\n:::\n\n\n# Integer based indexing: .iloc\n\n## Basics {.smaller}\n\n- Pandas provides a suite of methods in order to get purely integer based indexing. \n\n- Here, the `.iloc` attribute is the primary access method. \n\n. . .\n\n::: {#81f4a7aa .cell output-location='fragment' execution_count=11}\n``` {.python .cell-code}\ndf.iloc[0]\n```\n\n::: {.cell-output .cell-output-display execution_count=11}\n```\nname            Tom\nheight         1.68\nweight         48.4\nid                1\ncity      Stuttgart\nbmi           17.15\nName: 0, dtype: object\n```\n:::\n:::\n\n\n## Multiple rows and columns\n\n- *When using `.iloc`, endpoints are not included.*\n\n. . .\n\n::: {#dded8b82 .cell output-location='fragment' execution_count=12}\n``` {.python .cell-code}\ndf.iloc[0:2, 0:2]\n```\n\n::: {.cell-output .cell-output-display execution_count=12}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>name</th>\n      <th>height</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>Tom</td>\n      <td>1.68</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>Lisa</td>\n      <td>1.93</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n```\n:::\n:::\n\n\n## Lists of integer position locations\n\n::: {#b6c418f4 .cell output-location='fragment' execution_count=13}\n``` {.python .cell-code}\ndf.iloc[[0, 2], [0, 1]]\n```\n\n::: {.cell-output .cell-output-display execution_count=13}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>name</th>\n      <th>height</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>Tom</td>\n      <td>1.68</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>Peter</td>\n      <td>1.72</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n```\n:::\n:::\n\n\n## Slicing rows explicitly\n\n::: {#443639c7 .cell output-location='fragment' execution_count=14}\n``` {.python .cell-code}\ndf.iloc[1:3, :]\n```\n\n::: {.cell-output .cell-output-display execution_count=14}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>name</th>\n      <th>height</th>\n      <th>weight</th>\n      <th>id</th>\n      <th>city</th>\n      <th>bmi</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>1</th>\n      <td>Lisa</td>\n      <td>1.93</td>\n      <td>89.8</td>\n      <td>2</td>\n      <td>Stuttgart</td>\n      <td>24.11</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>Peter</td>\n      <td>1.72</td>\n      <td>84.2</td>\n      <td>3</td>\n      <td>Berlin</td>\n      <td>28.46</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n```\n:::\n:::\n\n\n## Slicing columns explicitly\n\n::: {#c577d191 .cell output-location='fragment' execution_count=15}\n``` {.python .cell-code}\ndf.iloc[:, 1:3]\n```\n\n::: {.cell-output .cell-output-display execution_count=15}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>height</th>\n      <th>weight</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>1.68</td>\n      <td>48.4</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>1.93</td>\n      <td>89.8</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>1.72</td>\n      <td>84.2</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n```\n:::\n:::\n\n\n## Getting a value explicitly\n\n::: {#a6dc1ff8 .cell execution_count=16}\n``` {.python .cell-code}\ndf.iloc[0, 0]\n```\n\n::: {.cell-output .cell-output-display execution_count=16}\n```\n'Tom'\n```\n:::\n:::\n\n\n",
    "supporting": [
      "pandas-select_files/figure-revealjs"
    ],
    "filters": [],
    "includes": {
      "include-in-header": [
        "<script src=\"https://cdnjs.cloudflare.com/ajax/libs/require.js/2.3.6/require.min.js\" integrity=\"sha512-c3Nl8+7g4LMSTdrm621y7kf9v3SDPnhxLNhcjFJbKECVnmZHTdo+IRO05sNLTH/D3vA6u1X32ehoLC7WFVdheg==\" crossorigin=\"anonymous\"></script>\n<script src=\"https://cdnjs.cloudflare.com/ajax/libs/jquery/3.5.1/jquery.min.js\" integrity=\"sha512-bLT0Qm9VnAYZDflyKcBaQ2gg0hSYNQrJ8RilYldYQ1FxQYoCLtUjuuRuZo+fjqhx/qtq/1itJ0C2ejDxltZVFg==\" crossorigin=\"anonymous\"></script>\n<script type=\"application/javascript\">define('jquery', [],function() {return window.jQuery;})</script>\n"
      ]
    }
  }
}