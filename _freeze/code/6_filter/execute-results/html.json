{
  "hash": "677d76594998fc02932bec40c94d3e65",
  "result": {
    "markdown": "---\ntitle: 'Filter, grouping and binning'\n---\n\n## Import pandas\n\n::: {#bdacf02f .cell execution_count=1}\n``` {.python .cell-code}\nimport pandas as pd\n```\n:::\n\n\n## Import data\n\n::: {#23d32ea3 .cell execution_count=2}\n``` {.python .cell-code}\nURL = \"https://raw.githubusercontent.com/kirenz/datasets/master/height_clean_cols.csv\"\ndf = pd.read_csv(URL)\n```\n:::\n\n\n## Filter \n\nUsing a single column’s values to filter data (boolean indexing).\n\n::: {#21c44df9 .cell execution_count=3}\n``` {.python .cell-code}\ndf[df[\"height\"] >= 167]\n```\n\n::: {.cell-output .cell-output-display execution_count=3}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>name</th>\n      <th>id</th>\n      <th>height</th>\n      <th>average_height_parents</th>\n      <th>gender</th>\n      <th>number</th>\n      <th>height_m</th>\n      <th>weight</th>\n      <th>bmi</th>\n      <th>date</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>17</th>\n      <td>Tom</td>\n      <td>18</td>\n      <td>167</td>\n      <td>166.2</td>\n      <td>male</td>\n      <td>42</td>\n      <td>1.67</td>\n      <td>63.91</td>\n      <td>22.92</td>\n      <td>2022-10-08</td>\n    </tr>\n    <tr>\n      <th>18</th>\n      <td>Steven</td>\n      <td>19</td>\n      <td>167</td>\n      <td>167.3</td>\n      <td>male</td>\n      <td>42</td>\n      <td>1.67</td>\n      <td>75.71</td>\n      <td>27.15</td>\n      <td>2022-10-08</td>\n    </tr>\n    <tr>\n      <th>19</th>\n      <td>Emanuel</td>\n      <td>20</td>\n      <td>168</td>\n      <td>168.5</td>\n      <td>male</td>\n      <td>42</td>\n      <td>1.68</td>\n      <td>79.22</td>\n      <td>28.07</td>\n      <td>2022-10-08</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n```\n:::\n:::\n\n\nCombine filtering for two columns or more with `&` (and)\n\n::: {#556795c6 .cell execution_count=4}\n``` {.python .cell-code}\ndf[(df[\"height\"] >= 167) & (df[\"weight\"] < 74)]\n```\n\n::: {.cell-output .cell-output-display execution_count=4}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>name</th>\n      <th>id</th>\n      <th>height</th>\n      <th>average_height_parents</th>\n      <th>gender</th>\n      <th>number</th>\n      <th>height_m</th>\n      <th>weight</th>\n      <th>bmi</th>\n      <th>date</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>17</th>\n      <td>Tom</td>\n      <td>18</td>\n      <td>167</td>\n      <td>166.2</td>\n      <td>male</td>\n      <td>42</td>\n      <td>1.67</td>\n      <td>63.91</td>\n      <td>22.92</td>\n      <td>2022-10-08</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n```\n:::\n:::\n\n\nYou can also combine filtering for two columns or more with `|` (or)\n\n::: {#36690329 .cell execution_count=5}\n``` {.python .cell-code}\ndf[(df[\"height\"] >= 167) | (df[\"weight\"] < 74)]\n```\n\n::: {.cell-output .cell-output-display execution_count=5}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>name</th>\n      <th>id</th>\n      <th>height</th>\n      <th>average_height_parents</th>\n      <th>gender</th>\n      <th>number</th>\n      <th>height_m</th>\n      <th>weight</th>\n      <th>bmi</th>\n      <th>date</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>1</th>\n      <td>Peter</td>\n      <td>2</td>\n      <td>163</td>\n      <td>163.5</td>\n      <td>male</td>\n      <td>42</td>\n      <td>1.63</td>\n      <td>70.57</td>\n      <td>26.56</td>\n      <td>2022-10-08</td>\n    </tr>\n    <tr>\n      <th>5</th>\n      <td>Sophia</td>\n      <td>6</td>\n      <td>164</td>\n      <td>164.4</td>\n      <td>female</td>\n      <td>42</td>\n      <td>1.64</td>\n      <td>58.06</td>\n      <td>21.59</td>\n      <td>2022-10-08</td>\n    </tr>\n    <tr>\n      <th>11</th>\n      <td>Mila</td>\n      <td>12</td>\n      <td>165</td>\n      <td>167.4</td>\n      <td>female</td>\n      <td>42</td>\n      <td>1.65</td>\n      <td>68.03</td>\n      <td>24.99</td>\n      <td>2022-10-08</td>\n    </tr>\n    <tr>\n      <th>12</th>\n      <td>Fin</td>\n      <td>13</td>\n      <td>165</td>\n      <td>165.5</td>\n      <td>male</td>\n      <td>42</td>\n      <td>1.65</td>\n      <td>68.01</td>\n      <td>24.98</td>\n      <td>2022-10-08</td>\n    </tr>\n    <tr>\n      <th>15</th>\n      <td>Marc</td>\n      <td>16</td>\n      <td>166</td>\n      <td>166.5</td>\n      <td>male</td>\n      <td>42</td>\n      <td>1.66</td>\n      <td>63.15</td>\n      <td>22.92</td>\n      <td>2022-10-08</td>\n    </tr>\n    <tr>\n      <th>16</th>\n      <td>Ralph</td>\n      <td>17</td>\n      <td>166</td>\n      <td>166.6</td>\n      <td>male</td>\n      <td>42</td>\n      <td>1.66</td>\n      <td>62.02</td>\n      <td>22.51</td>\n      <td>2022-10-08</td>\n    </tr>\n    <tr>\n      <th>17</th>\n      <td>Tom</td>\n      <td>18</td>\n      <td>167</td>\n      <td>166.2</td>\n      <td>male</td>\n      <td>42</td>\n      <td>1.67</td>\n      <td>63.91</td>\n      <td>22.92</td>\n      <td>2022-10-08</td>\n    </tr>\n    <tr>\n      <th>18</th>\n      <td>Steven</td>\n      <td>19</td>\n      <td>167</td>\n      <td>167.3</td>\n      <td>male</td>\n      <td>42</td>\n      <td>1.67</td>\n      <td>75.71</td>\n      <td>27.15</td>\n      <td>2022-10-08</td>\n    </tr>\n    <tr>\n      <th>19</th>\n      <td>Emanuel</td>\n      <td>20</td>\n      <td>168</td>\n      <td>168.5</td>\n      <td>male</td>\n      <td>42</td>\n      <td>1.68</td>\n      <td>79.22</td>\n      <td>28.07</td>\n      <td>2022-10-08</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n```\n:::\n:::\n\n\n- Filter people with a weight greater as 84 and save it as `df_weight_greater_84`\n\n::: {#8d28e87e .cell nbgrader='{\"grade\":false,\"grade_id\":\"weight\",\"locked\":false,\"schema_version\":3,\"solution\":true,\"task\":false}' execution_count=6}\n``` {.python .cell-code}\n# BEGIN SOLUTION\ndf_weight_greater_84 = df[df[\"weight\"] > 84]\n# END SOLUTION\n```\n:::\n\n\n::: {#2970c678 .cell nbgrader='{\"grade\":true,\"grade_id\":\"c_weight\",\"locked\":true,\"points\":2,\"schema_version\":3,\"solution\":false,\"task\":false}' execution_count=7}\n``` {.python .cell-code}\n\"\"\"Check if your code returns the correct output\"\"\"\nassert len(df_weight_greater_84) == 2\nassert df_weight_greater_84.iloc[0, 0] == \"Stefanie\"\nassert df_weight_greater_84.iloc[1, 0] == \"Eric\"\n```\n:::\n\n\nAlways use the [isin()](https://pandas.pydata.org/docs/reference/api/pandas.Series.isin.html#pandas.Series.isin) method if you have multiple conditions within one column:\n\n::: {#b229a2f3 .cell execution_count=8}\n``` {.python .cell-code}\ndf[df[\"name\"].isin([\"Tom\", \"Steven\"])]\n```\n\n::: {.cell-output .cell-output-display execution_count=8}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>name</th>\n      <th>id</th>\n      <th>height</th>\n      <th>average_height_parents</th>\n      <th>gender</th>\n      <th>number</th>\n      <th>height_m</th>\n      <th>weight</th>\n      <th>bmi</th>\n      <th>date</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>17</th>\n      <td>Tom</td>\n      <td>18</td>\n      <td>167</td>\n      <td>166.2</td>\n      <td>male</td>\n      <td>42</td>\n      <td>1.67</td>\n      <td>63.91</td>\n      <td>22.92</td>\n      <td>2022-10-08</td>\n    </tr>\n    <tr>\n      <th>18</th>\n      <td>Steven</td>\n      <td>19</td>\n      <td>167</td>\n      <td>167.3</td>\n      <td>male</td>\n      <td>42</td>\n      <td>1.67</td>\n      <td>75.71</td>\n      <td>27.15</td>\n      <td>2022-10-08</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n```\n:::\n:::\n\n\n## Grouping\n\nBy “group by” we are referring to a process involving one or more of the following steps:\n\n- **Splitting** the data into groups based on some criteria\n\n- **Applying** a function to each group independently\n\n- **Combining** the results into a data structure\n\nGrouping and then applying the `mean()` function to the resulting groups. Furthermore, we round the results and transpose the data.\n\n::: {#7ae75423 .cell execution_count=9}\n``` {.python .cell-code}\ndf.groupby(\"gender\").mean(numeric_only=True).round(2).T\n```\n\n::: {.cell-output .cell-output-display execution_count=9}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th>gender</th>\n      <th>female</th>\n      <th>male</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>id</th>\n      <td>7.82</td>\n      <td>13.78</td>\n    </tr>\n    <tr>\n      <th>height</th>\n      <td>164.36</td>\n      <td>165.78</td>\n    </tr>\n    <tr>\n      <th>average_height_parents</th>\n      <td>164.86</td>\n      <td>165.94</td>\n    </tr>\n    <tr>\n      <th>number</th>\n      <td>42.00</td>\n      <td>42.00</td>\n    </tr>\n    <tr>\n      <th>height_m</th>\n      <td>1.64</td>\n      <td>1.66</td>\n    </tr>\n    <tr>\n      <th>weight</th>\n      <td>75.34</td>\n      <td>72.66</td>\n    </tr>\n    <tr>\n      <th>bmi</th>\n      <td>27.90</td>\n      <td>26.45</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n```\n:::\n:::\n\n\n## Segment data into bins\n\nUse the function [cut](https://pandas.pydata.org/docs/reference/api/pandas.cut.html) when you need to segment and sort data values into bins. This function is also useful for going from a continuous variable to a categorical variable. \n\nIn our example, we create a body mass index category. The standard weight status categories associated with BMI ranges for adults are shown in the following table:\n\nBMI\t| Weight Status\n---| ---\nBelow 18.5 |\tUnderweight\n18.5 - 24.9 |\tNormal or Healthy Weight\n25.0 - 29.9 |\tOverweight\n30.0 and Above |\tObese\n\nSource: [U.S. Department of Health & Human Services](https://www.cdc.gov/healthyweight/assessing/bmi/adult_bmi/index.html)\n\nIn our function, we discretize the variable `bmi` into four bins according to the table above:\n\n- The bins [0, 18.5, 25, 30, float('inf')] indicate (0,18.5], (18.5,25], (25,30], (30, float('inf))\n- `float('inf')` is used for setting  variable with an infinitely large value\n\n::: {#4e990b82 .cell execution_count=10}\n``` {.python .cell-code}\ndf['bmi_category'] = pd.cut(df['bmi'],\n                            bins=[0, 18.5, 25, 30, float('inf')],\n                            labels=['underweight', 'normal', 'overweight', \"obese\"])\n```\n:::\n\n\n::: {#d46f355a .cell execution_count=11}\n``` {.python .cell-code}\ndf['bmi_category'].head(7)\n```\n\n::: {.cell-output .cell-output-display execution_count=11}\n```\n0         obese\n1    overweight\n2    overweight\n3    overweight\n4         obese\n5        normal\n6    overweight\nName: bmi_category, dtype: category\nCategories (4, object): ['underweight' < 'normal' < 'overweight' < 'obese']\n```\n:::\n:::\n\n\nExample of how to discretize into four equal-sized bins:\n\n::: {#4ef08ec8 .cell execution_count=12}\n``` {.python .cell-code}\ndf['bmi_category_2'] = pd.cut(df['bmi'],\n                              bins=4,\n                              labels=['group1', 'group2', 'group3', \"group4\"])\n```\n:::\n\n\n::: {#225a3d0f .cell execution_count=13}\n``` {.python .cell-code}\ndf['bmi_category_2'].head(7)\n```\n\n::: {.cell-output .cell-output-display execution_count=13}\n```\n0    group4\n1    group2\n2    group3\n3    group3\n4    group4\n5    group1\n6    group3\nName: bmi_category_2, dtype: category\nCategories (4, object): ['group1' < 'group2' < 'group3' < 'group4']\n```\n:::\n:::\n\n\nExample of how to discretize into four equal-sized bins if you don't need labels\n\n::: {#504e1fa6 .cell execution_count=14}\n``` {.python .cell-code}\ndf['bmi_category_3'] = pd.cut(df['bmi'],\n                              bins=4,\n                              labels=False)\n```\n:::\n\n\n::: {#33496c67 .cell execution_count=15}\n``` {.python .cell-code}\ndf['bmi_category_3'].head(7)\n```\n\n::: {.cell-output .cell-output-display execution_count=15}\n```\n0    3\n1    1\n2    2\n3    2\n4    3\n5    0\n6    2\nName: bmi_category_3, dtype: int64\n```\n:::\n:::\n\n\n- Use the variable height to create a new variable called `height_category` with three bins and labels:\n\n  - 0 to 165 (label it `group1`)\n  - 166 to 167 (label it `group2`)\n  - 168 and taller (label it `group3`)\n\n::: {#4df4d411 .cell nbgrader='{\"grade\":false,\"grade_id\":\"cat\",\"locked\":false,\"schema_version\":3,\"solution\":true,\"task\":false}' execution_count=16}\n``` {.python .cell-code}\n# BEGIN SOLUTION\ndf['height_category'] = pd.cut(df['height'],\n                               bins=[0, 165, 167, float('inf')],\n                               labels=['group1', 'group2', 'group3'])\n# END SOLUTION\n```\n:::\n\n\n::: {#bed5487b .cell nbgrader='{\"grade\":true,\"grade_id\":\"c_cat\",\"locked\":true,\"points\":3,\"schema_version\":3,\"solution\":false,\"task\":false}' execution_count=17}\n``` {.python .cell-code}\n\"\"\"Check if your code returns the correct output\"\"\"\nassert df['height_category'].value_counts().group1 == 13\nassert df['height_category'].value_counts().group2 == 6\nassert df['height_category'].value_counts().group3 == 1\n```\n:::\n\n\n",
    "supporting": [
      "6_filter_files"
    ],
    "filters": [],
    "includes": {
      "include-in-header": [
        "<script src=\"https://cdnjs.cloudflare.com/ajax/libs/require.js/2.3.6/require.min.js\" integrity=\"sha512-c3Nl8+7g4LMSTdrm621y7kf9v3SDPnhxLNhcjFJbKECVnmZHTdo+IRO05sNLTH/D3vA6u1X32ehoLC7WFVdheg==\" crossorigin=\"anonymous\"></script>\n<script src=\"https://cdnjs.cloudflare.com/ajax/libs/jquery/3.5.1/jquery.min.js\" integrity=\"sha512-bLT0Qm9VnAYZDflyKcBaQ2gg0hSYNQrJ8RilYldYQ1FxQYoCLtUjuuRuZo+fjqhx/qtq/1itJ0C2ejDxltZVFg==\" crossorigin=\"anonymous\"></script>\n<script type=\"application/javascript\">define('jquery', [],function() {return window.jQuery;})</script>\n"
      ]
    }
  }
}