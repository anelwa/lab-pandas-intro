---
title: Selection
lang: en
subtitle: Pandas Introduction
author: Jan Kirenz
execute:
  eval: true
  echo: true
highlight-style: github
format:
  revealjs: 
    toc: true
    toc-depth: 1
    embed-resources: false
    theme: [dark, ../custom.scss]  
    incremental: true
    transition: slide
    background-transition: fade
    transition-speed: slow
    code-copy: true
    code-line-numbers: true
    smaller: false
    scrollable: true
    slide-number: c
    preview-links: auto
    chalkboard: 
      buttons: false
   #logo: images/logo.png
    footer: Jan Kirenz
---

# Setup

```{python}
import pandas as pd

df = pd.DataFrame({
    'name': ["Tom", "Lisa", "Peter"],
    'height': [1.68, 1.93, 1.72],
    'weight': [48.4, 89.8, 84.2],
    'id': [1, 2, 3],
    'city': ['Stuttgart', 'Stuttgart', 'Berlin']
})

df['bmi'] = round(df['weight'] / (df['height'] * df['height']), 2)
df["name"] = df["name"].astype("category")
df['id'] = df['id'].astype(str)
```

# Select with []

## Getting columns with [[]]

- Selecting a single column with `[[]]`:

- Select the column `city` and save it as a new Pandas dataframe `df_city`

. . .

```{python}
df_city = df[["city"]]

```


. . .
```{python}
# | output-location: fragment
df_city

```


## Selecting rows with []


- Selecting via `[]` slices the rows (endpoint is not included) and includes all columns:

```{python}
# | output-location: fragment
df[0:2]
```


# Getting data with loc


The `.loc` (location) attribute is the primary access method. 


## Only the first row


```{python}
# | output-location: fragment
df.loc[[0]]
```


## One row and one column 

- Only select location at row 0 for column "name"

. . .

```{python}
# | output-location: fragment
df.loc[0, 'name']
```

## Multiple rows and one column

- Select row 2 to 4 for column "name" (when using .loc endpoints are included)

. . .

```{python}
# | output-location: fragment
df.loc[2:4, 'name']
```

## Multiple rows and multiple columns

- Select row 2 to 4 for columns "name" and "height" (when using .loc endpoints are included)

. . .

```{python}
# | output-location: fragment
df.loc[2:4, ['name', 'height']]
```

## All rows and multiple columns

- Select all rows for name and height

. . .

```{python}
# | output-location: fragment
df.loc[:, ["name", "height"]]
```

## Scalar value

```{python}
df.loc[[0], "height"]
```


# Integer based indexing: .iloc

## Basics {.smaller}

- Pandas provides a suite of methods in order to get purely integer based indexing. 

- Here, the `.iloc` attribute is the primary access method. 

. . .
```{python}
# | output-location: fragment
df.iloc[0]
```

## Multiple rows and columns

- *When using `.iloc`, endpoints are not included.*

. . .

```{python}
# | output-location: fragment
df.iloc[0:2, 0:2]
```


## Lists of integer position locations

```{python}
# | output-location: fragment
df.iloc[[0, 2], [0, 1]]
```


## Slicing rows explicitly

```{python}
# | output-location: fragment
df.iloc[1:3, :]
```

## Slicing columns explicitly

```{python}
# | output-location: fragment

df.iloc[:, 1:3]
```


## Getting a value explicitly

```{python}
df.iloc[0, 0]
```


# What's next? {background-image="../images/logo.png" background-opacity="0.5"}

**Congratulations! You have completed this tutorial** üëç


**Next, you may want to go back to the [lab's website](https://kirenz.github.io/lab-pandas-intro/)**