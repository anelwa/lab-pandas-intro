---
title: Pandas
lang: en
subtitle: Slides for Lab Pandas-Introduction
author: Jan Kirenz
execute:
  eval: true
  echo: true
highlight-style: github
format:
  revealjs: 
    toc: true
    toc-depth: 1
    embed-resources: false
    theme: [dark, ../custom.scss]  
    incremental: true
    transition: slide
    background-transition: fade
    transition-speed: slow
    code-copy: true
    code-line-numbers: true
    smaller: false
    scrollable: true
    slide-number: c
    preview-links: auto
    chalkboard: 
      buttons: false
   #logo: images/logo.png
    footer: Jan Kirenz
---

# Pandas introduction


## Import pandas

- To load the pandas package and start working with it, import the package. 

- The community agreed alias for pandas is `pd`

. . .

```{python}
from datetime import datetime
import pandas as pd
```


# Create and Import Data

## Data creation

- To manually store data in a table, create a DataFrame:

```{python}
# | code-line-numbers: "|1|2|3|4|5|"
df = pd.DataFrame({
    'name': ["Tom", "Lisa", "Peter"],
    'height': [1.68, 1.93, 1.72],
    'weight': [48.4, 89.8, 84.2],
    'id': [1, 2, 3],
    'city': ['Stuttgart', 'Stuttgart', 'Berlin']
})
```

## Show data

```{python}
# | output-location: fragment
df.head()
```

## Import data

- Import data with the prefix `.read_*`

![](https://pandas.pydata.org/docs/_images/02_io_readwrite.svg)


## Import data

- Import a CSV file in a GitHub repo 

. . .

```{python}
# | output-location: fragment
# | code-line-numbers: "|1|3|5|"
URL = "https://raw.githubusercontent.com/kirenz/datasets/master/campaign.csv"

df_github = pd.read_csv(URL, sep=",", decimal='.')

df_github.head()
```


## Store data

- Store data with the prefix `.to_*`

. . .

```{python}
df_github.to_csv("data.csv", index=False)
```

- By setting `index=False` the row index labels are not saved in the spreadsheet

# Viewing data

## Overview

```{python}
# | output-location: fragment
df
```

## Head and tail

```{python}
# | output-location: fragment
# show first 2 rows
df.head(2)
```

. . .

```{python}
# | output-location: fragment
# show last 2 rows
df.tail(2)
```


## Info

- The `info()` method prints information about a DataFrame.

. . .

```{python}
# | output-location: fragment
df.info()
```


## Column names

```{python}
# | output-location: fragment
df.columns
```

## Data type

- Show data types ([dtypes](https://pandas.pydata.org/docs/user_guide/basics.html#basics-dtypes)).

```{python}
# | output-location: fragment
df.dtypes
```

- The data types in this DataFrame are integers (int64), floats (float64) and strings (object).

## Index

```{python}
# | output-location: fragment
df.index
```



# Change column names

## Column names

Usually, we prefer to work with columns that have the following proporties:


- no leading or trailing whitespace (`"name"` instead of `" name "`, `" name"` or `"name "`)


- all lowercase (`"name"` instead of `"Name"`)


- no white spaces (`"my_name"` instead of `"my name"`)

## Simple rename

- First, we rename columns by simply using a mapping
- We rename `"name"` to `" MY NEW-NAME"` (note that we include a leading whitespace)

. . .

```{python}
df = df.rename(columns={"name": " MY NEW-NAME"}, errors="raise")
```

## Simple rename


```{python}
# | output-location: fragment
df.head()
```


. . .

```{python}
# | output-location: fragment
df.columns
```

## Trailing and leading spaces (with regex)

- We use regular expressions to deal with whitespaces

- To change multiple column names in `df` at once, we use the method `df.columns = df.columns.str.replace()` 

- To replace the spaces, we use `.replace()` with `regex=True`


## Regular expressions

Explanation for *regex* (see also [Stackoverflow](https://stackoverflow.com/a/67466222)):

- we start with `r` (for raw) which tells Python to treat all following input as raw text (without interpreting it)
- "`^`": is line start
- " ": is a white space
- "`+`": some following characters
- "`|`": is or
- "`$`": is line end
- "": is an empty string 

## Regular expressions

To learn more about regular expressions ("regex"), visit the following sites:

- [regular expression basics](https://www.w3schools.com/python/python_regex.asp).
- [interactive regular expressions tool](https://regex101.com/)

## Trailing and leading spaces (with regex)

- In the following function, we search for leading spaces and replace them with an empty string:

. . .

```{python}
# | output-location: fragment
df.columns = df.columns.str.replace(r"^ ", r"", regex=True)
```

. . .


```{python}
# | output-location: fragment
df.columns
```

## Replace special characters

- Again, we use regular expressions to deal with special characters (like `-`, `%`, `&`, `$` etc.)

- Replace "`-`" with "`_`"

. . .

```{python}
# | output-location: fragment
df.columns = df.columns.str.replace(r"-", r"_", regex=True)

```

. . .

```{python}
# | output-location: fragment
df.columns
```

## Lowercase and whitespace

- We can use two simple methods to convert all columns to lowercase and replace white spaces with underscores ("_"):

- `.str.lower()`


- `.str.replace(' ', '_')`

. . .

```{python}
# | output-location: fragment
df.columns = df.columns.str.lower().str.replace(' ', '_')
```


. . .

```{python}
# | output-location: fragment
df.columns
```


# Data Types

## Data


```{python}

df = pd.DataFrame({
    'name': ["Tom", "Lisa", "Peter"],
    'height': [1.68, 1.93, 1.72],
    'weight': [48.4, 89.8, 84.2],
    'id': [1, 2, 3],
    'city': ['Stuttgart', 'Stuttgart', 'Berlin']
})
```

## Data Types

```{python}
# | output-location: fragment
df.dtypes
```

## Data Types

```{python}
# | output-location: fragment
df.info()
```

## Change data type

- There are several methods to [change data types in pandas](https://pandas.pydata.org/docs/reference/api/pandas.DataFrame.astype.html):

- The most common method to change the data type is:

- `.astype()`: Convert to a specific type (like "`int32`", "`float`" or "`catgeory`")

- `.astype(str)`: Convert to string  
  

## Change data type

More options:  
  
- `to_datetime`: Convert argument to datetime.
- `to_timedelta`: Convert argument to timedelta.
- `to_numeric`: Convert argument to a numeric type.


## Categorical data

- Categoricals are a pandas data type corresponding to categorical variables in statistics. 


- A categorical variable takes on a limited, and usually fixed, number of possible values (categories). 

- Examples are gender, social class, blood type, country affiliation, observation time or rating via Likert scales.

## Categorical data


- Convert variable "name" to a category dtype:

. . .

```{python}
df["name"] = df["name"].astype("category")
```

## Change data type

```{python}
# | output-location: fragment
df.info()
```


## String data

- In our example, `id` is not a number (we can't perform calculations with it)

- It is just a unique identifier so we should transform it to a simple string (object)

. . .

```{python}

df['id'] = df['id'].astype(str)

```

## Change data type

```{python}
# | output-location: fragment
df.info()
```


# Add new columns

## Constant

- Add a new variable called "number" to df 

- The new variable should have the number 42 in all rows

. . .

```{python}
df["number"] = 42
```

. . .

```{python}
# | output-location: fragment
df.head()
```

## From existing columns

 - Create new columns from existing columns

. . .


```{python}
# calculate body mass index
df['bmi'] = round(df['weight'] / (df['height'] * df['height']), 2)
```

. . .

```{python}
# | output-location: fragment
df
```


# Dates

- To add a date, we can use datetime and [strftime](https://strftime.org) (see code examples on the next slides):

. . .

```{python}
df["date"] = datetime.today().strftime('%Y-%m-%d')
```

. . .

```{python}
# | output-location: fragment
df.head(3)
```


## Dates {.smaller}

| Code | Example                 | Description                                                                                                                                                                      |
| ---- | ----------------------- | -------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- |
| %a   | Sun                     | Weekday as locale’s abbreviated name.                                                                                                                                            |
| %A   | Sunday                  | Weekday as locale’s full name.                                                                                                                                                   |
| %w   | 0                       | Weekday as a decimal number, where 0 is Sunday and 6 is Saturday.                                                                                                                |
| %d   | 8                       | Day of the month as a zero-padded decimal number.                                                                                                                                |
| %-d  | 8                       | Day of the month as a decimal number. (Platform specific)                                                                                                                        |




## Dates {.smaller}

| Code | Example                 | Description                                                                                                                                                                      |
| ---- | ----------------------- | -------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- |

| %b   | Sep                     | Month as locale’s abbreviated name.                                                                                                                                              |
| %B   | September               | Month as locale’s full name.                                                                                                                                                     |
| %m   | 9                       | Month as a zero-padded decimal number.                                                                                                                                           |
| %-m  | 9                       | Month as a decimal number. (Platform specific)                                                                                                                                   |



## Dates {.smaller}

| Code | Example                 | Description                                                                                                                                                                      |
| ---- | ----------------------- | -------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- |


| %y   | 13                      | Year without century as a zero-padded decimal number.                                                                                                                            |
| %Y   | 2013                    | Year with century as a decimal number.                                                                                                                                           |
| %H   | 7                       | Hour (24-hour clock) as a zero-padded decimal number.                                                                                                                            |
| %-H  | 7                       | Hour (24-hour clock) as a decimal number. (Platform specific)                                                                                                                    |
| %I   | 7                       | Hour (12-hour clock) as a zero-padded decimal number.                                                                                                                            |
| %-I  | 7                       | Hour (12-hour clock) as a decimal number. (Platform specific)                                                                                                                    |




## Dates {.smaller}

| Code | Example                 | Description                                                                                                                                                                      |
| ---- | ----------------------- | -------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- |


| %p   | AM                      | Locale’s equivalent of either AM or PM.                                                                                                                                          |
| %M   | 6                       | Minute as a zero-padded decimal number.                                                                                                                                          |
| %-M  | 6                       | Minute as a decimal number. (Platform specific)                                                                                                                                  |
| %S   | 5                       | Second as a zero-padded decimal number.                                                                                                                                          |
| %-S  | 5                       | Second as a decimal number. (Platform specific)                                                                                                                                  |
| %f   | 0                       | Microsecond as a decimal number, zero-padded on the left.                                                                                                                        |
| %z   | 0                       | UTC offset in the form ±HHMM\[SS\[.ffffff\]\] (empty string if the object is naive).                                                                                             |
| %Z   | UTC                     | Time zone name (empty string if the object is naive).                                                                                                                            |
| %j   | 251                     | Day of the year as a zero-padded decimal number.                                                                                                                                 |
| %-j  | 251                     | Day of the year as a decimal number. (Platform specific)                                                                                                                         |
| %U   | 36                      | Week number of the year (Sunday as the first day of the week) as a zero padded decimal number. All days in a new year preceding the first Sunday are considered to be in week 0. |
| %W   | 35                      | Week number of the year (Monday as the first day of the week) as a decimal number. All days in a new year preceding the first Monday are considered to be in week 0.             |
| %c   | Sun Sep 8 07:06:05 2013 | Locale’s appropriate date and time representation.                                                                                                                               |
| %x   | 09.08.13                | Locale’s appropriate date representation.                                                                                                                                        |
| %X   | 07:06:05                | Locale’s appropriate time representation.                                                                                                                                        |
| %%   | %                       | A literal '%' character.                                                                                                                                                         |


# Statistics

## Numeric data

- We can calculate simple statistics like mean, median, standard deviation etc.

. . .

```{python}
# | output-location: fragment
df['height'].mean()
```

. . .

```{python}
# | output-location: fragment
df['height'].mean().round(2)
```



## Numeric data

- Print the value in nice format ([using formatted string literals](https://docs.python.org/3.6/reference/lexical_analysis.html#formatted-string-literals) f"...") 

. . .

```{python}
# | output-location: fragment

print(f"The mean of height is {df['height'].mean():.2f}")
```


## Numeric data

```{python}
# | output-location: fragment
df['height'].median()
```

. . .

```{python}
# | output-location: fragment
df['height'].std()
```


## Describe

- [describe()](https://pandas.pydata.org/docs/reference/api/pandas.DataFrame.describe.html#pandas.DataFrame.describe) shows a quick statistic summary of your numerical data.


. . .

```{python}
# | output-location: fragment
df.describe()
```

## Describe



```{python}
# | output-location: fragment
df.describe().T.round(2)
```

## Describe

- Summary statistics for numeric variables `height` and `bmi` for different levels of the categorical variable `city`:

. . .

```{python}
# | output-location: fragment
df[['height', 'city']].groupby(['city']).describe().round(2).T
```


## Categorical data

- we can also use `describe()` for categorical data

. . .

```{python}
# | output-location: fragment
df.describe(include="category").T
```


## Categorical data


- Show unique levels of a categorical variable and count with `value_counts()`

. . .

```{python}
# | output-location: fragment
df['city'].value_counts()
```

## Categorical data


- We also can extract specific values

```{python}
# | output-location: fragment
df['city'].value_counts().Stuttgart
```


## Categorical data


- Print the value in nice format ([using formatted string literals](https://docs.python.org/3.6/reference/lexical_analysis.html#formatted-string-literals) f"...") 

. . .

```{python}
# | output-location: fragment
count_stuttgart = df['city'].value_counts().Stuttgart

print(f"There are {count_stuttgart} people from Stuttgart in the data")
```


## Loop over list

- Example of for loop to obtain statistics for specific numerical columns

. . .

```{python}
# make a list of numerical columns
list_num = ['height', 'weight']
```

. . .

```{python}
# | output-location: fragment

# calculate median for our list and only show 4 digits, then make a new line (\n)
for i in list_num:
    print(f'Median of {i} equals {df[i].median():.4} \n')
```

## Loop over list

- Calculate summary statistics for our list.

```{python}
# | output-location: fragment

for i in list_num:
    print(f'Column: {i}  \n  {df[i].describe().round(2)}   \n')   
```

## Create plots

```{python}
# Pandas needs the module matplotlib to create plots
import matplotlib.pyplot as plt

# show plot output in Jupyter Notebook
%matplotlib inline
```

## Boxplot


```{python}
# | output-location: fragment
df.boxplot(column=['weight']);
```

## Boxplots with for loop


```{python}
# | output-location: fragment

# obtain plots for our list
for i in list_num:
    df.boxplot(column=[i])
    plt.title("Boxplot for " + i)
    plt.show()
```




# Selection with [], loc and iloc

## Getting columns with [[]]

- Selecting a single column with `[[]]`:

- Select the column `city` and save it as a new Pandas dataframe `df_city`

. . .

```{python}
df_city = df[["city"]]

```


. . .
```{python}
# | output-location: fragment
df_city

```

## Selecting rows with []

- Selecting via `[]` slices the rows (endpoint is not included) and includes all columns:

```{python}
# | output-location: fragment
df[0:2]
```


## Getting a cross section

- The `.loc` (location) attribute is the primary access method. 

- For getting a cross section using a label (select row 0):

. . .

```{python}
# | output-location: fragment
df.loc[[0]]
```


## Selecting on a multi-axis by label

- Only select location at row 0 for column "name"

. . .

```{python}
# | output-location: fragment
df.loc[0 , 'name']
```

## By label .loc

- Select row 2 to 4 for column "name" (when using .loc endpoints are included)

. . .

```{python}
# | output-location: fragment
df.loc[2:4 , 'name']
```

## By label .loc

- Select row 2 to 4 for columns "name" and "height" (when using .loc endpoints are included)

. . .

```{python}
# | output-location: fragment
df.loc[2:4 , ['name', 'height']]
```

## By label .loc

- Select all rows for name and height

. . .

```{python}
# | output-location: fragment
df.loc[ : , ["name", "height"]]
```

## By label .loc

- For getting a scalar value:

```{python}
df.loc[[0], "height"]
```

## By position .iloc {.smaller}

- Pandas provides a suite of methods in order to get purely integer based indexing. 

- Here, the `.iloc` attribute is the primary access method. 

. . .
```{python}
# | output-location: fragment
df.iloc[0]
```

## By integer slices

- *When using `.iloc`, endpoints are not included.*

. . .

```{python}
# | output-location: fragment
df.iloc[0:2, 0:2]
```


## By lists of integer position locations

```{python}
# | output-location: fragment
df.iloc[[0, 2], [0, 1]]
```



## For slicing rows explicitly

```{python}
# | output-location: fragment
df.iloc[1:3, :]
```

## For slicing columns explicitly

```{python}
# | output-location: fragment

df.iloc[:, 1:3]
```


## For getting a value explicitly

```{python}
df.iloc[0, 0]
```




# Filter 


## Filter 

- Using a single column’s values to filter data (boolean indexing).

. . .

```{python}
# | output-location: fragment
df[df["height"] >= 1.67]
```

## Filter on multiple conditions


- Combine filtering for two columns or more with `&` (and)

. . .

```{python}
df[(df["height"] >= 1.67) & (df["weight"] < 74)]
```

## Filter on multiple conditions


- You can also combine filtering for two columns or more with `|` (or)

. . .

```{python}
# | output-location: fragment
df[(df["height"] >= 167) | (df["weight"] < 74)]
```

## isin()

- Always use the [isin()](https://pandas.pydata.org/docs/reference/api/pandas.Series.isin.html#pandas.Series.isin) method if you have multiple conditions within one column:

. . .

```{python}
# | output-location: fragment
df[df["name"].isin(["Tom", "Steven"])]
```

# Grouping

## Grouping

- By “group by” we are referring to a process involving one or more of the following steps:

- **Splitting** the data into groups based on some criteria

- **Applying** a function to each group independently

- **Combining** the results into a data structure

## Grouping

- Grouping and then applying the `mean()` function to the resulting groups. Furthermore, we round the results and transpose the data.

. . .

```{python}
# | output-location: fragment
df.groupby("city").mean(numeric_only=True).round(2).T
```

# Segment data into bins

## Segment data into bins

- Use the function [cut](https://pandas.pydata.org/docs/reference/api/pandas.cut.html) when you need to segment and sort data values into bins. 

- This function is also useful for going from a continuous variable to a categorical variable. 

## Segment data into bins {.smaller}

The standard weight status categories associated with BMI ranges for adults are shown in the following table:

BMI	| Weight Status
---| ---
Below 18.5 |	Underweight
18.5 - 24.9 |	Normal or Healthy Weight
25.0 - 29.9 |	Overweight
30.0 and Above |	Obese

Source: [U.S. Department of Health & Human Services](https://www.cdc.gov/healthyweight/assessing/bmi/adult_bmi/index.html)


## Segment data into bins {.smaller}


- In our function, we discretize the variable `bmi` into four bins according to the table above:

- The bins [0, 18.5, 25, 30, float('inf')] indicate (0,18.5], (18.5,25], (25,30], (30, float('inf))

- `float('inf')` is used for setting  variable with an infinitely large value

. . .

```{python}
df['bmi_category'] = pd.cut(df['bmi'],
                            bins=[0, 18.5, 25, 30, float('inf')],
                            labels=['underweight', 'normal', 'overweight', "obese"])
```

## Segment data into bins


```{python}
df
```

## Segment data into bins


```{python}
df['bmi_category']
```

## Segment data into bins


- Example of how to discretize into four equal-sized bins:

. . .

```{python}
df['bmi_category_2'] = pd.cut(df['bmi'],
                              bins=4,
                              labels=['group1', 'group2', 'group3', "group4"])
```

. . .

```{python}
df['bmi_category_2']
```


## Segment data into bins 


Example of how to discretize into four equal-sized bins if you don't need labels

```{python}
df['bmi_category_3'] = pd.cut(df['bmi'],
                              bins=4,
                              labels=False)
```

. . .

```{python}
df['bmi_category_3']
```
