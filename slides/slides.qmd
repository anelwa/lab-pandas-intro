---
title: Pandas
lang: en
subtitle: Introduction
author: Jan Kirenz
execute:
  eval: true
  echo: true
highlight-style: github
format:
  revealjs: 
    toc: true
    toc-depth: 1
    embed-resources: false
    theme: [dark, ../custom.scss]  
    incremental: true
    transition: slide
    background-transition: fade
    transition-speed: slow
    code-copy: true
    code-line-numbers: true
    smaller: false
    scrollable: true
    slide-number: c
    preview-links: auto
    chalkboard: 
      buttons: false
   #logo: images/logo.png
    footer: Jan Kirenz
---

# Pandas introduction


## Import pandas

- To load the pandas package and start working with it, import the package. 

- The community agreed alias for pandas is `pd`

. . .

```{python}
import pandas as pd
```

# Create and Import Data

## Data creation

- To manually store data in a table, create a DataFrame:

```{python}
# | code-line-numbers: "|1|2|3|4|5|"
df = pd.DataFrame({
    'name': ["Tom", "Lisa", "Peter"],
    'height': [1.68, 1.93, 1.72],
    'weight': [48.4, 89.8, 84.2]
})
```

## Show data

```{python}
# | output-location: fragment
df.head()
```

## Import data

- Import data with the prefix `.read_*`

![](https://pandas.pydata.org/docs/_images/02_io_readwrite.svg)


## Import data

- Import a CSV file in a GitHub repo 

. . .

```{python}
# | output-location: fragment
# | code-line-numbers: "|1|3|5|"
URL = "https://raw.githubusercontent.com/kirenz/datasets/master/campaign.csv"

df_github = pd.read_csv(URL, sep=",", decimal='.')

df_github.head()
```


## Store data

- Store data with the prefix `.to_*`

. . .

```{python}
df_github.to_csv("data.csv", index=False)
```

- By setting `index=False` the row index labels are not saved in the spreadsheet

# Viewing data

## Overview

```{python}
# | output-location: fragment
df
```

## Head and tail

```{python}
# | output-location: fragment
# show first 2 rows
df.head(2)
```

. . .

```{python}
# | output-location: fragment
# show last 2 rows
df.tail(2)
```


## Info

- The `info()` method prints information about a DataFrame.

. . .

```{python}
# | output-location: fragment
df.info()
```


## Column names

```{python}
# | output-location: fragment
df.columns
```

## Data type

- Show data types ([dtypes](https://pandas.pydata.org/docs/user_guide/basics.html#basics-dtypes)).

```{python}
# | output-location: fragment
df.dtypes
```

- The data types in this DataFrame are integers (int64), floats (float64) and strings (object).

### Index

```{python}
# | output-location: fragment
df.index
```



# Change column names

## Column names

Usually, we prefer to work with columns that have the following proporties:


- no leading or trailing whitespace (`"name"` instead of `" name "`, `" name"` or `"name "`)


- all lowercase (`"name"` instead of `"Name"`)


- now white spaces (`"my_name"` instead of `"my name"`)

## Simple rename

- First, we rename columns by simply using a mapping
- We rename `"name"` to `" NAME"` (note that we include a white space)

. . .

```{python}
# | output-location: fragment
df = df.rename(columns={"name": " NEW$NAME"}, errors="raise")

df.head()
```

. . .

```{python}
# | output-location: fragment
df.columns
```

## Trailing and leading spaces (with regex)

- We use regular expressions to deal with whitespaces

- To change multiple column names in `df` at once, we use the method `df.columns = df.columns.str___` 

- To replace the spaces, we use `.replace()` with `regex=True`


## Regular expressions

Explanation for *regex* (see also [Stackoverflow](https://stackoverflow.com/a/67466222)):

- we start with `r` (for raw) which tells Python to treat all following input as raw text (without interpreting it)
- "`^`": is line start
- " ": is a white space
- "`+`": some following characters
- "`|`": is or
- "`$`": is line end
- "": is an empty string 

## Regular expressions

To learn more about regular expressions ("regex"), visit the following sites:

- [regular expression basics](https://www.w3schools.com/python/python_regex.asp).
- [interactive regular expressions tool](https://regex101.com/)

## Trailing and leading spaces (with regex)

- In the following function, we search for leading spaces and replace them with an empty string:

. . .

```{python}
# | output-location: fragment
df.columns = df.columns.str.replace(r"^ ", r"", regex=True)
```

. . .

```{python}
# | output-location: fragment
df.columns
```

## Replace special characters

- Again, we use regular expressions to deal with special characters (like %, &, $ etc.)

Replace "$" with "_"

. . .

```{python}
# | output-location: fragment
df.columns = df.columns.str.replace(r"$", r"_", regex=True)

```

. . .

```{python}
# | output-location: fragment
df.columns
```

## Lowercase and whitespace

We can use two simple methods to convert all columns to lowercase and replace white spaces with underscores ("_"):

- `.str.lower()`


- `.str.replace(' ', '_')`

. . .

```{python}
# | output-location: fragment
df.columns = df.columns.str.lower().str.replace(' ', '_')
```
