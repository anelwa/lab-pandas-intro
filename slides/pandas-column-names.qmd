---
title: Change Column Names
lang: en
subtitle: Pandas Introduction
author: Jan Kirenz
execute:
  eval: true
  echo: true
highlight-style: github
format:
  revealjs: 
    toc: true
    toc-depth: 1
    embed-resources: false
    theme: [dark, ../custom.scss]  
    incremental: true
    transition: slide
    background-transition: fade
    transition-speed: slow
    code-copy: true
    code-line-numbers: true
    smaller: false
    scrollable: true
    slide-number: c
    preview-links: auto
    chalkboard: 
      buttons: false
   #logo: images/logo.png
    footer: Jan Kirenz
---



# Setup

```{python}
import pandas as pd

df = pd.DataFrame({
    'name': ["Tom", "Lisa", "Peter"],
    'height': [1.68, 1.93, 1.72],
    'weight': [48.4, 89.8, 84.2],
    'id': [1, 2, 3],
    'city': ['Stuttgart', 'Stuttgart', 'Berlin']
})
```


# Basics

## Column names

Usually, we prefer to work with columns that have the following proporties:


- no leading or trailing whitespace (`"name"` instead of `" name "`, `" name"` or `"name "`)


- all lowercase (`"name"` instead of `"Name"`)


- no white spaces (`"my_name"` instead of `"my name"`)

# Simple rename

- First, we rename columns by simply using a mapping
- We rename `"name"` to `" MY NEW-NAME"` (note that we include a leading whitespace)

. . .

```{python}
df = df.rename(columns={"name": " MY NEW-NAME"}, errors="raise")
```

## Simple rename


```{python}
# | output-location: fragment
df.head()
```


. . .

```{python}
# | output-location: fragment
df.columns
```


# Regular expressions

## Trailing and leading spaces (with regex)

- We use regular expressions to deal with whitespaces

- To change multiple column names in `df` at once, we use the method `df.columns = df.columns.str.replace()` 

- To replace the spaces, we use `.replace()` with `regex=True`


## Regular expressions

Explanation for *regex* (see also [Stackoverflow](https://stackoverflow.com/a/67466222)):

- we start with `r` (for raw) which tells Python to treat all following input as raw text (without interpreting it)
- "`^`": is line start
- " ": is a white space
- "`+`": some following characters
- "`|`": is or
- "`$`": is line end
- "": is an empty string 

## Regular expressions

To learn more about regular expressions ("regex"), visit the following sites:

- [regular expression basics](https://www.w3schools.com/python/python_regex.asp).
- [interactive regular expressions tool](https://regex101.com/)

## Trailing and leading spaces (with regex)

- In the following function, we search for leading spaces and replace them with an empty string:

. . .

```{python}
# | output-location: fragment
df.columns = df.columns.str.replace(r"^ ", r"", regex=True)
```

. . .


```{python}
# | output-location: fragment
df.columns
```

# Replace special characters with REGEX

## Replace special characters


- Again, we use regular expressions to deal with special characters (like `-`, `%`, `&`, `$` etc.)

- Replace "`-`" with "`_`"

. . .

```{python}
# | output-location: fragment
df.columns = df.columns.str.replace(r"-", r"_", regex=True)

```

. . .

```{python}
# | output-location: fragment
df.columns
```

# Lowercase and whitespace

## Lowercase and whitespace


- We can use two simple methods to convert all columns to lowercase and replace white spaces with underscores ("_"):

- `.str.lower()`


- `.str.replace(' ', '_')`

. . .

```{python}
# | output-location: fragment
df.columns = df.columns.str.lower().str.replace(' ', '_')
```


. . .

```{python}
# | output-location: fragment
df.columns
```

