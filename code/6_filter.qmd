---
title: 'Filter, grouping and binning'
jupyter: python3
---



## Import pandas

```{python}
import pandas as pd
```

## Import data

```{python}
URL = "https://raw.githubusercontent.com/kirenz/datasets/master/height_clean_cols.csv"
df = pd.read_csv(URL)
```

## Filter 

Using a single column’s values to filter data (boolean indexing).

```{python}
df[df["height"] >= 167]
```

Combine filtering for two columns or more with `&` (and)

```{python}
df[(df["height"] >= 167) & (df["weight"] < 74)]
```

You can also combine filtering for two columns or more with `|` (or)

```{python}
df[(df["height"] >= 167) | (df["weight"] < 74)]
```

- Filter people with a weight greater as 84 and save it as `df_weight_greater_84`

```{python}
# | nbgrader: {grade: false, grade_id: weight, locked: false, schema_version: 3, solution: true, task: false}
# BEGIN SOLUTION
df_weight_greater_84 = df[df["weight"] > 84]
# END SOLUTION
```

```{python}
# | nbgrader: {grade: true, grade_id: c_weight, locked: true, points: 2, schema_version: 3, solution: false, task: false}
"""Check if your code returns the correct output"""
assert len(df_weight_greater_84) == 2
assert df_weight_greater_84.iloc[0, 0] == "Stefanie"
assert df_weight_greater_84.iloc[1, 0] == "Eric"
```

Always use the [isin()](https://pandas.pydata.org/docs/reference/api/pandas.Series.isin.html#pandas.Series.isin) method if you have multiple conditions within one column:

```{python}
df[df["name"].isin(["Tom", "Steven"])]
```

## Grouping

By “group by” we are referring to a process involving one or more of the following steps:

- **Splitting** the data into groups based on some criteria

- **Applying** a function to each group independently

- **Combining** the results into a data structure

Grouping and then applying the `mean()` function to the resulting groups. Furthermore, we round the results and transpose the data.

```{python}
df.groupby("gender").mean(numeric_only=True).round(2).T
```

## Segment data into bins

Use the function [cut](https://pandas.pydata.org/docs/reference/api/pandas.cut.html) when you need to segment and sort data values into bins. This function is also useful for going from a continuous variable to a categorical variable. 

In our example, we create a body mass index category. The standard weight status categories associated with BMI ranges for adults are shown in the following table:

BMI	| Weight Status
---| ---
Below 18.5 |	Underweight
18.5 - 24.9 |	Normal or Healthy Weight
25.0 - 29.9 |	Overweight
30.0 and Above |	Obese

Source: [U.S. Department of Health & Human Services](https://www.cdc.gov/healthyweight/assessing/bmi/adult_bmi/index.html)

In our function, we discretize the variable `bmi` into four bins according to the table above:

- The bins [0, 18.5, 25, 30, float('inf')] indicate (0,18.5], (18.5,25], (25,30], (30, float('inf))
- `float('inf')` is used for setting  variable with an infinitely large value

```{python}
df['bmi_category'] = pd.cut(df['bmi'],
                            bins=[0, 18.5, 25, 30, float('inf')],
                            labels=['underweight', 'normal', 'overweight', "obese"])
```

```{python}
df['bmi_category'].head(7)
```

Example of how to discretize into four equal-sized bins:

```{python}
df['bmi_category_2'] = pd.cut(df['bmi'],
                              bins=4,
                              labels=['group1', 'group2', 'group3', "group4"])
```

```{python}
df['bmi_category_2'].head(7)
```

Example of how to discretize into four equal-sized bins if you don't need labels

```{python}
df['bmi_category_3'] = pd.cut(df['bmi'],
                              bins=4,
                              labels=False)
```

```{python}
df['bmi_category_3'].head(7)
```

- Use the variable height to create a new variable called `height_category` with three bins and labels:

  - 0 to 165 (label it `group1`)
  - 166 to 167 (label it `group2`)
  - 168 and taller (label it `group3`)

```{python}
# | nbgrader: {grade: false, grade_id: cat, locked: false, schema_version: 3, solution: true, task: false}
# BEGIN SOLUTION
df['height_category'] = pd.cut(df['height'],
                               bins=[0, 165, 167, float('inf')],
                               labels=['group1', 'group2', 'group3'])
# END SOLUTION
```

```{python}
# | nbgrader: {grade: true, grade_id: c_cat, locked: true, points: 3, schema_version: 3, solution: false, task: false}
"""Check if your code returns the correct output"""
assert df['height_category'].value_counts().group1 == 13
assert df['height_category'].value_counts().group2 == 6
assert df['height_category'].value_counts().group3 == 1
```

