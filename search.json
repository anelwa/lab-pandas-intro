[
  {
    "objectID": "assignments.html",
    "href": "assignments.html",
    "title": "Assignments",
    "section": "",
    "text": "Download the Jupyter Notebooks in your local folder pandas-intro.\n\nTask 1: Import and store data\nTask 2: Change column names\nTask 3: Change data types and add columns\nTask 4: Calculate statistics and create plots\nTask 5: Select data\nTask 6: Filter, grouping and binning"
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Welcome üëã",
    "section": "",
    "text": "Lab: Pandas Introduction (üìÅ pandas-intro)\npandas is a powerful and easy to use open source data analysis and manipulation tool, built on top of the Python programming language.\n\n\n\n\n\n\nImportant\n\n\n\nMake sure you meet all the requirements and have read the lecture slides before you start with the assignments\n\n\nIn this lab you will learn how to use pandas to:\n\nImport and store data\nChange column names\nChange data types and add columns\nCalculate statistics and create plots\nSelect data\nFilter, group and bin data\nImport and prepare unclean Excel data"
  },
  {
    "objectID": "slides/pandas-statistics.html#mean",
    "href": "slides/pandas-statistics.html#mean",
    "title": "Statistics and Plots",
    "section": "Mean",
    "text": "Mean\n\nWe can calculate simple statistics like the mean\n\n\n\ndf['height'].mean()\n\n\n\n1.7766666666666666\n\n\n\n\n\ndf['height'].mean().round(2)\n\n\n\n1.78"
  },
  {
    "objectID": "slides/pandas-statistics.html#formatted-string-literals",
    "href": "slides/pandas-statistics.html#formatted-string-literals",
    "title": "Statistics and Plots",
    "section": "Formatted string literals",
    "text": "Formatted string literals\n\nPrint the value in nice format (using formatted string literals f‚Äù‚Ä¶‚Äú)\n\n\n\nprint(f\"The mean of height is {df['height'].mean():.2f}\")\n\n\n\nThe mean of height is 1.78"
  },
  {
    "objectID": "slides/pandas-statistics.html#median-and-standard-deviation",
    "href": "slides/pandas-statistics.html#median-and-standard-deviation",
    "title": "Statistics and Plots",
    "section": "Median and Standard Deviation",
    "text": "Median and Standard Deviation\n\ndf['height'].median()\n\n\n\n1.72\n\n\n\n\ndf['height'].std()\n\n\n\n0.13428824718989124"
  },
  {
    "objectID": "slides/pandas-statistics.html#describe",
    "href": "slides/pandas-statistics.html#describe",
    "title": "Statistics and Plots",
    "section": "Describe",
    "text": "Describe\n\ndescribe() shows a quick statistic summary of your numerical data.\n\n\n\ndf.describe()\n\n\n\n\n\n\n\n\n\n\nheight\nweight\nbmi\n\n\n\n\ncount\n3.000000\n3.000000\n3.000000\n\n\nmean\n1.776667\n74.133333\n23.240000\n\n\nstd\n0.134288\n22.460929\n5.704972\n\n\nmin\n1.680000\n48.400000\n17.150000\n\n\n25%\n1.700000\n66.300000\n20.630000\n\n\n50%\n1.720000\n84.200000\n24.110000\n\n\n75%\n1.825000\n87.000000\n26.285000\n\n\nmax\n1.930000\n89.800000\n28.460000"
  },
  {
    "objectID": "slides/pandas-statistics.html#describe-with-transpose",
    "href": "slides/pandas-statistics.html#describe-with-transpose",
    "title": "Statistics and Plots",
    "section": "Describe with transpose",
    "text": "Describe with transpose\n\ndf.describe().T.round(2)\n\n\n\n\n\n\n\n\n\n\ncount\nmean\nstd\nmin\n25%\n50%\n75%\nmax\n\n\n\n\nheight\n3.0\n1.78\n0.13\n1.68\n1.70\n1.72\n1.82\n1.93\n\n\nweight\n3.0\n74.13\n22.46\n48.40\n66.30\n84.20\n87.00\n89.80\n\n\nbmi\n3.0\n23.24\n5.70\n17.15\n20.63\n24.11\n26.28\n28.46"
  },
  {
    "objectID": "slides/pandas-statistics.html#describe-for-specific-columns-with-groupby",
    "href": "slides/pandas-statistics.html#describe-for-specific-columns-with-groupby",
    "title": "Statistics and Plots",
    "section": "Describe for specific columns with groupby",
    "text": "Describe for specific columns with groupby\n\nSummary statistics for numeric variables height and bmi for different levels of the categorical variable city:\n\n\n\ndf[['height', 'city']].groupby(['city']).describe().round(2).T\n\n\n\n\n\n\n\n\n\n\ncity\nBerlin\nStuttgart\n\n\n\n\nheight\ncount\n1.00\n2.00\n\n\nmean\n1.72\n1.80\n\n\nstd\nNaN\n0.18\n\n\nmin\n1.72\n1.68\n\n\n25%\n1.72\n1.74\n\n\n50%\n1.72\n1.80\n\n\n75%\n1.72\n1.87\n\n\nmax\n1.72\n1.93"
  },
  {
    "objectID": "slides/pandas-statistics.html#example",
    "href": "slides/pandas-statistics.html#example",
    "title": "Statistics and Plots",
    "section": "Example",
    "text": "Example\n\nwe can also use describe() for categorical data\n\n\n\ndf.describe(include=\"category\").T\n\n\n\n\n\n\n\n\n\n\ncount\nunique\ntop\nfreq\n\n\n\n\nname\n3\n3\nLisa\n1"
  },
  {
    "objectID": "slides/pandas-statistics.html#show-unique-levels",
    "href": "slides/pandas-statistics.html#show-unique-levels",
    "title": "Statistics and Plots",
    "section": "Show unique levels",
    "text": "Show unique levels\n\nShow unique levels of a categorical variable and count with value_counts()\n\n\n\ndf['city'].value_counts()\n\n\n\nStuttgart    2\nBerlin       1\nName: city, dtype: int64"
  },
  {
    "objectID": "slides/pandas-statistics.html#extract-specific-values",
    "href": "slides/pandas-statistics.html#extract-specific-values",
    "title": "Statistics and Plots",
    "section": "Extract specific values",
    "text": "Extract specific values\n\nWe also can extract specific values\n\n\ndf['city'].value_counts().Stuttgart\n\n\n\n2"
  },
  {
    "objectID": "slides/pandas-statistics.html#formatted-string-literals-1",
    "href": "slides/pandas-statistics.html#formatted-string-literals-1",
    "title": "Statistics and Plots",
    "section": "Formatted string literals",
    "text": "Formatted string literals\n\nPrint the value in nice format (using formatted string literals f‚Äù‚Ä¶‚Äú)\n\n\n\ncount_stuttgart = df['city'].value_counts().Stuttgart\n\nprint(f\"There are {count_stuttgart} people from Stuttgart in the data\")\n\n\n\nThere are 2 people from Stuttgart in the data"
  },
  {
    "objectID": "slides/pandas-statistics.html#statistics-for-specific-columns",
    "href": "slides/pandas-statistics.html#statistics-for-specific-columns",
    "title": "Statistics and Plots",
    "section": "Statistics for specific columns",
    "text": "Statistics for specific columns\n\nExample of for loop to obtain statistics for specific numerical columns\n\n\n\n# make a list of numerical columns\nlist_num = ['height', 'weight']\n\n\n\n\n# calculate median for our list and only show 4 digits, then make a new line (\\n)\nfor i in list_num:\n    print(f'Median of {i} equals {df[i].median():.4} \\n')\n\n\n\nMedian of height equals 1.72 \n\nMedian of weight equals 84.2"
  },
  {
    "objectID": "slides/pandas-statistics.html#summary-statistics",
    "href": "slides/pandas-statistics.html#summary-statistics",
    "title": "Statistics and Plots",
    "section": "Summary statistics",
    "text": "Summary statistics\n\nCalculate summary statistics for our list.\n\n\nfor i in list_num:\n    print(f'Column: {i}  \\n  {df[i].describe().round(2)}   \\n')   \n\n\n\nColumn: height  \n  count    3.00\nmean     1.78\nstd      0.13\nmin      1.68\n25%      1.70\n50%      1.72\n75%      1.82\nmax      1.93\nName: height, dtype: float64   \n\nColumn: weight  \n  count     3.00\nmean     74.13\nstd      22.46\nmin      48.40\n25%      66.30\n50%      84.20\n75%      87.00\nmax      89.80\nName: weight, dtype: float64"
  },
  {
    "objectID": "slides/pandas-statistics.html#setup-1",
    "href": "slides/pandas-statistics.html#setup-1",
    "title": "Statistics and Plots",
    "section": "Setup",
    "text": "Setup\n\n# Pandas needs the module matplotlib to create plots\nimport matplotlib.pyplot as plt\n\n# show plot output in Jupyter Notebook\n%matplotlib inline"
  },
  {
    "objectID": "slides/pandas-statistics.html#one-boxplot",
    "href": "slides/pandas-statistics.html#one-boxplot",
    "title": "Statistics and Plots",
    "section": "One boxplot",
    "text": "One boxplot\n\ndf.boxplot(column=['weight']);"
  },
  {
    "objectID": "slides/pandas-statistics.html#multiple-boxplots-with-loop",
    "href": "slides/pandas-statistics.html#multiple-boxplots-with-loop",
    "title": "Statistics and Plots",
    "section": "Multiple boxplots with loop",
    "text": "Multiple boxplots with loop\n\n# obtain plots for our list\nfor i in list_num:\n    df.boxplot(column=[i])\n    plt.title(\"Boxplot for \" + i)\n    plt.show()"
  },
  {
    "objectID": "slides/pandas-column-names.html#column-names-properties",
    "href": "slides/pandas-column-names.html#column-names-properties",
    "title": "Change Column Names",
    "section": "Column names properties",
    "text": "Column names properties\nUsually, we prefer to work with columns that have the following proporties:\n\nno leading or trailing whitespace (\"name\" instead of \" name \", \" name\" or \"name \")\nall lowercase (\"name\" instead of \"Name\")\nno white spaces (\"my_name\" instead of \"my name\")"
  },
  {
    "objectID": "slides/pandas-column-names.html#simple-rename-1",
    "href": "slides/pandas-column-names.html#simple-rename-1",
    "title": "Change Column Names",
    "section": "Simple rename",
    "text": "Simple rename\n\ndf.head()\n\n\n\n\n\n\n\n\n\n\nMY NEW-NAME\nheight\nweight\nid\ncity\n\n\n\n\n0\nTom\n1.68\n48.4\n1\nStuttgart\n\n\n1\nLisa\n1.93\n89.8\n2\nStuttgart\n\n\n2\nPeter\n1.72\n84.2\n3\nBerlin\n\n\n\n\n\n\n\n\n\ndf.columns\n\n\n\nIndex([' MY NEW-NAME', 'height', 'weight', 'id', 'city'], dtype='object')"
  },
  {
    "objectID": "slides/pandas-column-names.html#trailing-and-leading-spaces-with-regex",
    "href": "slides/pandas-column-names.html#trailing-and-leading-spaces-with-regex",
    "title": "Change Column Names",
    "section": "Trailing and leading spaces (with regex)",
    "text": "Trailing and leading spaces (with regex)\n\nWe use regular expressions to deal with whitespaces\nTo change multiple column names in df at once, we use the method df.columns = df.columns.str.replace()\nTo replace the spaces, we use .replace() with regex=True"
  },
  {
    "objectID": "slides/pandas-column-names.html#regular-expressions-table",
    "href": "slides/pandas-column-names.html#regular-expressions-table",
    "title": "Change Column Names",
    "section": "Regular expressions table",
    "text": "Regular expressions table\nExplanation for regex (see also Stackoverflow):\n\nwe start with r (for raw) which tells Python to treat all following input as raw text (without interpreting it)\n‚Äú^‚Äù: is line start\n‚Äù ‚Äú: is a white space\n‚Äú+‚Äù: some following characters\n‚Äú|‚Äù: is or\n‚Äú$‚Äù: is line end\n‚Äú‚Äú: is an empty string"
  },
  {
    "objectID": "slides/pandas-column-names.html#learn-more-about-regular-expressions",
    "href": "slides/pandas-column-names.html#learn-more-about-regular-expressions",
    "title": "Change Column Names",
    "section": "Learn more about regular expressions",
    "text": "Learn more about regular expressions\nTo learn more about regular expressions (‚Äúregex‚Äù), visit the following sites:\n\nregular expression basics.\ninteractive regular expressions tool"
  },
  {
    "objectID": "slides/pandas-column-names.html#trailing-and-leading-spaces-with-regex-1",
    "href": "slides/pandas-column-names.html#trailing-and-leading-spaces-with-regex-1",
    "title": "Change Column Names",
    "section": "Trailing and leading spaces (with regex)",
    "text": "Trailing and leading spaces (with regex)\n\nIn the following function, we search for leading spaces and replace them with an empty string:\n\n\n\ndf.columns = df.columns.str.replace(r\"^ \", r\"\", regex=True)\n\n\n\n\n\n\n\ndf.columns\n\n\n\nIndex(['MY NEW-NAME', 'height', 'weight', 'id', 'city'], dtype='object')"
  },
  {
    "objectID": "slides/pandas-column-names.html#replace-special-characters",
    "href": "slides/pandas-column-names.html#replace-special-characters",
    "title": "Change Column Names",
    "section": "Replace special characters",
    "text": "Replace special characters\n\nAgain, we use regular expressions to deal with special characters (like -, %, &, $ etc.)\nReplace ‚Äú-‚Äù with ‚Äú_‚Äù\n\n\n\ndf.columns = df.columns.str.replace(r\"-\", r\"_\", regex=True)\n\n\n\n\n\n\n\ndf.columns\n\n\n\nIndex(['MY NEW_NAME', 'height', 'weight', 'id', 'city'], dtype='object')"
  },
  {
    "objectID": "slides/pandas-column-names.html#lowercase-and-whitespace-1",
    "href": "slides/pandas-column-names.html#lowercase-and-whitespace-1",
    "title": "Change Column Names",
    "section": "Lowercase and whitespace",
    "text": "Lowercase and whitespace\n\nWe can use two simple methods to convert all columns to lowercase and replace white spaces with underscores (‚Äú_‚Äú):\n.str.lower()\n.str.replace(' ', '_')\n\n\n\ndf.columns = df.columns.str.lower().str.replace(' ', '_')\n\n\n\n\n\n\n\ndf.columns\n\n\n\nIndex(['my_new_name', 'height', 'weight', 'id', 'city'], dtype='object')"
  },
  {
    "objectID": "slides/pandas-import-store.html#create-a-dataframe",
    "href": "slides/pandas-import-store.html#create-a-dataframe",
    "title": "Import and Store data",
    "section": "Create a DataFrame",
    "text": "Create a DataFrame\n\nTo manually store data in a table, create a DataFrame:\n\n\ndf = pd.DataFrame({\n    'name': [\"Tom\", \"Lisa\", \"Peter\"],\n    'height': [1.68, 1.93, 1.72],\n    'weight': [48.4, 89.8, 84.2],\n    'id': [1, 2, 3],\n    'city': ['Stuttgart', 'Stuttgart', 'Berlin']\n})"
  },
  {
    "objectID": "slides/pandas-import-store.html#show-data-with-head",
    "href": "slides/pandas-import-store.html#show-data-with-head",
    "title": "Import and Store data",
    "section": "Show data with head()",
    "text": "Show data with head()\n\ndf.head()\n\n\n\n\n\n\n\n\n\n\nname\nheight\nweight\nid\ncity\n\n\n\n\n0\nTom\n1.68\n48.4\n1\nStuttgart\n\n\n1\nLisa\n1.93\n89.8\n2\nStuttgart\n\n\n2\nPeter\n1.72\n84.2\n3\nBerlin"
  },
  {
    "objectID": "slides/pandas-import-store.html#import-data-from-github",
    "href": "slides/pandas-import-store.html#import-data-from-github",
    "title": "Import and Store data",
    "section": "Import data from GitHub",
    "text": "Import data from GitHub\n\nImport a CSV file in a GitHub repo\n\n\n\nURL = \"https://raw.githubusercontent.com/kirenz/datasets/master/campaign.csv\"\n\ndf_github = pd.read_csv(URL, sep=\",\", decimal='.')\n\ndf_github.head()\n\n\n\n\n\n\n\n\n\n\nage\ncity\nincome\nmembership_days\ncampaign_engagement\ntarget\n\n\n\n\n0\n56\nBerlin\n136748\n837\n3\n1\n\n\n1\n46\nStuttgart\n25287\n615\n8\n0\n\n\n2\n32\nBerlin\n146593\n2100\n3\n0\n\n\n3\n60\nBerlin\n54387\n2544\n0\n0\n\n\n4\n25\nBerlin\n28512\n138\n6\n0"
  },
  {
    "objectID": "slides/pandas-import-store.html#data-overview",
    "href": "slides/pandas-import-store.html#data-overview",
    "title": "Import and Store data",
    "section": "Data overview",
    "text": "Data overview\n\ndf\n\n\n\n\n\n\n\n\n\n\nname\nheight\nweight\nid\ncity\n\n\n\n\n0\nTom\n1.68\n48.4\n1\nStuttgart\n\n\n1\nLisa\n1.93\n89.8\n2\nStuttgart\n\n\n2\nPeter\n1.72\n84.2\n3\nBerlin"
  },
  {
    "objectID": "slides/pandas-import-store.html#head-and-tail",
    "href": "slides/pandas-import-store.html#head-and-tail",
    "title": "Import and Store data",
    "section": "Head and tail",
    "text": "Head and tail\n\n# show first 2 rows\ndf.head(2)\n\n\n\n\n\n\n\n\n\n\nname\nheight\nweight\nid\ncity\n\n\n\n\n0\nTom\n1.68\n48.4\n1\nStuttgart\n\n\n1\nLisa\n1.93\n89.8\n2\nStuttgart\n\n\n\n\n\n\n\n\n\n# show last 2 rows\ndf.tail(2)\n\n\n\n\n\n\n\n\n\n\nname\nheight\nweight\nid\ncity\n\n\n\n\n1\nLisa\n1.93\n89.8\n2\nStuttgart\n\n\n2\nPeter\n1.72\n84.2\n3\nBerlin"
  },
  {
    "objectID": "slides/pandas-import-store.html#info",
    "href": "slides/pandas-import-store.html#info",
    "title": "Import and Store data",
    "section": "Info",
    "text": "Info\n\nThe info() method prints information about a DataFrame.\n\n\n\ndf.info()\n\n\n\n&lt;class 'pandas.core.frame.DataFrame'&gt;\nRangeIndex: 3 entries, 0 to 2\nData columns (total 5 columns):\n #   Column  Non-Null Count  Dtype  \n---  ------  --------------  -----  \n 0   name    3 non-null      object \n 1   height  3 non-null      float64\n 2   weight  3 non-null      float64\n 3   id      3 non-null      int64  \n 4   city    3 non-null      object \ndtypes: float64(2), int64(1), object(2)\nmemory usage: 252.0+ bytes"
  },
  {
    "objectID": "slides/pandas-import-store.html#show-column-names",
    "href": "slides/pandas-import-store.html#show-column-names",
    "title": "Import and Store data",
    "section": "Show column names",
    "text": "Show column names\n\ndf.columns\n\n\n\nIndex(['name', 'height', 'weight', 'id', 'city'], dtype='object')"
  },
  {
    "objectID": "slides/pandas-import-store.html#show-data-types",
    "href": "slides/pandas-import-store.html#show-data-types",
    "title": "Import and Store data",
    "section": "Show data types",
    "text": "Show data types\n\nShow data types (dtypes).\n\n\n\ndf.dtypes\n\n\n\nname       object\nheight    float64\nweight    float64\nid          int64\ncity       object\ndtype: object\n\n\n\nThe data types in this DataFrame are integers (int64), floats (float64) and strings (object)."
  },
  {
    "objectID": "slides/pandas-import-store.html#show-index",
    "href": "slides/pandas-import-store.html#show-index",
    "title": "Import and Store data",
    "section": "Show index",
    "text": "Show index\n\ndf.index\n\n\n\nRangeIndex(start=0, stop=3, step=1)"
  },
  {
    "objectID": "slides/pandas-read-excel.html#data-from-genesis-online",
    "href": "slides/pandas-read-excel.html#data-from-genesis-online",
    "title": "Import Unclean Excel Data",
    "section": "Data from GENESIS-Online",
    "text": "Data from GENESIS-Online\n\n\nGENESIS-Online is the main database of the Federal Statistical Office"
  },
  {
    "objectID": "slides/pandas-read-excel.html#genesis-online",
    "href": "slides/pandas-read-excel.html#genesis-online",
    "title": "Import Unclean Excel Data",
    "section": "GENESIS-Online",
    "text": "GENESIS-Online\n\nContains deeply structured results of official statistics.\nYou can use the database without registration.\nAll data are available free of charge.\nWe use this dataset as an example"
  },
  {
    "objectID": "slides/pandas-read-excel.html#first-data-import",
    "href": "slides/pandas-read-excel.html#first-data-import",
    "title": "Import Unclean Excel Data",
    "section": "First data import",
    "text": "First data import\nData source\n\ndf_unclean = pd.read_excel('12211-9014_de.xlsx', sheet_name='12211-9014')\n\n\n\nTake a look at the data\n\n\ndf_unclean"
  },
  {
    "objectID": "slides/pandas-read-excel.html#first-data-import-output",
    "href": "slides/pandas-read-excel.html#first-data-import-output",
    "title": "Import Unclean Excel Data",
    "section": "First data import",
    "text": "First data import\n\n\n\n\n\n\n\n\nBev√∂lkerung (ab 15 Jahren): Bundesl√§nder, Jahre (bis 2019),\\nGeschlecht, Allgemeine Schulausbildung\nUnnamed: 1\nUnnamed: 2\nUnnamed: 3\nUnnamed: 4\nUnnamed: 5\nUnnamed: 6\nUnnamed: 7\nUnnamed: 8\nUnnamed: 9\nUnnamed: 10\n\n\n\n\n0\nMikrozensus\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\n\n\n1\nBev√∂lkerung (ab 15 Jahren) (1000)\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\n\n\n2\nJahr\\nGeschlecht\\nBundesl√§nder\nNaN\nNaN\nAllgemeine Schulausbildung\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\n\n\n3\nNaN\nNaN\nNaN\nNoch in schulischer Ausbildung\nHaupt- (Volks-)schulabschluss\nAbschluss der polytechnischen Oberschule\nRealschule oder gleichwertiger Abschluss\nFachhochschul- oder Hochschulreife\nOhne Angabe zur Art des Abschlusses\nOhne allgemeinen Schulabschluss\nInsgesamt\n\n\n4\n2019\nm√§nnlich\nBaden-W√ºrttemberg\n168\n1512\n37\n1023\n1723\n11\n191\n4674\n\n\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n\n\n67\nZensus 2011.\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\n\n\n68\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\n\n\n69\nAb 2017:\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\n\n\n70\nOhne Bev√∂lkerung in Gemeinschaftsunterk√ºnften.\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\n\n\n71\n¬© Statistisches Bundesamt (Destatis), 2023 | S...\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\n\n\n\n\n72 rows √ó 11 columns"
  },
  {
    "objectID": "slides/pandas-read-excel.html#inspect-footer",
    "href": "slides/pandas-read-excel.html#inspect-footer",
    "title": "Import Unclean Excel Data",
    "section": "Inspect footer",
    "text": "Inspect footer\n\ndf_unclean.tail(25)\n\n\n\n\n\n\n\n\n\n\nBev√∂lkerung (ab 15 Jahren): Bundesl√§nder, Jahre (bis 2019),\\nGeschlecht, Allgemeine Schulausbildung\nUnnamed: 1\nUnnamed: 2\nUnnamed: 3\nUnnamed: 4\nUnnamed: 5\nUnnamed: 6\nUnnamed: 7\nUnnamed: 8\nUnnamed: 9\nUnnamed: 10\n\n\n\n\n47\nNaN\nNaN\nSaarland\n26\n337\n/\n185\n264\n/\n35\n853\n\n\n48\nNaN\nNaN\nSachsen\n96\n589\n1090\n658\n968\n/\n67\n3470\n\n\n49\nNaN\nNaN\nSachsen-Anhalt\n53\n273\n760\n316\n427\n5\n50\n1892\n\n\n50\nNaN\nNaN\nSchleswig-Holstein\n93\n741\n21\n736\n772\n8\n86\n2471\n\n\n51\nNaN\nNaN\nTh√ºringen\n52\n283\n723\n282\n463\n/\n28\n1833\n\n\n52\n______________\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\n\n\n53\nOhne allgemeinen Schulabschluss:\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\n\n\n54\nEinschlie√ülich Personen mit Abschluss nach h√∂c...\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\n\n\n55\nJahren Schulbesuch.\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\n\n\n56\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\n\n\n57\nAllgemeine Schulausbildung \"Insgesamt\":\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\n\n\n58\nEinschlie√ülich Personen, die keine Angaben zur\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\n\n\n59\nallgemeinen Schulausbildung gemacht haben.\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\n\n\n60\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\n\n\n61\nAb 2013:\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\n\n\n62\nHochrechnung anhand der Bev√∂lkerungsfortschrei...\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\n\n\n63\nBasis des Zensus 2011.\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\n\n\n64\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\n\n\n65\nAb 2016:\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\n\n\n66\nAktualisierte Auswahlgrundlage der Stichprobe ...\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\n\n\n67\nZensus 2011.\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\n\n\n68\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\n\n\n69\nAb 2017:\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\n\n\n70\nOhne Bev√∂lkerung in Gemeinschaftsunterk√ºnften.\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\n\n\n71\n¬© Statistisches Bundesamt (Destatis), 2023 | S...\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN"
  },
  {
    "objectID": "slides/pandas-read-excel.html#adjusted-data-import",
    "href": "slides/pandas-read-excel.html#adjusted-data-import",
    "title": "Import Unclean Excel Data",
    "section": "Adjusted data import",
    "text": "Adjusted data import\n\ndf = pd.read_excel('12211-9014_de.xlsx', \n  sheet_name='12211-9014', \n  skiprows=[0,1,2,3], \n  skipfooter=20, \n  na_values='/', \n  thousands='.', \n  decimal=','\n  )"
  },
  {
    "objectID": "slides/pandas-read-excel.html#view-data",
    "href": "slides/pandas-read-excel.html#view-data",
    "title": "Import Unclean Excel Data",
    "section": "View data",
    "text": "View data\n\ndf.head()\n\n\n\n\n\n\n\n\n\n\nUnnamed: 0\nUnnamed: 1\nUnnamed: 2\nNoch in schulischer Ausbildung\nHaupt- (Volks-)schulabschluss\nAbschluss der polytechnischen Oberschule\nRealschule oder gleichwertiger Abschluss\nFachhochschul- oder Hochschulreife\nOhne Angabe zur Art des Abschlusses\nOhne allgemeinen Schulabschluss\nInsgesamt\n\n\n\n\n0\n2019.0\nm√§nnlich\nBaden-W√ºrttemberg\n168\n1512\n37.0\n1023\n1723\n11.0\n191\n4674\n\n\n1\nNaN\nNaN\nBayern\n175\n2142\n49.0\n1129\n1828\n16.0\n153\n5507\n\n\n2\nNaN\nNaN\nBerlin\n55\n205\n130.0\n284\n765\nNaN\n72\n1511\n\n\n3\nNaN\nNaN\nBrandenburg\n35\n118\n349.0\n193\n325\nNaN\n31\n1052\n\n\n4\nNaN\nNaN\nBremen\n11\n74\nNaN\n67\n115\nNaN\n20\n290\n\n\n\n\n\n\n\n\ndf.tail()\n\n\n\n\n\n\n\n\n\n\nUnnamed: 0\nUnnamed: 1\nUnnamed: 2\nNoch in schulischer Ausbildung\nHaupt- (Volks-)schulabschluss\nAbschluss der polytechnischen Oberschule\nRealschule oder gleichwertiger Abschluss\nFachhochschul- oder Hochschulreife\nOhne Angabe zur Art des Abschlusses\nOhne allgemeinen Schulabschluss\nInsgesamt\n\n\n\n\n43\nNaN\nNaN\nSaarland\n26\n337\nNaN\n185\n264\nNaN\n35\n853\n\n\n44\nNaN\nNaN\nSachsen\n96\n589\n1090.0\n658\n968\nNaN\n67\n3470\n\n\n45\nNaN\nNaN\nSachsen-Anhalt\n53\n273\n760.0\n316\n427\n5.0\n50\n1892\n\n\n46\nNaN\nNaN\nSchleswig-Holstein\n93\n741\n21.0\n736\n772\n8.0\n86\n2471\n\n\n47\nNaN\nNaN\nTh√ºringen\n52\n283\n723.0\n282\n463\nNaN\n28\n1833"
  },
  {
    "objectID": "slides/pandas-read-excel.html#rename-columns",
    "href": "slides/pandas-read-excel.html#rename-columns",
    "title": "Import Unclean Excel Data",
    "section": "Rename columns",
    "text": "Rename columns\n\ndf = df.rename(columns={\n  'Unnamed: 0': 'Jahr',\n  'Unnamed: 1': 'Geschlecht',\n  'Unnamed: 2': 'Bundesland' }\n  )\n\ndf.head()\n\n\n\n\n\n\n\n\n\n\nJahr\nGeschlecht\nBundesland\nNoch in schulischer Ausbildung\nHaupt- (Volks-)schulabschluss\nAbschluss der polytechnischen Oberschule\nRealschule oder gleichwertiger Abschluss\nFachhochschul- oder Hochschulreife\nOhne Angabe zur Art des Abschlusses\nOhne allgemeinen Schulabschluss\nInsgesamt\n\n\n\n\n0\n2019.0\nm√§nnlich\nBaden-W√ºrttemberg\n168\n1512\n37.0\n1023\n1723\n11.0\n191\n4674\n\n\n1\nNaN\nNaN\nBayern\n175\n2142\n49.0\n1129\n1828\n16.0\n153\n5507\n\n\n2\nNaN\nNaN\nBerlin\n55\n205\n130.0\n284\n765\nNaN\n72\n1511\n\n\n3\nNaN\nNaN\nBrandenburg\n35\n118\n349.0\n193\n325\nNaN\n31\n1052\n\n\n4\nNaN\nNaN\nBremen\n11\n74\nNaN\n67\n115\nNaN\n20\n290"
  },
  {
    "objectID": "slides/pandas-read-excel.html#fill-up-columns",
    "href": "slides/pandas-read-excel.html#fill-up-columns",
    "title": "Import Unclean Excel Data",
    "section": "Fill up columns",
    "text": "Fill up columns\n\ndf['Jahr'] = 2019\n\n\n\ndf['Geschlecht'] = df['Geschlecht'].fillna(method='ffill')\n\ndf.head()\n\n\n\n\n\n\n\n\n\n\nJahr\nGeschlecht\nBundesland\nNoch in schulischer Ausbildung\nHaupt- (Volks-)schulabschluss\nAbschluss der polytechnischen Oberschule\nRealschule oder gleichwertiger Abschluss\nFachhochschul- oder Hochschulreife\nOhne Angabe zur Art des Abschlusses\nOhne allgemeinen Schulabschluss\nInsgesamt\n\n\n\n\n0\n2019\nm√§nnlich\nBaden-W√ºrttemberg\n168\n1512\n37.0\n1023\n1723\n11.0\n191\n4674\n\n\n1\n2019\nm√§nnlich\nBayern\n175\n2142\n49.0\n1129\n1828\n16.0\n153\n5507\n\n\n2\n2019\nm√§nnlich\nBerlin\n55\n205\n130.0\n284\n765\nNaN\n72\n1511\n\n\n3\n2019\nm√§nnlich\nBrandenburg\n35\n118\n349.0\n193\n325\nNaN\n31\n1052\n\n\n4\n2019\nm√§nnlich\nBremen\n11\n74\nNaN\n67\n115\nNaN\n20\n290"
  },
  {
    "objectID": "slides/pandas-read-excel.html#data-format",
    "href": "slides/pandas-read-excel.html#data-format",
    "title": "Import Unclean Excel Data",
    "section": "Data format",
    "text": "Data format\n\ndf.info()\n\n\n\n&lt;class 'pandas.core.frame.DataFrame'&gt;\nRangeIndex: 48 entries, 0 to 47\nData columns (total 11 columns):\n #   Column                                    Non-Null Count  Dtype  \n---  ------                                    --------------  -----  \n 0   Jahr                                      48 non-null     int64  \n 1   Geschlecht                                48 non-null     object \n 2   Bundesland                                48 non-null     object \n 3   Noch in schulischer Ausbildung            48 non-null     int64  \n 4   Haupt- (Volks-)schulabschluss             48 non-null     int64  \n 5   Abschluss der polytechnischen Oberschule  42 non-null     float64\n 6   Realschule oder gleichwertiger Abschluss  48 non-null     int64  \n 7   Fachhochschul- oder Hochschulreife        48 non-null     int64  \n 8   Ohne Angabe zur Art des Abschlusses       16 non-null     float64\n 9   Ohne allgemeinen Schulabschluss           48 non-null     int64  \n 10  Insgesamt                                 48 non-null     int64  \ndtypes: float64(2), int64(7), object(2)\nmemory usage: 4.3+ KB"
  },
  {
    "objectID": "slides/pandas-read-excel.html#convert-categorical-data",
    "href": "slides/pandas-read-excel.html#convert-categorical-data",
    "title": "Import Unclean Excel Data",
    "section": "Convert categorical data",
    "text": "Convert categorical data\n\nLIST_CAT = df.columns[1:3].tolist()\nLIST_CAT\n\n\n\n['Geschlecht', 'Bundesland']\n\n\n\n\nfor i in LIST_CAT:\n  df[i] = df[i].astype('category')"
  },
  {
    "objectID": "slides/pandas-read-excel.html#convert-numerical-data",
    "href": "slides/pandas-read-excel.html#convert-numerical-data",
    "title": "Import Unclean Excel Data",
    "section": "Convert numerical data",
    "text": "Convert numerical data\n\nLIST_INT = df.columns[3:].tolist()\nLIST_INT\n\n['Noch in schulischer Ausbildung',\n 'Haupt- (Volks-)schulabschluss',\n 'Abschluss der polytechnischen Oberschule',\n 'Realschule oder gleichwertiger Abschluss',\n 'Fachhochschul- oder Hochschulreife',\n 'Ohne Angabe zur Art des Abschlusses',\n 'Ohne allgemeinen Schulabschluss',\n 'Insgesamt']\n\n\n\n\nfor i in LIST_INT:\n  df[i] = df[i].astype('Int64')"
  },
  {
    "objectID": "slides/pandas-read-excel.html#take-a-look-at-the-data",
    "href": "slides/pandas-read-excel.html#take-a-look-at-the-data",
    "title": "Import Unclean Excel Data",
    "section": "Take a look at the data",
    "text": "Take a look at the data\n\ndf\n\n\n\n\n\n\n\n\n\n\nJahr\nGeschlecht\nBundesland\nNoch in schulischer Ausbildung\nHaupt- (Volks-)schulabschluss\nAbschluss der polytechnischen Oberschule\nRealschule oder gleichwertiger Abschluss\nFachhochschul- oder Hochschulreife\nOhne Angabe zur Art des Abschlusses\nOhne allgemeinen Schulabschluss\nInsgesamt\n\n\n\n\n0\n2019\nm√§nnlich\nBaden-W√ºrttemberg\n168\n1512\n37\n1023\n1723\n11\n191\n4674\n\n\n1\n2019\nm√§nnlich\nBayern\n175\n2142\n49\n1129\n1828\n16\n153\n5507\n\n\n2\n2019\nm√§nnlich\nBerlin\n55\n205\n130\n284\n765\n&lt;NA&gt;\n72\n1511\n\n\n3\n2019\nm√§nnlich\nBrandenburg\n35\n118\n349\n193\n325\n&lt;NA&gt;\n31\n1052\n\n\n4\n2019\nm√§nnlich\nBremen\n11\n74\n&lt;NA&gt;\n67\n115\n&lt;NA&gt;\n20\n290\n\n\n5\n2019\nm√§nnlich\nHamburg\n32\n149\n6\n153\n361\n5\n49\n763\n\n\n6\n2019\nm√§nnlich\nHessen\n103\n722\n24\n621\n1029\n&lt;NA&gt;\n118\n2623\n\n\n7\n2019\nm√§nnlich\nMecklenburg-Vorpommern\n19\n93\n248\n123\n172\n&lt;NA&gt;\n21\n677\n\n\n8\n2019\nm√§nnlich\nNiedersachsen\n120\n1022\n35\n949\n1073\n7\n126\n3338\n\n\n9\n2019\nm√§nnlich\nNordrhein-Westfalen\n311\n2389\n42\n1515\n2752\n12\n405\n7430\n\n\n10\n2019\nm√§nnlich\nRheinland-Pfalz\n61\n626\n11\n374\n569\n&lt;NA&gt;\n68\n1713\n\n\n11\n2019\nm√§nnlich\nSaarland\n13\n166\n&lt;NA&gt;\n85\n136\n&lt;NA&gt;\n17\n420\n\n\n12\n2019\nm√§nnlich\nSachsen\n47\n257\n528\n334\n499\n&lt;NA&gt;\n37\n1703\n\n\n13\n2019\nm√§nnlich\nSachsen-Anhalt\n28\n126\n364\n163\n214\n&lt;NA&gt;\n26\n928\n\n\n14\n2019\nm√§nnlich\nSchleswig-Holstein\n46\n373\n9\n326\n394\n&lt;NA&gt;\n45\n1205\n\n\n15\n2019\nm√§nnlich\nTh√ºringen\n26\n130\n352\n150\n232\n&lt;NA&gt;\n16\n907\n\n\n16\n2019\nweiblich\nBaden-W√ºrttemberg\n171\n1431\n41\n1356\n1531\n7\n205\n4757\n\n\n17\n2019\nweiblich\nBayern\n166\n2070\n60\n1545\n1614\n10\n157\n5638\n\n\n18\n2019\nweiblich\nBerlin\n48\n210\n151\n323\n778\n&lt;NA&gt;\n76\n1587\n\n\n19\n2019\nweiblich\nBrandenburg\n35\n139\n380\n185\n328\n&lt;NA&gt;\n25\n1092\n\n\n20\n2019\nweiblich\nBremen\n11\n70\n&lt;NA&gt;\n83\n109\n&lt;NA&gt;\n20\n295\n\n\n21\n2019\nweiblich\nHamburg\n27\n154\n6\n192\n362\n&lt;NA&gt;\n49\n804\n\n\n22\n2019\nweiblich\nHessen\n105\n716\n25\n794\n941\n&lt;NA&gt;\n128\n2714\n\n\n23\n2019\nweiblich\nMecklenburg-Vorpommern\n19\n93\n275\n123\n170\n&lt;NA&gt;\n19\n700\n\n\n24\n2019\nweiblich\nNiedersachsen\n125\n1019\n43\n1109\n986\n&lt;NA&gt;\n137\n3428\n\n\n25\n2019\nweiblich\nNordrhein-Westfalen\n318\n2413\n56\n1839\n2704\n5\n453\n7791\n\n\n26\n2019\nweiblich\nRheinland-Pfalz\n66\n609\n13\n477\n527\n&lt;NA&gt;\n67\n1763\n\n\n27\n2019\nweiblich\nSaarland\n13\n171\n&lt;NA&gt;\n100\n128\n&lt;NA&gt;\n18\n434\n\n\n28\n2019\nweiblich\nSachsen\n49\n333\n562\n324\n468\n&lt;NA&gt;\n30\n1767\n\n\n29\n2019\nweiblich\nSachsen-Anhalt\n25\n147\n395\n153\n214\n&lt;NA&gt;\n24\n964\n\n\n30\n2019\nweiblich\nSchleswig-Holstein\n48\n367\n11\n409\n379\n&lt;NA&gt;\n41\n1267\n\n\n31\n2019\nweiblich\nTh√ºringen\n26\n153\n371\n132\n231\n&lt;NA&gt;\n13\n927\n\n\n32\n2019\nInsgesamt\nBaden-W√ºrttemberg\n339\n2943\n79\n2379\n3254\n17\n395\n9431\n\n\n33\n2019\nInsgesamt\nBayern\n342\n4212\n109\n2674\n3442\n26\n310\n11146\n\n\n34\n2019\nInsgesamt\nBerlin\n103\n415\n281\n607\n1543\n&lt;NA&gt;\n147\n3098\n\n\n35\n2019\nInsgesamt\nBrandenburg\n70\n258\n728\n378\n653\n&lt;NA&gt;\n55\n2144\n\n\n36\n2019\nInsgesamt\nBremen\n21\n145\n&lt;NA&gt;\n150\n224\n&lt;NA&gt;\n40\n585\n\n\n37\n2019\nInsgesamt\nHamburg\n58\n302\n12\n345\n724\n9\n98\n1567\n\n\n38\n2019\nInsgesamt\nHessen\n208\n1438\n50\n1415\n1969\n6\n247\n5337\n\n\n39\n2019\nInsgesamt\nMecklenburg-Vorpommern\n38\n186\n523\n246\n342\n&lt;NA&gt;\n41\n1377\n\n\n40\n2019\nInsgesamt\nNiedersachsen\n245\n2041\n78\n2058\n2059\n11\n263\n6766\n\n\n41\n2019\nInsgesamt\nNordrhein-Westfalen\n629\n4802\n98\n3354\n5456\n17\n858\n15221\n\n\n42\n2019\nInsgesamt\nRheinland-Pfalz\n127\n1235\n24\n851\n1097\n&lt;NA&gt;\n135\n3476\n\n\n43\n2019\nInsgesamt\nSaarland\n26\n337\n&lt;NA&gt;\n185\n264\n&lt;NA&gt;\n35\n853\n\n\n44\n2019\nInsgesamt\nSachsen\n96\n589\n1090\n658\n968\n&lt;NA&gt;\n67\n3470\n\n\n45\n2019\nInsgesamt\nSachsen-Anhalt\n53\n273\n760\n316\n427\n5\n50\n1892\n\n\n46\n2019\nInsgesamt\nSchleswig-Holstein\n93\n741\n21\n736\n772\n8\n86\n2471\n\n\n47\n2019\nInsgesamt\nTh√ºringen\n52\n283\n723\n282\n463\n&lt;NA&gt;\n28\n1833"
  },
  {
    "objectID": "slides/pandas-read-excel.html#create-new-dataframe",
    "href": "slides/pandas-read-excel.html#create-new-dataframe",
    "title": "Import Unclean Excel Data",
    "section": "Create new dataframe",
    "text": "Create new dataframe\n\nLet‚Äôs assume we only want to keep the total number and don‚Äôt need to differentiate between sex\n\n\n\ndf_total = df[df['Geschlecht'] == 'Insgesamt']\ndf_total.head()\n\n\n\n\n\n\n\n\n\n\nJahr\nGeschlecht\nBundesland\nNoch in schulischer Ausbildung\nHaupt- (Volks-)schulabschluss\nAbschluss der polytechnischen Oberschule\nRealschule oder gleichwertiger Abschluss\nFachhochschul- oder Hochschulreife\nOhne Angabe zur Art des Abschlusses\nOhne allgemeinen Schulabschluss\nInsgesamt\n\n\n\n\n32\n2019\nInsgesamt\nBaden-W√ºrttemberg\n339\n2943\n79\n2379\n3254\n17\n395\n9431\n\n\n33\n2019\nInsgesamt\nBayern\n342\n4212\n109\n2674\n3442\n26\n310\n11146\n\n\n34\n2019\nInsgesamt\nBerlin\n103\n415\n281\n607\n1543\n&lt;NA&gt;\n147\n3098\n\n\n35\n2019\nInsgesamt\nBrandenburg\n70\n258\n728\n378\n653\n&lt;NA&gt;\n55\n2144\n\n\n36\n2019\nInsgesamt\nBremen\n21\n145\n&lt;NA&gt;\n150\n224\n&lt;NA&gt;\n40\n585"
  },
  {
    "objectID": "slides/pandas-read-excel.html#save-new-dataframe",
    "href": "slides/pandas-read-excel.html#save-new-dataframe",
    "title": "Import Unclean Excel Data",
    "section": "Save new dataframe",
    "text": "Save new dataframe\n\nWe can drop the variable ‚ÄúGeschlecht‚Äù\n\n\n\ndf_total = df_total.drop(columns=['Geschlecht'])\n\n\nSave data\n\n\n\n\ndf_total.to_excel('12211-9014_de_clean.xlsx', index=False)"
  },
  {
    "objectID": "code/6_filter.html",
    "href": "code/6_filter.html",
    "title": "Filter, grouping and binning",
    "section": "",
    "text": "Wichtige Hinweise\nNAME = \"\"\nimport IPython\nassert IPython.version_info[0] &gt;= 3, \"Your version of IPython is too old, please update it.\""
  },
  {
    "objectID": "code/6_filter.html#import-pandas",
    "href": "code/6_filter.html#import-pandas",
    "title": "Filter, grouping and binning",
    "section": "Import pandas",
    "text": "Import pandas\n\nimport pandas as pd"
  },
  {
    "objectID": "code/6_filter.html#import-data",
    "href": "code/6_filter.html#import-data",
    "title": "Filter, grouping and binning",
    "section": "Import data",
    "text": "Import data\n\nURL = \"https://raw.githubusercontent.com/kirenz/datasets/master/height_clean_cols.csv\"\ndf = pd.read_csv(URL)"
  },
  {
    "objectID": "code/6_filter.html#filter",
    "href": "code/6_filter.html#filter",
    "title": "Filter, grouping and binning",
    "section": "Filter",
    "text": "Filter\nUsing a single column‚Äôs values to filter data (boolean indexing).\n\ndf[df[\"height\"] &gt;= 167]\n\nCombine filtering for two columns or more with & (and)\n\ndf[(df[\"height\"] &gt;= 167) & (df[\"weight\"] &lt; 74) ]\n\nYou can also combine filtering for two columns or more with | (or)\n\ndf[(df[\"height\"] &gt;= 167) | (df[\"weight\"] &lt; 74) ]\n\n\nFilter people with a weight greater as 84 and save it as df_weight_greater_84\n\n\n# YOUR CODE HERE\nraise NotImplementedError()\n\n\n\"\"\"Check if your code returns the correct output\"\"\"\nassert len(df_weight_greater_84) == 2\nassert df_weight_greater_84.iloc[0, 0] == \"Stefanie\"\nassert df_weight_greater_84.iloc[1, 0] == \"Eric\"\n\nAlways use the isin() method if you have multiple conditions within one column:\n\ndf[df[\"name\"].isin([\"Tom\", \"Steven\"])]"
  },
  {
    "objectID": "code/6_filter.html#grouping",
    "href": "code/6_filter.html#grouping",
    "title": "Filter, grouping and binning",
    "section": "Grouping",
    "text": "Grouping\nBy ‚Äúgroup by‚Äù we are referring to a process involving one or more of the following steps:\n\nSplitting the data into groups based on some criteria\nApplying a function to each group independently\nCombining the results into a data structure\n\nGrouping and then applying the mean() function to the resulting groups. Furthermore, we round the results and transpose the data.\n\ndf.groupby(\"gender\").mean(numeric_only=True).round(2).T"
  },
  {
    "objectID": "code/6_filter.html#segment-data-into-bins",
    "href": "code/6_filter.html#segment-data-into-bins",
    "title": "Filter, grouping and binning",
    "section": "Segment data into bins",
    "text": "Segment data into bins\nUse the function cut when you need to segment and sort data values into bins. This function is also useful for going from a continuous variable to a categorical variable.\nIn our example, we create a body mass index category. The standard weight status categories associated with BMI ranges for adults are shown in the following table:\n\n\n\nBMI\nWeight Status\n\n\n\n\nBelow 18.5\nUnderweight\n\n\n18.5 - 24.9\nNormal or Healthy Weight\n\n\n25.0 - 29.9\nOverweight\n\n\n30.0 and Above\nObese\n\n\n\nSource: U.S. Department of Health & Human Services\nIn our function, we discretize the variable bmi into four bins according to the table above:\n\nThe bins [0, 18.5, 25, 30, float(‚Äòinf‚Äô)] indicate (0,18.5], (18.5,25], (25,30], (30, float(‚Äôinf))\nfloat('inf') is used for setting variable with an infinitely large value\n\n\ndf['bmi_category'] = pd.cut(df['bmi'], \n                            bins=[0, 18.5, 25, 30, float('inf')], \n                            labels=['underweight', 'normal', 'overweight', \"obese\"])\n\n\ndf['bmi_category'].head(7)\n\nExample of how to discretize into four equal-sized bins:\n\ndf['bmi_category_2'] = pd.cut(df['bmi'], \n                            bins=4, \n                            labels=['group1', 'group2', 'group3', \"group4\"])\n\n\ndf['bmi_category_2'].head(7)\n\n\ndf['bmi_category_3'] = pd.cut(df['bmi'], \n                            bins=4, \n                            labels=False)\n\n\ndf['bmi_category_3'].head(7)\n\n\n# YOUR CODE HERE\nraise NotImplementedError()\n\n\n\"\"\"Check if your code returns the correct output\"\"\"\nassert df['height_category'].value_counts().group1 == 13\nassert df['height_category'].value_counts().group2 == 6\nassert df['height_category'].value_counts().group3 == 1"
  },
  {
    "objectID": "code/4_statistics.html",
    "href": "code/4_statistics.html",
    "title": "Statistics and plots",
    "section": "",
    "text": "Wichtige Hinweise\nNAME = \"\"\nimport IPython\nassert IPython.version_info[0] &gt;= 3, \"Your version of IPython is too old, please update it.\""
  },
  {
    "objectID": "code/4_statistics.html#import-pandas",
    "href": "code/4_statistics.html#import-pandas",
    "title": "Statistics and plots",
    "section": "Import pandas",
    "text": "Import pandas\n\nimport pandas as pd"
  },
  {
    "objectID": "code/4_statistics.html#import-data",
    "href": "code/4_statistics.html#import-data",
    "title": "Statistics and plots",
    "section": "Import data",
    "text": "Import data\n\nURL = \"https://raw.githubusercontent.com/kirenz/datasets/master/height_clean_cols.csv\"\n\ndf = pd.read_csv(URL)\ndf[\"gender\"] = df[\"gender\"].astype(\"category\")\ndf['id'] = df['id'].astype(str)\n\ndf.head()\n\n\ndf.info()"
  },
  {
    "objectID": "code/4_statistics.html#statistics",
    "href": "code/4_statistics.html#statistics",
    "title": "Statistics and plots",
    "section": "Statistics",
    "text": "Statistics\n\nNumeric data\n\nWe can calculate simple statistics like mean, median, standard deviation etc.\n\n\ndf['height'].mean()\n\n\nPrint the value in nice format (using formatted string literals f‚Äù‚Ä¶‚Äú)\n\n\nprint(f\"The mean of height is {df['height'].mean()}\")\n\n\ndf['height'].median()\n\n\ndf['height'].std()\n\n\n# round the value\ndf['height'].std().round(2)\n\n\ndescribe() shows a quick statistic summary of your numerical data.\nWe transpose the data (with .T) to make it more readable:\n\n\ndf.describe().T.round(2)\n\nSummary statistics for numeric variables height and bmi for different levels of the categorical variable gender:\n\ndf[['height', 'bmi', 'gender']].groupby(['gender']).describe().round(2).T\n\n\nObtain summary statistics for average_height_parents grouped by the categorical variable gender and save the result as stats. Transpose the data.\n\nHint:\nstats = ___[['___', '___']].groupby(['___']).___().round(2).T\n\n# YOUR CODE HERE\nraise NotImplementedError()\n\n\n\"\"\"Check if your code returns the correct output\"\"\"\nassert len(stats) == 8\nassert stats.columns.to_list() == ['female', 'male']\n\n\n\nCategorical data\n\nwe can also use describe() for categorical data\n\n\ndf.describe(include=\"category\").T\n\n\nShow unique levels of a categorical variable and count with value_counts()\n\n\ndf['gender'].value_counts()\n\n\nWe also can extract specific values\n\n\nmen = df['gender'].value_counts().male\nmen\n\n\nPrint the value in nice format (using formatted string literals f‚Äù‚Ä¶‚Äú)\n\n\nprint(f\"There are {men} men in the data\")\n\n\nUse the same method as above to calculate and print the value for women (create a variable called women)\n\nHint:\n___ = ___['___'].___().___\nprint(___\"There are {___} women in the data\")\n\n# YOUR CODE HERE\nraise NotImplementedError()\n\n\n\"\"\"Check if your code returns the correct output\"\"\"\nassert women == 11\n\n\n\nLoop over list\n\nExample of for loop to obtain statistics for specific numerical columns\n\n\n# make a list of numerical columns\nlist_num = ['height', 'weight']\n\n\n# calculate median for our list and only show 4 digits, then make a new line (\\n)\nfor i in list_num:\n    print(f'Median of {i} equals {df[i].median():.4} \\n')\n\n\nfor i in list_num:\n    print(f'Column: {i}  \\n  {df[i].describe().T.round(2)}   \\n')   \n\n\n# Pandas needs the module matplotlib to create plots\nimport matplotlib.pyplot as plt\n\n# show plot output in Jupyter Notebook\n%matplotlib inline\n\n\ndf.boxplot(column=['weight']);\n\n\n# obtain plots for our list\nfor i in list_num:\n    df.boxplot(column=[i])\n    plt.title(\"Boxplot for \" + i)\n    plt.show()"
  },
  {
    "objectID": "code/pandas-column-names.html",
    "href": "code/pandas-column-names.html",
    "title": "Setup",
    "section": "",
    "text": "import pandas as pd\n\ndf = pd.DataFrame({\n    'name': [\"Tom\", \"Lisa\", \"Peter\"],\n    'height': [1.68, 1.93, 1.72],\n    'weight': [48.4, 89.8, 84.2],\n    'id': [1, 2, 3],\n    'city': ['Stuttgart', 'Stuttgart', 'Berlin']\n})"
  },
  {
    "objectID": "code/pandas-column-names.html#column-names-properties",
    "href": "code/pandas-column-names.html#column-names-properties",
    "title": "Setup",
    "section": "Column names properties",
    "text": "Column names properties\nUsually, we prefer to work with columns that have the following proporties:\n\nno leading or trailing whitespace (\"name\" instead of \" name \", \" name\" or \"name \")\nall lowercase (\"name\" instead of \"Name\")\nno white spaces (\"my_name\" instead of \"my name\")"
  },
  {
    "objectID": "code/pandas-column-names.html#simple-rename-1",
    "href": "code/pandas-column-names.html#simple-rename-1",
    "title": "Setup",
    "section": "Simple rename",
    "text": "Simple rename\n\ndf.head()\n\n\ndf.columns"
  },
  {
    "objectID": "code/pandas-column-names.html#trailing-and-leading-spaces-with-regex",
    "href": "code/pandas-column-names.html#trailing-and-leading-spaces-with-regex",
    "title": "Setup",
    "section": "Trailing and leading spaces (with regex)",
    "text": "Trailing and leading spaces (with regex)\n\nWe use regular expressions to deal with whitespaces\nTo change multiple column names in df at once, we use the method df.columns = df.columns.str.replace()\nTo replace the spaces, we use .replace() with regex=True"
  },
  {
    "objectID": "code/pandas-column-names.html#regular-expressions-table",
    "href": "code/pandas-column-names.html#regular-expressions-table",
    "title": "Setup",
    "section": "Regular expressions table",
    "text": "Regular expressions table\nExplanation for regex (see also Stackoverflow):\n\nwe start with r (for raw) which tells Python to treat all following input as raw text (without interpreting it)\n‚Äú^‚Äù: is line start\n‚Äù ‚Äú: is a white space\n‚Äú+‚Äù: some following characters\n‚Äú|‚Äù: is or\n‚Äú$‚Äù: is line end\n‚Äú‚Äú: is an empty string"
  },
  {
    "objectID": "code/pandas-column-names.html#learn-more-about-regular-expressions",
    "href": "code/pandas-column-names.html#learn-more-about-regular-expressions",
    "title": "Setup",
    "section": "Learn more about regular expressions",
    "text": "Learn more about regular expressions\nTo learn more about regular expressions (‚Äúregex‚Äù), visit the following sites:\n\nregular expression basics.\ninteractive regular expressions tool"
  },
  {
    "objectID": "code/pandas-column-names.html#trailing-and-leading-spaces-with-regex-1",
    "href": "code/pandas-column-names.html#trailing-and-leading-spaces-with-regex-1",
    "title": "Setup",
    "section": "Trailing and leading spaces (with regex)",
    "text": "Trailing and leading spaces (with regex)\n\nIn the following function, we search for leading spaces and replace them with an empty string:\n\n\ndf.columns = df.columns.str.replace(r\"^ \", r\"\", regex=True)\n\n\ndf.columns"
  },
  {
    "objectID": "code/pandas-column-names.html#replace-special-characters",
    "href": "code/pandas-column-names.html#replace-special-characters",
    "title": "Setup",
    "section": "Replace special characters",
    "text": "Replace special characters\n\nAgain, we use regular expressions to deal with special characters (like -, %, &, $ etc.)\nReplace ‚Äú-‚Äù with ‚Äú_‚Äù\n\n\ndf.columns = df.columns.str.replace(r\"-\", r\"_\", regex=True)\n\n\ndf.columns"
  },
  {
    "objectID": "code/pandas-column-names.html#lowercase-and-whitespace-1",
    "href": "code/pandas-column-names.html#lowercase-and-whitespace-1",
    "title": "Setup",
    "section": "Lowercase and whitespace",
    "text": "Lowercase and whitespace\n\nWe can use two simple methods to convert all columns to lowercase and replace white spaces with underscores (‚Äú_‚Äú):\n.str.lower()\n.str.replace(' ', '_')\n\n\ndf.columns = df.columns.str.lower().str.replace(' ', '_')\n\n\ndf.columns"
  },
  {
    "objectID": "code/1_import_store.html",
    "href": "code/1_import_store.html",
    "title": "Import and store data",
    "section": "",
    "text": "Wichtige Hinweise\nNAME = \"\"\nimport IPython\nassert IPython.version_info[0] &gt;= 3, \"Your version of IPython is too old, please update it.\""
  },
  {
    "objectID": "code/1_import_store.html#import-pandas",
    "href": "code/1_import_store.html#import-pandas",
    "title": "Import and store data",
    "section": "Import pandas",
    "text": "Import pandas\n\nTo load the pandas package and start working with it, import the package.\nThe community agreed alias for pandas is pd, so loading pandas as pd is assumed standard practice for all of the pandas documentation:\n\n\nimport pandas as pd"
  },
  {
    "objectID": "code/1_import_store.html#data-creation",
    "href": "code/1_import_store.html#data-creation",
    "title": "Import and store data",
    "section": "Data creation",
    "text": "Data creation\n\nTo manually store data in a table, create a DataFrame:\ncreate the DataFrame and name it my_df\nadd the variable ‚Äúgender‚Äù with the following observations: male, female and male\n\nHint:\nmy_df = pd.DataFrame(\n    { \n        'name': [ \"Tom\", \"Lisa\", \"Peter\"],\n        'height': [1.68, 1.93, 1.72],\n        'weight': [48.4, 89.8, 84.2]\n         ______     ________\n        }\n)\n\n# YOUR CODE HERE\nraise NotImplementedError()\n\n\n\"\"\"Check that your code returns the correct output\"\"\"\nassert my_df.iloc[0, 0] == \"Tom\"\nassert my_df.iloc[0, 3] == \"male\"\nassert my_df.iloc[1, 3] == \"female\""
  },
  {
    "objectID": "code/1_import_store.html#import-data",
    "href": "code/1_import_store.html#import-data",
    "title": "Import and store data",
    "section": "Import data",
    "text": "Import data\n\nPandas supports many different file formats or data sources out of the box (csv, excel, sql, json, parquet, ‚Ä¶). Each of them import data with the prefix read_*\n\nNext, we import data, available as a CSV file in a GitHub repo\n\nImportant notes: The CSV file has a typical european format with\n\n; as seperators between cells (instead of the Pandas default ,)\n, as number decimal seperator (instead of the Pandas default .)\n\nWe need to take care of this issues.\nHint\ndf = pd.___(sep=';', decimal=',')\n\n# URL of data\nURL = \"https://raw.githubusercontent.com/kirenz/datasets/master/height_unclean.csv\"\n\n\n# YOUR CODE HERE\nraise NotImplementedError()\n\n\n\"\"\"Check that your code returns the correct output\"\"\"\nassert df.iloc[0, 0] == 'Stefanie'\nassert df.iloc[0, 3] == 161.5\n\nNow we do the same import with a different approach. Use the name df2\nHint:\nROOT = \"https://raw.githubusercontent.com/kirenz/datasets/master/\"\nDATA = \"___\"\n\ndf2 = pd.read_csv(___ + ___, sep=\";\", decimal=',' )\n\n# show head of the data\ndf2.head()\n\n# YOUR CODE HERE\nraise NotImplementedError()\n\n\n\"\"\"Check that your code returns the correct output\"\"\"\nassert df2.iloc[0, 0] == 'Stefanie'\nassert df2.iloc[0, 3] == 161.5"
  },
  {
    "objectID": "code/1_import_store.html#store-data",
    "href": "code/1_import_store.html#store-data",
    "title": "Import and store data",
    "section": "Store data",
    "text": "Store data\nPandas supports many different file formats (csv, excel, sql, json, parquet, ‚Ä¶). Each of them stores data with the prefix to_*\n\nThe following code should save the data df as an Excel file in your current directory.\nIn the example here, the sheet_name is named people_height instead of the default Sheet1.\nBy setting index=False the row index labels are not saved in the spreadsheet:\n\n\ndf.to_excel(\"height.xlsx\", sheet_name=\"people_height\", index=False)\n\n\nThe equivalent read function read_excel() would reload the data to a DataFrame:\n\n\n# load excel file\ndf_xlsx = pd.read_excel(\"height.xlsx\", sheet_name=\"people_height\")"
  },
  {
    "objectID": "code/1_import_store.html#viewing-data",
    "href": "code/1_import_store.html#viewing-data",
    "title": "Import and store data",
    "section": "Viewing data",
    "text": "Viewing data\n\nOverview\n\n# show df\ndf\n\n\n# show first 2 rows\ndf.head(2)\n\n\n# show last 2 rows\ndf.tail(2)\n\n\nThe info() method prints information about a DataFrame including the index dtype and columns, non-null values and memory usage:\n\n\ndf.info()\n\n\n\nColumn names\n\n# Show columns\ndf.columns\n\n\n\nData type\n\nShow data types (dtypes).\n\n\ndf.dtypes\n\n\n# Only show index\ndf.index"
  },
  {
    "objectID": "code/pandas-read-excel.html",
    "href": "code/pandas-read-excel.html",
    "title": "Import unclean Excel data",
    "section": "",
    "text": "GENESIS-Online is the main database of the Federal Statistical Office"
  },
  {
    "objectID": "code/pandas-read-excel.html#data-from-genesis-online",
    "href": "code/pandas-read-excel.html#data-from-genesis-online",
    "title": "Import unclean Excel data",
    "section": "",
    "text": "GENESIS-Online is the main database of the Federal Statistical Office"
  },
  {
    "objectID": "code/pandas-read-excel.html#genesis-online",
    "href": "code/pandas-read-excel.html#genesis-online",
    "title": "Import unclean Excel data",
    "section": "GENESIS-Online",
    "text": "GENESIS-Online\n\nContains deeply structured results of official statistics.\nYou can use the database without registration.\nAll data are available free of charge.\nWe use this dataset as an example"
  },
  {
    "objectID": "code/pandas-read-excel.html#first-data-import",
    "href": "code/pandas-read-excel.html#first-data-import",
    "title": "Import unclean Excel data",
    "section": "First data import",
    "text": "First data import\nData source\n\ndf_unclean = pd.read_excel('12211-9014_de.xlsx', sheet_name='12211-9014')\n\n\nTake a look at the data\n\n\ndf_unclean"
  },
  {
    "objectID": "code/pandas-read-excel.html#inspect-footer",
    "href": "code/pandas-read-excel.html#inspect-footer",
    "title": "Import unclean Excel data",
    "section": "Inspect footer",
    "text": "Inspect footer\n\ndf_unclean.tail(25)"
  },
  {
    "objectID": "code/pandas-read-excel.html#adjusted-data-import",
    "href": "code/pandas-read-excel.html#adjusted-data-import",
    "title": "Import unclean Excel data",
    "section": "Adjusted data import",
    "text": "Adjusted data import\n\ndf = pd.read_excel('12211-9014_de.xlsx', \n  sheet_name='12211-9014', \n  skiprows=[0,1,2,3], \n  skipfooter=20, \n  na_values='/', \n  thousands='.', \n  decimal=','\n  )"
  },
  {
    "objectID": "code/pandas-read-excel.html#view-data",
    "href": "code/pandas-read-excel.html#view-data",
    "title": "Import unclean Excel data",
    "section": "View data",
    "text": "View data\n\ndf.head()\n\n\ndf.tail()"
  },
  {
    "objectID": "code/pandas-read-excel.html#rename-columns",
    "href": "code/pandas-read-excel.html#rename-columns",
    "title": "Import unclean Excel data",
    "section": "Rename columns",
    "text": "Rename columns\n\ndf = df.rename(columns={\n  'Unnamed: 0': 'Jahr',\n  'Unnamed: 1': 'Geschlecht',\n  'Unnamed: 2': 'Bundesland' }\n  )\n\ndf.head()"
  },
  {
    "objectID": "code/pandas-read-excel.html#fill-up-columns",
    "href": "code/pandas-read-excel.html#fill-up-columns",
    "title": "Import unclean Excel data",
    "section": "Fill up columns",
    "text": "Fill up columns\n\ndf['Jahr'] = 2019\n\n\ndf['Geschlecht'] = df['Geschlecht'].fillna(method='ffill')\n\ndf.head()"
  },
  {
    "objectID": "code/pandas-read-excel.html#data-format",
    "href": "code/pandas-read-excel.html#data-format",
    "title": "Import unclean Excel data",
    "section": "Data format",
    "text": "Data format\n\ndf.info()"
  },
  {
    "objectID": "code/pandas-read-excel.html#convert-categorical-data",
    "href": "code/pandas-read-excel.html#convert-categorical-data",
    "title": "Import unclean Excel data",
    "section": "Convert categorical data",
    "text": "Convert categorical data\n\nLIST_CAT = df.columns[1:3].tolist()\nLIST_CAT\n\n\nfor i in LIST_CAT:\n  df[i] = df[i].astype('category')"
  },
  {
    "objectID": "code/pandas-read-excel.html#convert-numerical-data",
    "href": "code/pandas-read-excel.html#convert-numerical-data",
    "title": "Import unclean Excel data",
    "section": "Convert numerical data",
    "text": "Convert numerical data\n\nLIST_INT = df.columns[3:].tolist()\nLIST_INT\n\n\nfor i in LIST_INT:\n  df[i] = df[i].astype('Int64')"
  },
  {
    "objectID": "code/pandas-read-excel.html#take-a-look-at-the-data",
    "href": "code/pandas-read-excel.html#take-a-look-at-the-data",
    "title": "Import unclean Excel data",
    "section": "Take a look at the data",
    "text": "Take a look at the data\n\ndf"
  },
  {
    "objectID": "code/pandas-read-excel.html#create-new-dataframe",
    "href": "code/pandas-read-excel.html#create-new-dataframe",
    "title": "Import unclean Excel data",
    "section": "Create new dataframe",
    "text": "Create new dataframe\n\nLet‚Äôs assume we only want to keep the total number and don‚Äôt need to differentiate between sex\n\n\ndf_total = df[df['Geschlecht'] == 'Insgesamt']\ndf_total.head()"
  },
  {
    "objectID": "code/pandas-read-excel.html#save-new-dataframe",
    "href": "code/pandas-read-excel.html#save-new-dataframe",
    "title": "Import unclean Excel data",
    "section": "Save new dataframe",
    "text": "Save new dataframe\n\nWe can drop the variable ‚ÄúGeschlecht‚Äù\n\n\ndf_total = df_total.drop(columns=['Geschlecht'])\n\n\nSave data\n\n\ndf_total.to_excel('12211-9014_de_clean.xlsx', index=False)"
  },
  {
    "objectID": "code/pandas-statistics.html",
    "href": "code/pandas-statistics.html",
    "title": "Setup",
    "section": "",
    "text": "import pandas as pd\n\ndf = pd.DataFrame({\n    'name': [\"Tom\", \"Lisa\", \"Peter\"],\n    'height': [1.68, 1.93, 1.72],\n    'weight': [48.4, 89.8, 84.2],\n    'id': [1, 2, 3],\n    'city': ['Stuttgart', 'Stuttgart', 'Berlin']\n})\n\ndf['bmi'] = round(df['weight'] / (df['height'] * df['height']), 2)\ndf[\"name\"] = df[\"name\"].astype(\"category\")\ndf['id'] = df['id'].astype(str)"
  },
  {
    "objectID": "code/pandas-statistics.html#mean",
    "href": "code/pandas-statistics.html#mean",
    "title": "Setup",
    "section": "Mean",
    "text": "Mean\n\nWe can calculate simple statistics like the mean\n\n\ndf['height'].mean()\n\n\ndf['height'].mean().round(2)"
  },
  {
    "objectID": "code/pandas-statistics.html#formatted-string-literals",
    "href": "code/pandas-statistics.html#formatted-string-literals",
    "title": "Setup",
    "section": "Formatted string literals",
    "text": "Formatted string literals\n\nPrint the value in nice format (using formatted string literals f‚Äù‚Ä¶‚Äú)\n\n\nprint(f\"The mean of height is {df['height'].mean():.2f}\")"
  },
  {
    "objectID": "code/pandas-statistics.html#median-and-standard-deviation",
    "href": "code/pandas-statistics.html#median-and-standard-deviation",
    "title": "Setup",
    "section": "Median and Standard Deviation",
    "text": "Median and Standard Deviation\n\ndf['height'].median()\n\n\ndf['height'].std()"
  },
  {
    "objectID": "code/pandas-statistics.html#describe",
    "href": "code/pandas-statistics.html#describe",
    "title": "Setup",
    "section": "Describe",
    "text": "Describe\n\ndescribe() shows a quick statistic summary of your numerical data.\n\n\ndf.describe()"
  },
  {
    "objectID": "code/pandas-statistics.html#describe-with-transpose",
    "href": "code/pandas-statistics.html#describe-with-transpose",
    "title": "Setup",
    "section": "Describe with transpose",
    "text": "Describe with transpose\n\ndf.describe().T.round(2)"
  },
  {
    "objectID": "code/pandas-statistics.html#describe-for-specific-columns-with-groupby",
    "href": "code/pandas-statistics.html#describe-for-specific-columns-with-groupby",
    "title": "Setup",
    "section": "Describe for specific columns with groupby",
    "text": "Describe for specific columns with groupby\n\nSummary statistics for numeric variables height and bmi for different levels of the categorical variable city:\n\n\ndf[['height', 'city']].groupby(['city']).describe().round(2).T"
  },
  {
    "objectID": "code/pandas-statistics.html#example",
    "href": "code/pandas-statistics.html#example",
    "title": "Setup",
    "section": "Example",
    "text": "Example\n\nwe can also use describe() for categorical data\n\n\ndf.describe(include=\"category\").T"
  },
  {
    "objectID": "code/pandas-statistics.html#show-unique-levels",
    "href": "code/pandas-statistics.html#show-unique-levels",
    "title": "Setup",
    "section": "Show unique levels",
    "text": "Show unique levels\n\nShow unique levels of a categorical variable and count with value_counts()\n\n\ndf['city'].value_counts()"
  },
  {
    "objectID": "code/pandas-statistics.html#extract-specific-values",
    "href": "code/pandas-statistics.html#extract-specific-values",
    "title": "Setup",
    "section": "Extract specific values",
    "text": "Extract specific values\n\nWe also can extract specific values\n\n\ndf['city'].value_counts().Stuttgart"
  },
  {
    "objectID": "code/pandas-statistics.html#formatted-string-literals-1",
    "href": "code/pandas-statistics.html#formatted-string-literals-1",
    "title": "Setup",
    "section": "Formatted string literals",
    "text": "Formatted string literals\n\nPrint the value in nice format (using formatted string literals f‚Äù‚Ä¶‚Äú)\n\n\ncount_stuttgart = df['city'].value_counts().Stuttgart\n\nprint(f\"There are {count_stuttgart} people from Stuttgart in the data\")"
  },
  {
    "objectID": "code/pandas-statistics.html#statistics-for-specific-columns",
    "href": "code/pandas-statistics.html#statistics-for-specific-columns",
    "title": "Setup",
    "section": "Statistics for specific columns",
    "text": "Statistics for specific columns\n\nExample of for loop to obtain statistics for specific numerical columns\n\n\n# make a list of numerical columns\nlist_num = ['height', 'weight']\n\n\n# calculate median for our list and only show 4 digits, then make a new line (\\n)\nfor i in list_num:\n    print(f'Median of {i} equals {df[i].median():.4} \\n')"
  },
  {
    "objectID": "code/pandas-statistics.html#summary-statistics",
    "href": "code/pandas-statistics.html#summary-statistics",
    "title": "Setup",
    "section": "Summary statistics",
    "text": "Summary statistics\n\nCalculate summary statistics for our list.\n\n\nfor i in list_num:\n    print(f'Column: {i}  \\n  {df[i].describe().round(2)}   \\n')"
  },
  {
    "objectID": "code/pandas-statistics.html#setup",
    "href": "code/pandas-statistics.html#setup",
    "title": "Setup",
    "section": "Setup",
    "text": "Setup\n\n# Pandas needs the module matplotlib to create plots\nimport matplotlib.pyplot as plt\n\n# show plot output in Jupyter Notebook\n%matplotlib inline"
  },
  {
    "objectID": "code/pandas-statistics.html#one-boxplot",
    "href": "code/pandas-statistics.html#one-boxplot",
    "title": "Setup",
    "section": "One boxplot",
    "text": "One boxplot\n\ndf.boxplot(column=['weight']);"
  },
  {
    "objectID": "code/pandas-statistics.html#multiple-boxplots-with-loop",
    "href": "code/pandas-statistics.html#multiple-boxplots-with-loop",
    "title": "Setup",
    "section": "Multiple boxplots with loop",
    "text": "Multiple boxplots with loop\n\n# obtain plots for our list\nfor i in list_num:\n    df.boxplot(column=[i])\n    plt.title(\"Boxplot for \" + i)\n    plt.show()"
  },
  {
    "objectID": "code/2_columns.html",
    "href": "code/2_columns.html",
    "title": "Change column names",
    "section": "",
    "text": "Wichtige Hinweise\nNAME = \"\"\nimport IPython\nassert IPython.version_info[0] &gt;= 3, \"Your version of IPython is too old, please update it.\""
  },
  {
    "objectID": "code/2_columns.html#import-pandas",
    "href": "code/2_columns.html#import-pandas",
    "title": "Change column names",
    "section": "Import pandas",
    "text": "Import pandas\n\nTo load the pandas package and start working with it, import the package.\nThe community agreed alias for pandas is pd, so loading pandas as pd is assumed standard practice for all of the pandas documentation:\n\n\nimport pandas as pd"
  },
  {
    "objectID": "code/2_columns.html#import-data",
    "href": "code/2_columns.html#import-data",
    "title": "Change column names",
    "section": "Import data",
    "text": "Import data\n\n# URL of data\nURL = \"https://raw.githubusercontent.com/kirenz/datasets/master/height_unclean.csv\"\ndf = pd.read_csv(URL, sep=\";\", decimal=',')\ndf"
  },
  {
    "objectID": "code/2_columns.html#change-column-names",
    "href": "code/2_columns.html#change-column-names",
    "title": "Change column names",
    "section": "Change column names",
    "text": "Change column names\nUsually, we prefer to work with columns that have the following proporties:\n\nno leading or trailing whitespace (\"name\" instead of \" name \", \" name\" or \"name \")\nall lowercase (\"name\" instead of \"Name\")\nnow white spaces (\"my_name\" instead of \"my name\")\n\n\nSimple rename\n\nFirst, we rename columns by simply using a mapping\nWe rename \"Name\" to \"name\" (we want to display errors and don‚Äôt save the changes for now).\n\nHint:\ndf = df.rename(columns={\"OLD_NAME\": \"NEW_NAME\"}, errors=\"raise\")\n\n# YOUR CODE HERE\nraise NotImplementedError()\n\n\n\"\"\"Check if your code returns the correct output\"\"\"\nassert df.loc[0, 'name'] == \"Stefanie\"\n\n\ndf.head(2)\n\n\nLet`s rename Gender to gender\nHere, we just want to display the result (without saving it).\nRemove the # and run the following code:\n\n\n# df.rename(columns={\"Gender\": \"gender\"}, errors=\"raise\")\n\n\nThis raises an error.\nCan you spot the problem? Take a look at the end of the error statement and describe the type of error. How could you fix the problem?\n\nYOUR ANSWER HERE\n\n\nTrailing and leading spaces (with regex)\n\nWe use regular expressions to deal with whitespaces\nTo change multiple column names in df at once, we use the method df.columns = df.columns.str___\nTo replace the spaces, we use .replace() with regex=True\nIn the following function, we search for leading (line start and spaces) and trailing (line end and spaces) spaces and replace them with an empty string:\n\nHint:\nreplace r‚Äùthis pattern‚Äù with empty string r‚Äù‚Äù\ndf.columns = df.columns.str.replace(r\"___ | ___\", r\"\", regex=True)\nExplanation for regex (see also Stackoverflow):\n\nwe start with r (for raw) which tells Python to treat all following input as raw text (without interpreting it)\n‚Äú^‚Äù: is line start\n‚Äù ‚Äú: is a white space\n‚Äú+‚Äù: some following characters\n‚Äú|‚Äù: is or\n‚Äú$‚Äù: is line end\n‚Äú‚Äú: is an empty string\n\nTo learn more about regular expressions (‚Äúregex‚Äù), visit the following sites:\n\nregular expression basics.\ninteractive regular expressions tool\n\n\n# YOUR CODE HERE\nraise NotImplementedError()\n\n\n\"\"\"Check if your code returns the correct output\"\"\"\nassert df.columns.tolist() == ['name', 'ID%', 'Height', 'Average Height Parents', 'Gender']\n\n\ndf.columns\n\n\n\nReplace special characters\n\nAgain, we use regular expressions to deal with special characters (like %, &, $ etc.)\n\nReplace ‚Äú%‚Äù with an empty string\nHint:\ndf.___ = df.columns.str.___(r\"___\", r\"\", regex=True)\n\n# YOUR CODE HERE\nraise NotImplementedError()\n\n\n\"\"\"Check if your code returns the correct output\"\"\"\nassert df.columns.tolist() == ['name', 'ID', 'Height', 'Average Height Parents', 'Gender']\n\n\ndf.columns\n\n\n# YOUR CODE HERE\nraise NotImplementedError()\n\n\n\"\"\"Check if your code returns the correct output\"\"\"\nassert df.columns.tolist() == ['name', 'id', 'height', 'average_height_parents', 'gender']\n\n\ndf.columns"
  },
  {
    "objectID": "code/pandas-data-types.html",
    "href": "code/pandas-data-types.html",
    "title": "Setup",
    "section": "",
    "text": "from datetime import datetime\nimport pandas as pd\n\ndf = pd.DataFrame({\n    'name': [\"Tom\", \"Lisa\", \"Peter\"],\n    'height': [1.68, 1.93, 1.72],\n    'weight': [48.4, 89.8, 84.2],\n    'id': [1, 2, 3],\n    'city': ['Stuttgart', 'Stuttgart', 'Berlin']\n})"
  },
  {
    "objectID": "code/pandas-data-types.html#data-types-with-.dtypes",
    "href": "code/pandas-data-types.html#data-types-with-.dtypes",
    "title": "Setup",
    "section": "Data Types with .dtypes",
    "text": "Data Types with .dtypes\n\ndf.dtypes"
  },
  {
    "objectID": "code/pandas-data-types.html#data-types-with-.info",
    "href": "code/pandas-data-types.html#data-types-with-.info",
    "title": "Setup",
    "section": "Data Types with .info()",
    "text": "Data Types with .info()\n\ndf.info()"
  },
  {
    "objectID": "code/pandas-data-types.html#standard-methods",
    "href": "code/pandas-data-types.html#standard-methods",
    "title": "Setup",
    "section": "Standard methods",
    "text": "Standard methods\n\nThere are several methods to change data types in pandas:\nThe most common method to change the data type is:\n.astype(): Convert to a specific type (like ‚Äúint32‚Äù, ‚Äúfloat‚Äù or ‚Äúcatgeory‚Äù)\n.astype(str): Convert to string"
  },
  {
    "objectID": "code/pandas-data-types.html#more-options",
    "href": "code/pandas-data-types.html#more-options",
    "title": "Setup",
    "section": "More options",
    "text": "More options\n\nto_datetime: Convert argument to datetime.\nto_timedelta: Convert argument to timedelta.\nto_numeric: Convert argument to a numeric type."
  },
  {
    "objectID": "code/pandas-data-types.html#what-is-categorical-data",
    "href": "code/pandas-data-types.html#what-is-categorical-data",
    "title": "Setup",
    "section": "What is categorical data?",
    "text": "What is categorical data?\n\nCategoricals are a pandas data type corresponding to categorical variables in statistics.\nA categorical variable takes on a limited, and usually fixed, number of possible values (categories).\nExamples are gender, social class, blood type, country affiliation, observation time or rating via Likert scales."
  },
  {
    "objectID": "code/pandas-data-types.html#convert-to-categorical-data",
    "href": "code/pandas-data-types.html#convert-to-categorical-data",
    "title": "Setup",
    "section": "Convert to categorical data",
    "text": "Convert to categorical data\n\nConvert variable ‚Äúname‚Äù to a category dtype:\n\n\ndf[\"name\"] = df[\"name\"].astype(\"category\")\n\n\ndf.info()"
  },
  {
    "objectID": "code/pandas-data-types.html#string-data",
    "href": "code/pandas-data-types.html#string-data",
    "title": "Setup",
    "section": "String data",
    "text": "String data\n\nIn our example, id is not a number (we can‚Äôt perform calculations with it)\nIt is just a unique identifier so we should transform it to a simple string (object)\n\n\ndf['id'] = df['id'].astype(str)\n\n\ndf.info()"
  },
  {
    "objectID": "code/pandas-data-types.html#add-a-constant-number",
    "href": "code/pandas-data-types.html#add-a-constant-number",
    "title": "Setup",
    "section": "Add a constant number",
    "text": "Add a constant number\n\nAdd a new variable called ‚Äúnumber‚Äù to df\nThe new variable should have the number 42 in all rows\n\n\ndf[\"number\"] = 42\n\n\ndf.head()"
  },
  {
    "objectID": "code/pandas-data-types.html#add-from-existing-columns",
    "href": "code/pandas-data-types.html#add-from-existing-columns",
    "title": "Setup",
    "section": "Add from existing columns",
    "text": "Add from existing columns\n\nCreate new columns from existing columns\n\n\n# calculate body mass index\ndf['bmi'] = round(df['weight'] / (df['height'] * df['height']), 2)\n\n\ndf"
  },
  {
    "objectID": "code/pandas-data-types.html#add-a-date-with-strftime",
    "href": "code/pandas-data-types.html#add-a-date-with-strftime",
    "title": "Setup",
    "section": "Add a date with strftime",
    "text": "Add a date with strftime\n\nTo add a date, we can use datetime and strftime (see code examples on the next slides):\n\n\ndf[\"date\"] = datetime.today().strftime('%Y-%m-%d')\n\n\ndf.head(3)"
  },
  {
    "objectID": "code/pandas-select.html",
    "href": "code/pandas-select.html",
    "title": "Setup",
    "section": "",
    "text": "import pandas as pd\n\ndf = pd.DataFrame({\n    'name': [\"Tom\", \"Lisa\", \"Peter\"],\n    'height': [1.68, 1.93, 1.72],\n    'weight': [48.4, 89.8, 84.2],\n    'id': [1, 2, 3],\n    'city': ['Stuttgart', 'Stuttgart', 'Berlin']\n})\n\ndf['bmi'] = round(df['weight'] / (df['height'] * df['height']), 2)\ndf[\"name\"] = df[\"name\"].astype(\"category\")\ndf['id'] = df['id'].astype(str)"
  },
  {
    "objectID": "code/pandas-select.html#getting-columns-with",
    "href": "code/pandas-select.html#getting-columns-with",
    "title": "Setup",
    "section": "Getting columns with [[]]",
    "text": "Getting columns with [[]]\n\nSelecting a single column with [[]]:\nSelect the column city and save it as a new Pandas dataframe df_city\n\n\ndf_city = df[[\"city\"]]\n\n\ndf_city"
  },
  {
    "objectID": "code/pandas-select.html#selecting-rows-with",
    "href": "code/pandas-select.html#selecting-rows-with",
    "title": "Setup",
    "section": "Selecting rows with []",
    "text": "Selecting rows with []\n\nSelecting via [] slices the rows (endpoint is not included) and includes all columns:\n\n\ndf[0:2]"
  },
  {
    "objectID": "code/pandas-select.html#only-the-first-row",
    "href": "code/pandas-select.html#only-the-first-row",
    "title": "Setup",
    "section": "Only the first row",
    "text": "Only the first row\n\ndf.loc[[0]]"
  },
  {
    "objectID": "code/pandas-select.html#one-row-and-one-column",
    "href": "code/pandas-select.html#one-row-and-one-column",
    "title": "Setup",
    "section": "One row and one column",
    "text": "One row and one column\n\nOnly select location at row 0 for column ‚Äúname‚Äù\n\n\ndf.loc[0, 'name']"
  },
  {
    "objectID": "code/pandas-select.html#multiple-rows-and-one-column",
    "href": "code/pandas-select.html#multiple-rows-and-one-column",
    "title": "Setup",
    "section": "Multiple rows and one column",
    "text": "Multiple rows and one column\n\nSelect row 2 to 4 for column ‚Äúname‚Äù (when using .loc endpoints are included)\n\n\ndf.loc[2:4, 'name']"
  },
  {
    "objectID": "code/pandas-select.html#multiple-rows-and-multiple-columns",
    "href": "code/pandas-select.html#multiple-rows-and-multiple-columns",
    "title": "Setup",
    "section": "Multiple rows and multiple columns",
    "text": "Multiple rows and multiple columns\n\nSelect row 2 to 4 for columns ‚Äúname‚Äù and ‚Äúheight‚Äù (when using .loc endpoints are included)\n\n\ndf.loc[2:4, ['name', 'height']]"
  },
  {
    "objectID": "code/pandas-select.html#all-rows-and-multiple-columns",
    "href": "code/pandas-select.html#all-rows-and-multiple-columns",
    "title": "Setup",
    "section": "All rows and multiple columns",
    "text": "All rows and multiple columns\n\nSelect all rows for name and height\n\n\ndf.loc[:, [\"name\", \"height\"]]"
  },
  {
    "objectID": "code/pandas-select.html#scalar-value",
    "href": "code/pandas-select.html#scalar-value",
    "title": "Setup",
    "section": "Scalar value",
    "text": "Scalar value\n\ndf.loc[[0], \"height\"]"
  },
  {
    "objectID": "code/pandas-select.html#basics",
    "href": "code/pandas-select.html#basics",
    "title": "Setup",
    "section": "Basics",
    "text": "Basics\n\nPandas provides a suite of methods in order to get purely integer based indexing.\nHere, the .iloc attribute is the primary access method.\n\n\ndf.iloc[0]"
  },
  {
    "objectID": "code/pandas-select.html#multiple-rows-and-columns",
    "href": "code/pandas-select.html#multiple-rows-and-columns",
    "title": "Setup",
    "section": "Multiple rows and columns",
    "text": "Multiple rows and columns\n\nWhen using .iloc, endpoints are not included.\n\n\ndf.iloc[0:2, 0:2]"
  },
  {
    "objectID": "code/pandas-select.html#lists-of-integer-position-locations",
    "href": "code/pandas-select.html#lists-of-integer-position-locations",
    "title": "Setup",
    "section": "Lists of integer position locations",
    "text": "Lists of integer position locations\n\ndf.iloc[[0, 2], [0, 1]]"
  },
  {
    "objectID": "code/pandas-select.html#slicing-rows-explicitly",
    "href": "code/pandas-select.html#slicing-rows-explicitly",
    "title": "Setup",
    "section": "Slicing rows explicitly",
    "text": "Slicing rows explicitly\n\ndf.iloc[1:3, :]"
  },
  {
    "objectID": "code/pandas-select.html#slicing-columns-explicitly",
    "href": "code/pandas-select.html#slicing-columns-explicitly",
    "title": "Setup",
    "section": "Slicing columns explicitly",
    "text": "Slicing columns explicitly\n\ndf.iloc[:, 1:3]"
  },
  {
    "objectID": "code/pandas-select.html#getting-a-value-explicitly",
    "href": "code/pandas-select.html#getting-a-value-explicitly",
    "title": "Setup",
    "section": "Getting a value explicitly",
    "text": "Getting a value explicitly\n\ndf.iloc[0, 0]"
  },
  {
    "objectID": "code/5_selection.html",
    "href": "code/5_selection.html",
    "title": "Selection",
    "section": "",
    "text": "Wichtige Hinweise\nNAME = \"\"\nimport IPython\nassert IPython.version_info[0] &gt;= 3, \"Your version of IPython is too old, please update it.\""
  },
  {
    "objectID": "code/5_selection.html#import-pandas",
    "href": "code/5_selection.html#import-pandas",
    "title": "Selection",
    "section": "Import pandas",
    "text": "Import pandas\n\nimport pandas as pd"
  },
  {
    "objectID": "code/5_selection.html#import-data",
    "href": "code/5_selection.html#import-data",
    "title": "Selection",
    "section": "Import data",
    "text": "Import data\n\n# URL of data\nURL = \"https://raw.githubusercontent.com/kirenz/datasets/master/height_clean_cols.csv\"\n\n\n# YOUR CODE HERE\nraise NotImplementedError()"
  },
  {
    "objectID": "code/5_selection.html#selection",
    "href": "code/5_selection.html#selection",
    "title": "Selection",
    "section": "Selection",
    "text": "Selection\n\nGetting [[]]\nSelecting a single column with [[]]:\n\nSelect the column height and save it as a new Pandas dataframe df_height\n\nHint:\ndf_height = df[[___]]\n\n# YOUR CODE HERE\nraise NotImplementedError()\n\n\n\"\"\"Check if your code returns the correct output\"\"\"\nassert  df_height.columns.to_list() == ['height']\n\nSelecting via [], which slices the rows (endpoint is not included) and includes all columns:\n\ndf[0:1]\n\n\nSelect rows 1, 2 and 3 and save it as df_sr\n\n\n# YOUR CODE HERE\nraise NotImplementedError()\n\n\n\"\"\"Check if your code returns the correct output\"\"\"\nassert df_sr.iloc[0,0] == 'Peter'\nassert df_sr.iloc[2,0] == 'Manuela'\nassert len(df_sr) == 3\n\n\n\nBy label .loc\nThe .loc (location) attribute is the primary access method. The following are valid inputs:\nFor getting a cross section using a label:\n\n# select row 0\ndf.loc[[0]]\n\nSelecting on a multi-axis by label:\n\n# only select location at row 0 for column \"name\"\ndf.loc[0 , 'name']\n\n\n# select row 2 to 4 for column \"name\" (when using .loc endpoints are included)\ndf.loc[2:4 , 'name']\n\n\n# select row 2 to 4 for columns \"name\" and \"height\" (when using .loc endpoints are included)\ndf.loc[2:4 , ['name', 'height']]\n\n\n# select all rows for \ndf.loc[ : , [\"name\", \"height\"]]\n\n\nSelect row 0 and 1 for columns ‚Äòname‚Äô and ‚Äòheight‚Äô and save it as df_loc1\n\n\n# YOUR CODE HERE\nraise NotImplementedError()\n\n\n\"\"\"Check if your code returns the correct output\"\"\"\nassert  df_loc1.columns.to_list() == ['name', 'height']\nassert  len(df_loc1) == 2\nassert  df_loc1.iloc[0,0] == \"Stefanie\"\n\nReduction in the dimensions of the returned object:\n\ndf.loc[0, [\"name\", \"height\"]]\n\nFor getting a scalar value:\n\ndf.loc[[0], \"height\"]\n\n\n\nBy position .iloc\nPandas provides a suite of methods in order to get purely integer based indexing.\nHere, the .iloc attribute is the primary access method.\nWhen using .iloc, endpoints are not included.\n\ndf.iloc[0]\n\nBy integer slices:\n\ndf.iloc[0:2, 0:2]\n\nBy lists of integer position locations:\n\ndf.iloc[[0, 2], [0, 2]]\n\nFor slicing rows explicitly:\n\ndf.iloc[1:3, :]\n\nFor slicing columns explicitly:\n\ndf.iloc[:, 1:3]\n\n\ndf.iloc[0, 0]\n\n\n# YOUR CODE HERE\nraise NotImplementedError()\n\n\n\"\"\"Check if your code returns the correct output\"\"\"\nassert  df_iloc1.columns.to_list() == ['average_height_parents', 'gender']\nassert  len(df_iloc1) == 3\nassert  df_iloc1.iloc[0,1] == \"male\""
  },
  {
    "objectID": "code/pandas-filter-group-bin.html",
    "href": "code/pandas-filter-group-bin.html",
    "title": "Setup",
    "section": "",
    "text": "import pandas as pd\n\ndf = pd.DataFrame({\n    'name': [\"Tom\", \"Lisa\", \"Peter\"],\n    'height': [1.68, 1.93, 1.72],\n    'weight': [48.4, 89.8, 84.2],\n    'id': [1, 2, 3],\n    'city': ['Stuttgart', 'Stuttgart', 'Berlin']\n})\n\ndf['bmi'] = round(df['weight'] / (df['height'] * df['height']), 2)\ndf[\"name\"] = df[\"name\"].astype(\"category\")\ndf['id'] = df['id'].astype(str)"
  },
  {
    "objectID": "code/pandas-filter-group-bin.html#filter-example",
    "href": "code/pandas-filter-group-bin.html#filter-example",
    "title": "Setup",
    "section": "Filter example",
    "text": "Filter example\n\nUsing a single column‚Äôs values to filter data (boolean indexing).\n\n\ndf[df[\"height\"] &gt;= 1.67]"
  },
  {
    "objectID": "code/pandas-filter-group-bin.html#filter-with-and",
    "href": "code/pandas-filter-group-bin.html#filter-with-and",
    "title": "Setup",
    "section": "Filter with AND",
    "text": "Filter with AND\n\nCombine filtering for two columns or more with & (AND)\n\n\ndf[(df[\"height\"] &gt;= 1.67) & (df[\"weight\"] &lt; 74)]"
  },
  {
    "objectID": "code/pandas-filter-group-bin.html#filter-with-or",
    "href": "code/pandas-filter-group-bin.html#filter-with-or",
    "title": "Setup",
    "section": "Filter with OR",
    "text": "Filter with OR\n\nYou can also combine filtering for two columns or more with | (OR)\n\n\ndf[(df[\"height\"] &gt;= 167) | (df[\"weight\"] &lt; 74)]"
  },
  {
    "objectID": "code/pandas-filter-group-bin.html#isin",
    "href": "code/pandas-filter-group-bin.html#isin",
    "title": "Setup",
    "section": "isin()",
    "text": "isin()\n\nAlways use the isin() method if you have multiple conditions within one column:\n\n\ndf[df[\"name\"].isin([\"Tom\", \"Steven\"])]"
  },
  {
    "objectID": "code/pandas-filter-group-bin.html#grouping-steps",
    "href": "code/pandas-filter-group-bin.html#grouping-steps",
    "title": "Setup",
    "section": "Grouping steps",
    "text": "Grouping steps\n\nBy ‚Äúgroup by‚Äù we are referring to a process involving one or more of the following steps:\nSplitting the data into groups based on some criteria\nApplying a function to each group independently\nCombining the results into a data structure"
  },
  {
    "objectID": "code/pandas-filter-group-bin.html#grouping-example-with-mean",
    "href": "code/pandas-filter-group-bin.html#grouping-example-with-mean",
    "title": "Setup",
    "section": "Grouping example with mean()",
    "text": "Grouping example with mean()\n\nGrouping and then applying the mean() function to the resulting groups. Furthermore, we round the results and transpose the data.\n\n\ndf.groupby(\"city\").mean(numeric_only=True).round(2).T"
  },
  {
    "objectID": "code/pandas-filter-group-bin.html#segment-data-with-cut",
    "href": "code/pandas-filter-group-bin.html#segment-data-with-cut",
    "title": "Setup",
    "section": "Segment data with cut()",
    "text": "Segment data with cut()\n\nUse the function cut when you need to segment and sort data values into bins.\nThis function is also useful for going from a continuous variable to a categorical variable."
  },
  {
    "objectID": "code/pandas-filter-group-bin.html#bmi-table",
    "href": "code/pandas-filter-group-bin.html#bmi-table",
    "title": "Setup",
    "section": "BMI table",
    "text": "BMI table\nThe standard weight status categories associated with BMI ranges for adults are shown in the following table:\n\n\n\nBMI\nWeight Status\n\n\n\n\nBelow 18.5\nUnderweight\n\n\n18.5 - 24.9\nNormal or Healthy Weight\n\n\n25.0 - 29.9\nOverweight\n\n\n30.0 and Above\nObese\n\n\n\nSource: U.S. Department of Health & Human Services"
  },
  {
    "objectID": "code/pandas-filter-group-bin.html#bmi-example-1",
    "href": "code/pandas-filter-group-bin.html#bmi-example-1",
    "title": "Setup",
    "section": "BMI example 1",
    "text": "BMI example 1\n\nIn our function, we discretize the variable bmi into four bins according to the table above:\nThe bins [0, 18.5, 25, 30, float(‚Äòinf‚Äô)] indicate (0,18.5], (18.5,25], (25,30], (30, float(‚Äôinf))\nfloat('inf') is used for setting variable with an infinitely large value"
  },
  {
    "objectID": "code/pandas-filter-group-bin.html#bmi-example-code",
    "href": "code/pandas-filter-group-bin.html#bmi-example-code",
    "title": "Setup",
    "section": "BMI example code",
    "text": "BMI example code\n\ndf['bmi_category'] = pd.cut(df['bmi'],\n                            bins=[0, 18.5, 25, 30, float('inf')],\n                            labels=['underweight', 'normal', 'overweight', \"obese\"])\n\n\ndf"
  },
  {
    "objectID": "code/pandas-filter-group-bin.html#bmi-example-with-categories",
    "href": "code/pandas-filter-group-bin.html#bmi-example-with-categories",
    "title": "Setup",
    "section": "BMI example with categories",
    "text": "BMI example with categories\n\ndf['bmi_category']"
  },
  {
    "objectID": "code/pandas-filter-group-bin.html#four-equal-sized-bins",
    "href": "code/pandas-filter-group-bin.html#four-equal-sized-bins",
    "title": "Setup",
    "section": "Four equal-sized bins",
    "text": "Four equal-sized bins\n\nExample of how to discretize into four equal-sized bins:\n\n\ndf['bmi_category_2'] = pd.cut(df['bmi'],\n                              bins=4,\n                              labels=['group1', 'group2', 'group3', \"group4\"])\n\n\ndf['bmi_category_2']"
  },
  {
    "objectID": "code/pandas-filter-group-bin.html#four-equal-sized-bins-without-labels",
    "href": "code/pandas-filter-group-bin.html#four-equal-sized-bins-without-labels",
    "title": "Setup",
    "section": "Four equal-sized bins without labels",
    "text": "Four equal-sized bins without labels\n\nExample of how to discretize into four equal-sized bins if you don‚Äôt need labels\n\n\ndf['bmi_category_3'] = pd.cut(df['bmi'],\n                              bins=4,\n                              labels=False)\n\n\ndf['bmi_category_3']"
  },
  {
    "objectID": "code/pandas-import-store.html",
    "href": "code/pandas-import-store.html",
    "title": "Import pandas",
    "section": "",
    "text": "To load the pandas package and start working with it, import the package.\nThe community agreed alias for pandas is pd\nimport pandas as pd"
  },
  {
    "objectID": "code/pandas-import-store.html#create-a-dataframe",
    "href": "code/pandas-import-store.html#create-a-dataframe",
    "title": "Import pandas",
    "section": "Create a DataFrame",
    "text": "Create a DataFrame\n\nTo manually store data in a table, create a DataFrame:\n\n\ndf = pd.DataFrame({\n    'name': [\"Tom\", \"Lisa\", \"Peter\"],\n    'height': [1.68, 1.93, 1.72],\n    'weight': [48.4, 89.8, 84.2],\n    'id': [1, 2, 3],\n    'city': ['Stuttgart', 'Stuttgart', 'Berlin']\n})"
  },
  {
    "objectID": "code/pandas-import-store.html#show-data-with-head",
    "href": "code/pandas-import-store.html#show-data-with-head",
    "title": "Import pandas",
    "section": "Show data with head()",
    "text": "Show data with head()\n\ndf.head()"
  },
  {
    "objectID": "code/pandas-import-store.html#import-data-from-github",
    "href": "code/pandas-import-store.html#import-data-from-github",
    "title": "Import pandas",
    "section": "Import data from GitHub",
    "text": "Import data from GitHub\n\nImport a CSV file in a GitHub repo\n\n\nURL = \"https://raw.githubusercontent.com/kirenz/datasets/master/campaign.csv\"\n\ndf_github = pd.read_csv(URL, sep=\",\", decimal='.')\n\ndf_github.head()"
  },
  {
    "objectID": "code/pandas-import-store.html#data-overview",
    "href": "code/pandas-import-store.html#data-overview",
    "title": "Import pandas",
    "section": "Data overview",
    "text": "Data overview\n\ndf"
  },
  {
    "objectID": "code/pandas-import-store.html#head-and-tail",
    "href": "code/pandas-import-store.html#head-and-tail",
    "title": "Import pandas",
    "section": "Head and tail",
    "text": "Head and tail\n\n# show first 2 rows\ndf.head(2)\n\n\n# show last 2 rows\ndf.tail(2)"
  },
  {
    "objectID": "code/pandas-import-store.html#info",
    "href": "code/pandas-import-store.html#info",
    "title": "Import pandas",
    "section": "Info",
    "text": "Info\n\nThe info() method prints information about a DataFrame.\n\n\ndf.info()"
  },
  {
    "objectID": "code/pandas-import-store.html#show-column-names",
    "href": "code/pandas-import-store.html#show-column-names",
    "title": "Import pandas",
    "section": "Show column names",
    "text": "Show column names\n\ndf.columns"
  },
  {
    "objectID": "code/pandas-import-store.html#show-data-types",
    "href": "code/pandas-import-store.html#show-data-types",
    "title": "Import pandas",
    "section": "Show data types",
    "text": "Show data types\n\nShow data types (dtypes).\n\n\ndf.dtypes\n\n\nThe data types in this DataFrame are integers (int64), floats (float64) and strings (object)."
  },
  {
    "objectID": "code/pandas-import-store.html#show-index",
    "href": "code/pandas-import-store.html#show-index",
    "title": "Import pandas",
    "section": "Show index",
    "text": "Show index\n\ndf.index"
  },
  {
    "objectID": "code/3_data_types.html",
    "href": "code/3_data_types.html",
    "title": "Change data types and add columns",
    "section": "",
    "text": "Wichtige Hinweise\nNAME = \"\"\nimport IPython\nassert IPython.version_info[0] &gt;= 3, \"Your version of IPython is too old, please update it.\""
  },
  {
    "objectID": "code/3_data_types.html#import-pandas",
    "href": "code/3_data_types.html#import-pandas",
    "title": "Change data types and add columns",
    "section": "Import pandas",
    "text": "Import pandas\n\nimport pandas as pd"
  },
  {
    "objectID": "code/3_data_types.html#import-data",
    "href": "code/3_data_types.html#import-data",
    "title": "Change data types and add columns",
    "section": "Import data",
    "text": "Import data\n\n# URL of data\nURL = \"https://raw.githubusercontent.com/kirenz/datasets/master/height_clean.csv\"\ndf = pd.read_csv(URL)\n\n\ndf.dtypes"
  },
  {
    "objectID": "code/3_data_types.html#change-data-type",
    "href": "code/3_data_types.html#change-data-type",
    "title": "Change data types and add columns",
    "section": "Change data type",
    "text": "Change data type\n\nThere are several methods to change data types in pandas:\n\nThe most common method to change the data type is:\n\n.astype(): Convert to a specific type (like ‚Äúint32‚Äù, ‚Äúfloat‚Äù or ‚Äúcatgeory‚Äù)\n.astype(str): Convert to string\n\nMore options:\n\nto_datetime: Convert argument to datetime.\nto_timedelta: Convert argument to timedelta.\nto_numeric: Convert argument to a numeric type.\nnumpy.ndarray.astype: Cast a numpy array to a specified type.\n\n\nCategorical data\n\nCategoricals are a pandas data type corresponding to categorical variables in statistics.\nA categorical variable takes on a limited, and usually fixed, number of possible values (categories). Examples are gender, social class, blood type, country affiliation, observation time or rating via Likert scales.\nConvert variable ‚Äúgender‚Äù to a category dtype:\n\n\ndf[\"gender\"] = df[\"gender\"].astype(\"category\")\n\n\n\nString data\n\nIn our example, id is not a number (we can‚Äôt perform calculations with it)\nIt is just a unique identifier so we should transform it to a simple string (object)\n\nHint:\ndf['___'] = df['___'].___(___)\n\n# YOUR CODE HERE\nraise NotImplementedError()\n\n\n\"\"\"Check if your code returns the correct output\"\"\"\nassert df.select_dtypes(include=[\"number\"]).columns.to_list() == ['height', 'average_height_parents']\nassert df.select_dtypes(include=[\"object\"]).columns.to_list() == ['name', 'id']"
  },
  {
    "objectID": "code/3_data_types.html#add-new-columns",
    "href": "code/3_data_types.html#add-new-columns",
    "title": "Change data types and add columns",
    "section": "Add new columns",
    "text": "Add new columns\n\nConstant\n\nAdd a new variable called ‚Äúnumber‚Äù to df\nThe new variable should have the number 42 in all rows\n\nHint:\ndf[\"___\"] = ___\n\n# YOUR CODE HERE\nraise NotImplementedError()\n\n\n\"\"\"Check if your code returns the correct output\"\"\"\nassert df.loc[[0], \"number\"].to_list() == [42]\n\n\n\nFrom existing\n\nCreate new columns from existing columns\n\n\n# we use numpy to add some data with a nornmal distribution \nimport numpy as np\n\n# calculate height in m (from cm)\ndf['height_m'] = df.height/100 \n\n# add 20 random normal distributed numbers with a mean of 45 and standard deviation of 5\ndf['weight'] = round(np.random.normal(45, 5, 20) * df['height_m'],2)\n\n# calculate body mass index\ndf['bmi'] = round(df.weight / (df.height_m * df.height_m),2)\n\n\ndf.head()\n\n\n\nDate\n\n# we need datetime to add a date\nfrom datetime import datetime\n\n\ndf[\"date\"] = datetime.today().strftime('%Y-%m-%d')\n\ndf.head(3)"
  },
  {
    "objectID": "slides/pandas-select.html#getting-columns-with",
    "href": "slides/pandas-select.html#getting-columns-with",
    "title": "Selection",
    "section": "Getting columns with [[]]",
    "text": "Getting columns with [[]]\n\nSelecting a single column with [[]]:\nSelect the column city and save it as a new Pandas dataframe df_city\n\n\n\ndf_city = df[[\"city\"]]\n\n\n\n\ndf_city\n\n\n\n\n\n\n\n\n\n\ncity\n\n\n\n\n0\nStuttgart\n\n\n1\nStuttgart\n\n\n2\nBerlin"
  },
  {
    "objectID": "slides/pandas-select.html#selecting-rows-with",
    "href": "slides/pandas-select.html#selecting-rows-with",
    "title": "Selection",
    "section": "Selecting rows with []",
    "text": "Selecting rows with []\n\nSelecting via [] slices the rows (endpoint is not included) and includes all columns:\n\n\ndf[0:2]\n\n\n\n\n\n\n\n\n\n\nname\nheight\nweight\nid\ncity\nbmi\n\n\n\n\n0\nTom\n1.68\n48.4\n1\nStuttgart\n17.15\n\n\n1\nLisa\n1.93\n89.8\n2\nStuttgart\n24.11"
  },
  {
    "objectID": "slides/pandas-select.html#only-the-first-row",
    "href": "slides/pandas-select.html#only-the-first-row",
    "title": "Selection",
    "section": "Only the first row",
    "text": "Only the first row\n\ndf.loc[[0]]\n\n\n\n\n\n\n\n\n\n\nname\nheight\nweight\nid\ncity\nbmi\n\n\n\n\n0\nTom\n1.68\n48.4\n1\nStuttgart\n17.15"
  },
  {
    "objectID": "slides/pandas-select.html#one-row-and-one-column",
    "href": "slides/pandas-select.html#one-row-and-one-column",
    "title": "Selection",
    "section": "One row and one column",
    "text": "One row and one column\n\nOnly select location at row 0 for column ‚Äúname‚Äù\n\n\n\ndf.loc[0, 'name']\n\n\n\n'Tom'"
  },
  {
    "objectID": "slides/pandas-select.html#multiple-rows-and-one-column",
    "href": "slides/pandas-select.html#multiple-rows-and-one-column",
    "title": "Selection",
    "section": "Multiple rows and one column",
    "text": "Multiple rows and one column\n\nSelect row 2 to 4 for column ‚Äúname‚Äù (when using .loc endpoints are included)\n\n\n\ndf.loc[2:4, 'name']\n\n\n\n2    Peter\nName: name, dtype: category\nCategories (3, object): ['Lisa', 'Peter', 'Tom']"
  },
  {
    "objectID": "slides/pandas-select.html#multiple-rows-and-multiple-columns",
    "href": "slides/pandas-select.html#multiple-rows-and-multiple-columns",
    "title": "Selection",
    "section": "Multiple rows and multiple columns",
    "text": "Multiple rows and multiple columns\n\nSelect row 2 to 4 for columns ‚Äúname‚Äù and ‚Äúheight‚Äù (when using .loc endpoints are included)\n\n\n\ndf.loc[2:4, ['name', 'height']]\n\n\n\n\n\n\n\n\n\n\nname\nheight\n\n\n\n\n2\nPeter\n1.72"
  },
  {
    "objectID": "slides/pandas-select.html#all-rows-and-multiple-columns",
    "href": "slides/pandas-select.html#all-rows-and-multiple-columns",
    "title": "Selection",
    "section": "All rows and multiple columns",
    "text": "All rows and multiple columns\n\nSelect all rows for name and height\n\n\n\ndf.loc[:, [\"name\", \"height\"]]\n\n\n\n\n\n\n\n\n\n\nname\nheight\n\n\n\n\n0\nTom\n1.68\n\n\n1\nLisa\n1.93\n\n\n2\nPeter\n1.72"
  },
  {
    "objectID": "slides/pandas-select.html#scalar-value",
    "href": "slides/pandas-select.html#scalar-value",
    "title": "Selection",
    "section": "Scalar value",
    "text": "Scalar value\n\ndf.loc[[0], \"height\"]\n\n0    1.68\nName: height, dtype: float64"
  },
  {
    "objectID": "slides/pandas-select.html#basics",
    "href": "slides/pandas-select.html#basics",
    "title": "Selection",
    "section": "Basics",
    "text": "Basics\n\nPandas provides a suite of methods in order to get purely integer based indexing.\nHere, the .iloc attribute is the primary access method.\n\n\n\ndf.iloc[0]\n\n\n\nname            Tom\nheight         1.68\nweight         48.4\nid                1\ncity      Stuttgart\nbmi           17.15\nName: 0, dtype: object"
  },
  {
    "objectID": "slides/pandas-select.html#multiple-rows-and-columns",
    "href": "slides/pandas-select.html#multiple-rows-and-columns",
    "title": "Selection",
    "section": "Multiple rows and columns",
    "text": "Multiple rows and columns\n\nWhen using .iloc, endpoints are not included.\n\n\n\ndf.iloc[0:2, 0:2]\n\n\n\n\n\n\n\n\n\n\nname\nheight\n\n\n\n\n0\nTom\n1.68\n\n\n1\nLisa\n1.93"
  },
  {
    "objectID": "slides/pandas-select.html#lists-of-integer-position-locations",
    "href": "slides/pandas-select.html#lists-of-integer-position-locations",
    "title": "Selection",
    "section": "Lists of integer position locations",
    "text": "Lists of integer position locations\n\ndf.iloc[[0, 2], [0, 1]]\n\n\n\n\n\n\n\n\n\n\nname\nheight\n\n\n\n\n0\nTom\n1.68\n\n\n2\nPeter\n1.72"
  },
  {
    "objectID": "slides/pandas-select.html#slicing-rows-explicitly",
    "href": "slides/pandas-select.html#slicing-rows-explicitly",
    "title": "Selection",
    "section": "Slicing rows explicitly",
    "text": "Slicing rows explicitly\n\ndf.iloc[1:3, :]\n\n\n\n\n\n\n\n\n\n\nname\nheight\nweight\nid\ncity\nbmi\n\n\n\n\n1\nLisa\n1.93\n89.8\n2\nStuttgart\n24.11\n\n\n2\nPeter\n1.72\n84.2\n3\nBerlin\n28.46"
  },
  {
    "objectID": "slides/pandas-select.html#slicing-columns-explicitly",
    "href": "slides/pandas-select.html#slicing-columns-explicitly",
    "title": "Selection",
    "section": "Slicing columns explicitly",
    "text": "Slicing columns explicitly\n\ndf.iloc[:, 1:3]\n\n\n\n\n\n\n\n\n\n\nheight\nweight\n\n\n\n\n0\n1.68\n48.4\n\n\n1\n1.93\n89.8\n\n\n2\n1.72\n84.2"
  },
  {
    "objectID": "slides/pandas-select.html#getting-a-value-explicitly",
    "href": "slides/pandas-select.html#getting-a-value-explicitly",
    "title": "Selection",
    "section": "Getting a value explicitly",
    "text": "Getting a value explicitly\n\ndf.iloc[0, 0]\n\n'Tom'"
  },
  {
    "objectID": "slides/pandas-data-types.html#data-types-with-.dtypes",
    "href": "slides/pandas-data-types.html#data-types-with-.dtypes",
    "title": "Data Types and Adding Columns",
    "section": "Data Types with .dtypes",
    "text": "Data Types with .dtypes\n\ndf.dtypes\n\n\n\nname       object\nheight    float64\nweight    float64\nid          int64\ncity       object\ndtype: object"
  },
  {
    "objectID": "slides/pandas-data-types.html#data-types-with-.info",
    "href": "slides/pandas-data-types.html#data-types-with-.info",
    "title": "Data Types and Adding Columns",
    "section": "Data Types with .info()",
    "text": "Data Types with .info()\n\ndf.info()\n\n\n\n&lt;class 'pandas.core.frame.DataFrame'&gt;\nRangeIndex: 3 entries, 0 to 2\nData columns (total 5 columns):\n #   Column  Non-Null Count  Dtype  \n---  ------  --------------  -----  \n 0   name    3 non-null      object \n 1   height  3 non-null      float64\n 2   weight  3 non-null      float64\n 3   id      3 non-null      int64  \n 4   city    3 non-null      object \ndtypes: float64(2), int64(1), object(2)\nmemory usage: 252.0+ bytes"
  },
  {
    "objectID": "slides/pandas-data-types.html#standard-methods",
    "href": "slides/pandas-data-types.html#standard-methods",
    "title": "Data Types and Adding Columns",
    "section": "Standard methods",
    "text": "Standard methods\n\nThere are several methods to change data types in pandas:\nThe most common method to change the data type is:\n.astype(): Convert to a specific type (like ‚Äúint32‚Äù, ‚Äúfloat‚Äù or ‚Äúcatgeory‚Äù)\n.astype(str): Convert to string"
  },
  {
    "objectID": "slides/pandas-data-types.html#more-options",
    "href": "slides/pandas-data-types.html#more-options",
    "title": "Data Types and Adding Columns",
    "section": "More options",
    "text": "More options\n\nto_datetime: Convert argument to datetime.\nto_timedelta: Convert argument to timedelta.\nto_numeric: Convert argument to a numeric type."
  },
  {
    "objectID": "slides/pandas-data-types.html#what-is-categorical-data",
    "href": "slides/pandas-data-types.html#what-is-categorical-data",
    "title": "Data Types and Adding Columns",
    "section": "What is categorical data?",
    "text": "What is categorical data?\n\nCategoricals are a pandas data type corresponding to categorical variables in statistics.\nA categorical variable takes on a limited, and usually fixed, number of possible values (categories).\nExamples are gender, social class, blood type, country affiliation, observation time or rating via Likert scales."
  },
  {
    "objectID": "slides/pandas-data-types.html#convert-to-categorical-data",
    "href": "slides/pandas-data-types.html#convert-to-categorical-data",
    "title": "Data Types and Adding Columns",
    "section": "Convert to categorical data",
    "text": "Convert to categorical data\n\nConvert variable ‚Äúname‚Äù to a category dtype:\n\n\n\ndf[\"name\"] = df[\"name\"].astype(\"category\")\n\n\n\n\ndf.info()"
  },
  {
    "objectID": "slides/pandas-data-types.html#convert-to-categorical-data-output",
    "href": "slides/pandas-data-types.html#convert-to-categorical-data-output",
    "title": "Data Types and Adding Columns",
    "section": "Convert to categorical data",
    "text": "Convert to categorical data\n\n&lt;class 'pandas.core.frame.DataFrame'&gt;\nRangeIndex: 3 entries, 0 to 2\nData columns (total 5 columns):\n #   Column  Non-Null Count  Dtype   \n---  ------  --------------  -----   \n 0   name    3 non-null      category\n 1   height  3 non-null      float64 \n 2   weight  3 non-null      float64 \n 3   id      3 non-null      int64   \n 4   city    3 non-null      object  \ndtypes: category(1), float64(2), int64(1), object(1)\nmemory usage: 363.0+ bytes"
  },
  {
    "objectID": "slides/pandas-data-types.html#string-data",
    "href": "slides/pandas-data-types.html#string-data",
    "title": "Data Types and Adding Columns",
    "section": "String data",
    "text": "String data\n\nIn our example, id is not a number (we can‚Äôt perform calculations with it)\nIt is just a unique identifier so we should transform it to a simple string (object)\n\n\n\ndf['id'] = df['id'].astype(str)\n\n\n\n\ndf.info()"
  },
  {
    "objectID": "slides/pandas-data-types.html#string-data-output",
    "href": "slides/pandas-data-types.html#string-data-output",
    "title": "Data Types and Adding Columns",
    "section": "String data",
    "text": "String data\n\n&lt;class 'pandas.core.frame.DataFrame'&gt;\nRangeIndex: 3 entries, 0 to 2\nData columns (total 5 columns):\n #   Column  Non-Null Count  Dtype   \n---  ------  --------------  -----   \n 0   name    3 non-null      category\n 1   height  3 non-null      float64 \n 2   weight  3 non-null      float64 \n 3   id      3 non-null      object  \n 4   city    3 non-null      object  \ndtypes: category(1), float64(2), object(2)\nmemory usage: 363.0+ bytes"
  },
  {
    "objectID": "slides/pandas-data-types.html#add-a-constant-number",
    "href": "slides/pandas-data-types.html#add-a-constant-number",
    "title": "Data Types and Adding Columns",
    "section": "Add a constant number",
    "text": "Add a constant number\n\nAdd a new variable called ‚Äúnumber‚Äù to df\nThe new variable should have the number 42 in all rows\n\n\n\ndf[\"number\"] = 42\n\n\n\n\ndf.head()\n\n\n\n\n\n\n\n\n\n\nname\nheight\nweight\nid\ncity\nnumber\n\n\n\n\n0\nTom\n1.68\n48.4\n1\nStuttgart\n42\n\n\n1\nLisa\n1.93\n89.8\n2\nStuttgart\n42\n\n\n2\nPeter\n1.72\n84.2\n3\nBerlin\n42"
  },
  {
    "objectID": "slides/pandas-data-types.html#add-from-existing-columns",
    "href": "slides/pandas-data-types.html#add-from-existing-columns",
    "title": "Data Types and Adding Columns",
    "section": "Add from existing columns",
    "text": "Add from existing columns\n\nCreate new columns from existing columns\n\n\n\n# calculate body mass index\ndf['bmi'] = round(df['weight'] / (df['height'] * df['height']), 2)\n\n\n\n\ndf\n\n\n\n\n\n\n\n\n\n\nname\nheight\nweight\nid\ncity\nnumber\nbmi\n\n\n\n\n0\nTom\n1.68\n48.4\n1\nStuttgart\n42\n17.15\n\n\n1\nLisa\n1.93\n89.8\n2\nStuttgart\n42\n24.11\n\n\n2\nPeter\n1.72\n84.2\n3\nBerlin\n42\n28.46"
  },
  {
    "objectID": "slides/pandas-data-types.html#add-a-date-with-strftime",
    "href": "slides/pandas-data-types.html#add-a-date-with-strftime",
    "title": "Data Types and Adding Columns",
    "section": "Add a date with strftime",
    "text": "Add a date with strftime\n\nTo add a date, we can use datetime and strftime (see code examples on the next slides):\n\n\n\ndf[\"date\"] = datetime.today().strftime('%Y-%m-%d')\n\n\n\n\ndf.head(3)\n\n\n\n\n\n\n\n\n\n\nname\nheight\nweight\nid\ncity\nnumber\nbmi\ndate\n\n\n\n\n0\nTom\n1.68\n48.4\n1\nStuttgart\n42\n17.15\n2023-10-26\n\n\n1\nLisa\n1.93\n89.8\n2\nStuttgart\n42\n24.11\n2023-10-26\n\n\n2\nPeter\n1.72\n84.2\n3\nBerlin\n42\n28.46\n2023-10-26"
  },
  {
    "objectID": "slides/pandas-data-types.html#table-weekdays-and-day",
    "href": "slides/pandas-data-types.html#table-weekdays-and-day",
    "title": "Data Types and Adding Columns",
    "section": "Table: weekdays and day",
    "text": "Table: weekdays and day\n\n\n\n\n\n\n\n\nCode\nExample\nDescription\n\n\n\n\n%a\nSun\nWeekday as locale‚Äôs abbreviated name.\n\n\n%A\nSunday\nWeekday as locale‚Äôs full name.\n\n\n%w\n0\nWeekday as a decimal number, where 0 is Sunday and 6 is Saturday.\n\n\n%d\n8\nDay of the month as a zero-padded decimal number.\n\n\n%-d\n8\nDay of the month as a decimal number. (Platform specific)"
  },
  {
    "objectID": "slides/pandas-data-types.html#table-month",
    "href": "slides/pandas-data-types.html#table-month",
    "title": "Data Types and Adding Columns",
    "section": "Table: Month",
    "text": "Table: Month\n\n\n\n\n\n\n\n\nCode\nExample\nDescription\n\n\n\n\n%b\nSep\nMonth as locale‚Äôs abbreviated name.\n\n\n%B\nSeptember\nMonth as locale‚Äôs full name.\n\n\n%m\n9\nMonth as a zero-padded decimal number.\n\n\n%-m\n9\nMonth as a decimal number. (Platform specific)"
  },
  {
    "objectID": "slides/pandas-data-types.html#table-year-and-hour",
    "href": "slides/pandas-data-types.html#table-year-and-hour",
    "title": "Data Types and Adding Columns",
    "section": "Table: Year and hour",
    "text": "Table: Year and hour\n\n\n\n\n\n\n\n\nCode\nExample\nDescription\n\n\n\n\n%y\n13\nYear without century as a zero-padded decimal number.\n\n\n%Y\n2013\nYear with century as a decimal number.\n\n\n%H\n7\nHour (24-hour clock) as a zero-padded decimal number.\n\n\n%-H\n7\nHour (24-hour clock) as a decimal number. (Platform specific)\n\n\n%I\n7\nHour (12-hour clock) as a zero-padded decimal number.\n\n\n%-I\n7\nHour (12-hour clock) as a decimal number. (Platform specific)"
  },
  {
    "objectID": "slides/pandas-data-types.html#table-minutes-etc.",
    "href": "slides/pandas-data-types.html#table-minutes-etc.",
    "title": "Data Types and Adding Columns",
    "section": "Table: Minutes etc.",
    "text": "Table: Minutes etc.\n\n\n\n\n\n\n\n\nCode\nExample\nDescription\n\n\n\n\n%p\nAM\nLocale‚Äôs equivalent of either AM or PM.\n\n\n%M\n6\nMinute as a zero-padded decimal number.\n\n\n%-M\n6\nMinute as a decimal number. (Platform specific)\n\n\n%S\n5\nSecond as a zero-padded decimal number.\n\n\n%-S\n5\nSecond as a decimal number. (Platform specific)\n\n\n%f\n0\nMicrosecond as a decimal number, zero-padded on the left.\n\n\n%z\n0\nUTC offset in the form ¬±HHMM[SS[.ffffff]] (empty string if the object is naive).\n\n\n%Z\nUTC\nTime zone name (empty string if the object is naive).\n\n\n%j\n251\nDay of the year as a zero-padded decimal number.\n\n\n%-j\n251\nDay of the year as a decimal number. (Platform specific)\n\n\n%U\n36\nWeek number of the year (Sunday as the first day of the week) as a zero padded decimal number. All days in a new year preceding the first Sunday are considered to be in week 0.\n\n\n%W\n35\nWeek number of the year (Monday as the first day of the week) as a decimal number. All days in a new year preceding the first Monday are considered to be in week 0.\n\n\n%c\nSun Sep 8 07:06:05 2013\nLocale‚Äôs appropriate date and time representation.\n\n\n%x\n09.08.13\nLocale‚Äôs appropriate date representation.\n\n\n%X\n07:06:05\nLocale‚Äôs appropriate time representation.\n\n\n%%\n%\nA literal ‚Äò%‚Äô character."
  },
  {
    "objectID": "slides/pandas-filter-group-bin.html#filter-example",
    "href": "slides/pandas-filter-group-bin.html#filter-example",
    "title": "Filter, Group and Bin Data",
    "section": "Filter example",
    "text": "Filter example\n\nUsing a single column‚Äôs values to filter data (boolean indexing).\n\n\n\ndf[df[\"height\"] &gt;= 1.67]\n\n\n\n\n\n\n\n\n\n\nname\nheight\nweight\nid\ncity\nbmi\n\n\n\n\n0\nTom\n1.68\n48.4\n1\nStuttgart\n17.15\n\n\n1\nLisa\n1.93\n89.8\n2\nStuttgart\n24.11\n\n\n2\nPeter\n1.72\n84.2\n3\nBerlin\n28.46"
  },
  {
    "objectID": "slides/pandas-filter-group-bin.html#filter-with-and",
    "href": "slides/pandas-filter-group-bin.html#filter-with-and",
    "title": "Filter, Group and Bin Data",
    "section": "Filter with AND",
    "text": "Filter with AND\n\nCombine filtering for two columns or more with & (AND)\n\n\n\ndf[(df[\"height\"] &gt;= 1.67) & (df[\"weight\"] &lt; 74)]\n\n\n\n\n\n\n\n\nname\nheight\nweight\nid\ncity\nbmi\n\n\n\n\n0\nTom\n1.68\n48.4\n1\nStuttgart\n17.15"
  },
  {
    "objectID": "slides/pandas-filter-group-bin.html#filter-with-or",
    "href": "slides/pandas-filter-group-bin.html#filter-with-or",
    "title": "Filter, Group and Bin Data",
    "section": "Filter with OR",
    "text": "Filter with OR\n\nYou can also combine filtering for two columns or more with | (OR)\n\n\n\ndf[(df[\"height\"] &gt;= 167) | (df[\"weight\"] &lt; 74)]\n\n\n\n\n\n\n\n\n\n\nname\nheight\nweight\nid\ncity\nbmi\n\n\n\n\n0\nTom\n1.68\n48.4\n1\nStuttgart\n17.15"
  },
  {
    "objectID": "slides/pandas-filter-group-bin.html#isin",
    "href": "slides/pandas-filter-group-bin.html#isin",
    "title": "Filter, Group and Bin Data",
    "section": "isin()",
    "text": "isin()\n\nAlways use the isin() method if you have multiple conditions within one column:\n\n\n\ndf[df[\"name\"].isin([\"Tom\", \"Steven\"])]\n\n\n\n\n\n\n\n\n\n\nname\nheight\nweight\nid\ncity\nbmi\n\n\n\n\n0\nTom\n1.68\n48.4\n1\nStuttgart\n17.15"
  },
  {
    "objectID": "slides/pandas-filter-group-bin.html#grouping-steps",
    "href": "slides/pandas-filter-group-bin.html#grouping-steps",
    "title": "Filter, Group and Bin Data",
    "section": "Grouping steps",
    "text": "Grouping steps\n\nBy ‚Äúgroup by‚Äù we are referring to a process involving one or more of the following steps:\nSplitting the data into groups based on some criteria\nApplying a function to each group independently\nCombining the results into a data structure"
  },
  {
    "objectID": "slides/pandas-filter-group-bin.html#grouping-example-with-mean",
    "href": "slides/pandas-filter-group-bin.html#grouping-example-with-mean",
    "title": "Filter, Group and Bin Data",
    "section": "Grouping example with mean()",
    "text": "Grouping example with mean()\n\nGrouping and then applying the mean() function to the resulting groups. Furthermore, we round the results and transpose the data.\n\n\n\ndf.groupby(\"city\").mean(numeric_only=True).round(2).T\n\n\n\n\n\n\n\n\n\ncity\nBerlin\nStuttgart\n\n\n\n\nheight\n1.72\n1.80\n\n\nweight\n84.20\n69.10\n\n\nbmi\n28.46\n20.63"
  },
  {
    "objectID": "slides/pandas-filter-group-bin.html#segment-data-with-cut",
    "href": "slides/pandas-filter-group-bin.html#segment-data-with-cut",
    "title": "Filter, Group and Bin Data",
    "section": "Segment data with cut()",
    "text": "Segment data with cut()\n\nUse the function cut when you need to segment and sort data values into bins.\nThis function is also useful for going from a continuous variable to a categorical variable."
  },
  {
    "objectID": "slides/pandas-filter-group-bin.html#bmi-table",
    "href": "slides/pandas-filter-group-bin.html#bmi-table",
    "title": "Filter, Group and Bin Data",
    "section": "BMI table",
    "text": "BMI table\nThe standard weight status categories associated with BMI ranges for adults are shown in the following table:\n\n\n\nBMI\nWeight Status\n\n\n\n\nBelow 18.5\nUnderweight\n\n\n18.5 - 24.9\nNormal or Healthy Weight\n\n\n25.0 - 29.9\nOverweight\n\n\n30.0 and Above\nObese\n\n\n\nSource: U.S. Department of Health & Human Services"
  },
  {
    "objectID": "slides/pandas-filter-group-bin.html#bmi-example-1",
    "href": "slides/pandas-filter-group-bin.html#bmi-example-1",
    "title": "Filter, Group and Bin Data",
    "section": "BMI example 1",
    "text": "BMI example 1\n\nIn our function, we discretize the variable bmi into four bins according to the table above:\nThe bins [0, 18.5, 25, 30, float(‚Äòinf‚Äô)] indicate (0,18.5], (18.5,25], (25,30], (30, float(‚Äôinf))\nfloat('inf') is used for setting variable with an infinitely large value"
  },
  {
    "objectID": "slides/pandas-filter-group-bin.html#bmi-example-code",
    "href": "slides/pandas-filter-group-bin.html#bmi-example-code",
    "title": "Filter, Group and Bin Data",
    "section": "BMI example code",
    "text": "BMI example code\n\ndf['bmi_category'] = pd.cut(df['bmi'],\n                            bins=[0, 18.5, 25, 30, float('inf')],\n                            labels=['underweight', 'normal', 'overweight', \"obese\"])\n\n\n\ndf"
  },
  {
    "objectID": "slides/pandas-filter-group-bin.html#bmi-example-code-output",
    "href": "slides/pandas-filter-group-bin.html#bmi-example-code-output",
    "title": "Filter, Group and Bin Data",
    "section": "BMI example code",
    "text": "BMI example code\n\n\n\n\n\n\n\n\nname\nheight\nweight\nid\ncity\nbmi\nbmi_category\n\n\n\n\n0\nTom\n1.68\n48.4\n1\nStuttgart\n17.15\nunderweight\n\n\n1\nLisa\n1.93\n89.8\n2\nStuttgart\n24.11\nnormal\n\n\n2\nPeter\n1.72\n84.2\n3\nBerlin\n28.46\noverweight"
  },
  {
    "objectID": "slides/pandas-filter-group-bin.html#bmi-example-with-categories",
    "href": "slides/pandas-filter-group-bin.html#bmi-example-with-categories",
    "title": "Filter, Group and Bin Data",
    "section": "BMI example with categories",
    "text": "BMI example with categories\n\ndf['bmi_category']\n\n0    underweight\n1         normal\n2     overweight\nName: bmi_category, dtype: category\nCategories (4, object): ['underweight' &lt; 'normal' &lt; 'overweight' &lt; 'obese']"
  },
  {
    "objectID": "slides/pandas-filter-group-bin.html#four-equal-sized-bins",
    "href": "slides/pandas-filter-group-bin.html#four-equal-sized-bins",
    "title": "Filter, Group and Bin Data",
    "section": "Four equal-sized bins",
    "text": "Four equal-sized bins\n\nExample of how to discretize into four equal-sized bins:\n\n\n\ndf['bmi_category_2'] = pd.cut(df['bmi'],\n                              bins=4,\n                              labels=['group1', 'group2', 'group3', \"group4\"])\n\n\n\n\ndf['bmi_category_2']\n\n\n\n0    group1\n1    group3\n2    group4\nName: bmi_category_2, dtype: category\nCategories (4, object): ['group1' &lt; 'group2' &lt; 'group3' &lt; 'group4']"
  },
  {
    "objectID": "slides/pandas-filter-group-bin.html#four-equal-sized-bins-without-labels",
    "href": "slides/pandas-filter-group-bin.html#four-equal-sized-bins-without-labels",
    "title": "Filter, Group and Bin Data",
    "section": "Four equal-sized bins without labels",
    "text": "Four equal-sized bins without labels\n\nExample of how to discretize into four equal-sized bins if you don‚Äôt need labels\n\n\n\ndf['bmi_category_3'] = pd.cut(df['bmi'],\n                              bins=4,\n                              labels=False)\n\n\n\n\ndf['bmi_category_3']\n\n\n\n0    0\n1    2\n2    3\nName: bmi_category_3, dtype: int64"
  },
  {
    "objectID": "requirements.html",
    "href": "requirements.html",
    "title": "Requirements",
    "section": "",
    "text": "To start this lab, you‚Äôll need the following environments:\n\nPython: Anaconda, Anaconda Environment lab and Visual Studio Code\nWorking environment: üìÅ A folder on your machine called pandas-intro\n\n\n\n\n\n\n\nImportant\n\n\n\nVisit the ‚ÄúProgramming Toolkit-webpage‚Äù to learn how to set up the environments."
  },
  {
    "objectID": "slide.html",
    "href": "slide.html",
    "title": "Slides",
    "section": "",
    "text": "Take a look at the slides tutorial to learn how to use all slide options.\nTo download Jupyter Notebooks: Go to the Colab menu and choose ‚ÄúFile‚Äù &gt; ‚ÄúDownload‚Äù &gt; ‚ÄúDownload .ipynb‚Äù"
  },
  {
    "objectID": "slide.html#import-and-store-data",
    "href": "slide.html#import-and-store-data",
    "title": "Slides",
    "section": "1 Import and store data",
    "text": "1 Import and store data\n\n\n\n\n\n\n\nüñ•Ô∏è Presentation\nüíª Jupyter Notebook"
  },
  {
    "objectID": "slide.html#change-column-names",
    "href": "slide.html#change-column-names",
    "title": "Slides",
    "section": "2 Change column names",
    "text": "2 Change column names\n\n\n\n\n\n\n\nüñ•Ô∏è Presentation\nüíª Jupyter Notebook"
  },
  {
    "objectID": "slide.html#change-data-types-and-add-columns",
    "href": "slide.html#change-data-types-and-add-columns",
    "title": "Slides",
    "section": "3 Change data types and add columns",
    "text": "3 Change data types and add columns\n\n\n\n\n\n\n\nüñ•Ô∏è Presentation\nüíª Jupyter Notebook"
  },
  {
    "objectID": "slide.html#calculate-statistics-and-create-plots",
    "href": "slide.html#calculate-statistics-and-create-plots",
    "title": "Slides",
    "section": "4 Calculate statistics and create plots",
    "text": "4 Calculate statistics and create plots\n\n\n\n\n\n\n\nüñ•Ô∏è Presentation\nüíª Jupyter Notebook"
  },
  {
    "objectID": "slide.html#select-data",
    "href": "slide.html#select-data",
    "title": "Slides",
    "section": "5 Select data",
    "text": "5 Select data\n\n\n\n\n\n\n\nüñ•Ô∏è Presentation\nüíª Jupyter Notebook"
  },
  {
    "objectID": "slide.html#filter-group-and-bin-data",
    "href": "slide.html#filter-group-and-bin-data",
    "title": "Slides",
    "section": "6 Filter, group and bin data",
    "text": "6 Filter, group and bin data\n\n\n\n\n\n\n\nüñ•Ô∏è Presentation\nüíª Jupyter Notebook"
  },
  {
    "objectID": "slide.html#import-and-prepare-unclean-excel-data",
    "href": "slide.html#import-and-prepare-unclean-excel-data",
    "title": "Slides",
    "section": "7 Import and prepare unclean Excel data",
    "text": "7 Import and prepare unclean Excel data\n\nDownload this dataset from GENESIS-Online (the main database of the Federal Statistical Office)\n\n\n\n\n\n\n\n\nüñ•Ô∏è Presentation\nüíª Jupyter Notebook"
  }
]